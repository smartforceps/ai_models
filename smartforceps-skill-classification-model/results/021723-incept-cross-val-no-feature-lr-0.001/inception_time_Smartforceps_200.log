WARNING:tensorflow:From /home/amir/Desktop/smartforceps_ai_models/smartforceps_dl_prediction_models_tf2/smartforceps_skill_model/model_info.py:31: The name tf.keras.backend.set_session is deprecated. Please use tf.compat.v1.keras.backend.set_session instead.

DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 1.2440909090909091
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msbm10' (msbm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'eufm10' (eufm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'esint10' (esint10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'wasy10' (wasy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msam10' (msam10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 2.244090909090909
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'rsfs10' (rsfs10.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'stmary10' (stmary10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 1.2440909090909091
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msbm10' (msbm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'eufm10' (eufm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'esint10' (esint10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'wasy10' (wasy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msam10' (msam10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 2.244090909090909
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'rsfs10' (rsfs10.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'stmary10' (stmary10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
INFO:root:mean_time=1
WARNING:tensorflow:From /home/amir/Desktop/smartforceps_ai_models/smartforceps_dl_prediction_models_tf2/smartforceps_skill_model/model_info.py:31: The name tf.keras.backend.set_session is deprecated. Please use tf.compat.v1.keras.backend.set_session instead.

DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 1.2440909090909091
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msbm10' (msbm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'eufm10' (eufm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'esint10' (esint10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'wasy10' (wasy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msam10' (msam10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 2.244090909090909
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'rsfs10' (rsfs10.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'stmary10' (stmary10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 1.2440909090909091
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msbm10' (msbm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'eufm10' (eufm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'esint10' (esint10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'wasy10' (wasy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msam10' (msam10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 2.244090909090909
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'rsfs10' (rsfs10.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'stmary10' (stmary10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
INFO:root:mean_time=1
INFO:root:Epoch: 1 loss: 0.8329 accuracy0.5388 val_loss: 1.8061 val_accuracy0.5776%

INFO:root:Epoch: 2 loss: 0.6629 accuracy0.5911 val_loss: 0.7161 val_accuracy0.5603%

INFO:root:Epoch: 3 loss: 0.6382 accuracy0.6266 val_loss: 0.6982 val_accuracy0.4914%

INFO:root:Epoch: 4 loss: 0.6419 accuracy0.6137 val_loss: 0.6925 val_accuracy0.4655%

INFO:root:Epoch: 5 loss: 0.6281 accuracy0.6336 val_loss: 0.6950 val_accuracy0.5345%

INFO:root:Epoch: 6 loss: 0.6200 accuracy0.6530 val_loss: 0.7347 val_accuracy0.5172%

INFO:root:Epoch: 7 loss: 0.6188 accuracy0.6514 val_loss: 0.7201 val_accuracy0.4397%

INFO:root:Epoch: 8 loss: 0.6102 accuracy0.6600 val_loss: 0.7282 val_accuracy0.4828%

INFO:root:Epoch: 9 loss: 0.5986 accuracy0.6783 val_loss: 0.7231 val_accuracy0.4828%

INFO:root:Epoch: 10 loss: 0.5690 accuracy0.7020 val_loss: 0.7619 val_accuracy0.4914%

INFO:root:Epoch: 11 loss: 0.5756 accuracy0.6956 val_loss: 0.7450 val_accuracy0.4828%

INFO:root:Epoch: 12 loss: 0.5718 accuracy0.6956 val_loss: 0.8187 val_accuracy0.5172%

INFO:root:Epoch: 13 loss: 0.5702 accuracy0.7091 val_loss: 0.8407 val_accuracy0.5259%

INFO:root:Epoch: 14 loss: 0.5537 accuracy0.7171 val_loss: 0.8242 val_accuracy0.5000%

INFO:root:Epoch: 15 loss: 0.5393 accuracy0.7236 val_loss: 0.8311 val_accuracy0.5259%

INFO:root:Epoch: 16 loss: 0.5576 accuracy0.7209 val_loss: 0.7612 val_accuracy0.5086%

INFO:root:Epoch: 17 loss: 0.5341 accuracy0.7311 val_loss: 0.8207 val_accuracy0.5259%

INFO:root:Epoch: 18 loss: 0.5344 accuracy0.7274 val_loss: 0.7076 val_accuracy0.5086%

INFO:root:Epoch: 19 loss: 0.5398 accuracy0.7295 val_loss: 0.8040 val_accuracy0.5345%

INFO:root:Epoch: 20 loss: 0.5183 accuracy0.7532 val_loss: 0.8779 val_accuracy0.5345%

INFO:root:Epoch: 21 loss: 0.5205 accuracy0.7505 val_loss: 0.7535 val_accuracy0.5345%

INFO:root:Epoch: 22 loss: 0.4923 accuracy0.7484 val_loss: 0.7614 val_accuracy0.5431%

INFO:root:Epoch: 23 loss: 0.4749 accuracy0.7786 val_loss: 0.7349 val_accuracy0.5345%

INFO:root:Epoch: 24 loss: 0.4903 accuracy0.7732 val_loss: 0.6957 val_accuracy0.6121%

INFO:root:Epoch: 25 loss: 0.4782 accuracy0.7699 val_loss: 0.7505 val_accuracy0.5690%

INFO:root:Epoch: 26 loss: 0.4633 accuracy0.7726 val_loss: 0.7068 val_accuracy0.5603%

INFO:root:Epoch: 27 loss: 0.4599 accuracy0.7807 val_loss: 0.7626 val_accuracy0.5862%

INFO:root:Epoch: 28 loss: 0.4819 accuracy0.7721 val_loss: 0.7471 val_accuracy0.5862%

INFO:root:Epoch: 29 loss: 0.4670 accuracy0.7645 val_loss: 0.7512 val_accuracy0.5776%

INFO:root:Epoch: 30 loss: 0.4374 accuracy0.8044 val_loss: 0.7902 val_accuracy0.5690%

INFO:root:Epoch: 31 loss: 0.4296 accuracy0.7996 val_loss: 0.6774 val_accuracy0.6207%

INFO:root:Epoch: 32 loss: 0.4151 accuracy0.8190 val_loss: 0.7767 val_accuracy0.6121%

INFO:root:Epoch: 33 loss: 0.4226 accuracy0.7990 val_loss: 0.8765 val_accuracy0.5431%

INFO:root:Epoch: 34 loss: 0.4609 accuracy0.7893 val_loss: 0.6475 val_accuracy0.6293%

INFO:root:Epoch: 35 loss: 0.4560 accuracy0.7807 val_loss: 0.7774 val_accuracy0.6121%

INFO:root:Epoch: 36 loss: 0.4013 accuracy0.8152 val_loss: 0.5453 val_accuracy0.7069%

INFO:root:Epoch: 37 loss: 0.3933 accuracy0.8120 val_loss: 0.7597 val_accuracy0.6207%

INFO:root:Epoch: 38 loss: 0.3852 accuracy0.8233 val_loss: 0.7296 val_accuracy0.6466%

INFO:root:Epoch: 39 loss: 0.3921 accuracy0.8281 val_loss: 0.7008 val_accuracy0.6897%

INFO:root:Epoch: 40 loss: 0.3815 accuracy0.8303 val_loss: 0.6315 val_accuracy0.7241%

INFO:root:Epoch: 41 loss: 0.3617 accuracy0.8362 val_loss: 0.5271 val_accuracy0.7155%

INFO:root:Epoch: 42 loss: 0.3504 accuracy0.8486 val_loss: 0.5735 val_accuracy0.6810%

INFO:root:Epoch: 43 loss: 0.3568 accuracy0.8448 val_loss: 0.6863 val_accuracy0.6897%

INFO:root:Epoch: 44 loss: 0.3360 accuracy0.8534 val_loss: 0.8808 val_accuracy0.6724%

INFO:root:Epoch: 45 loss: 0.3394 accuracy0.8551 val_loss: 0.6149 val_accuracy0.6638%

INFO:root:Epoch: 46 loss: 0.2985 accuracy0.8745 val_loss: 0.5905 val_accuracy0.7069%

INFO:root:Epoch: 47 loss: 0.3087 accuracy0.8664 val_loss: 0.5310 val_accuracy0.7500%

INFO:root:Epoch: 48 loss: 0.2843 accuracy0.8793 val_loss: 0.5227 val_accuracy0.7328%

INFO:root:Epoch: 49 loss: 0.3119 accuracy0.8648 val_loss: 0.8534 val_accuracy0.7328%

INFO:root:Epoch: 50 loss: 0.3195 accuracy0.8578 val_loss: 0.6765 val_accuracy0.7069%

INFO:root:Epoch: 51 loss: 0.2670 accuracy0.8917 val_loss: 0.6158 val_accuracy0.7241%

INFO:root:Epoch: 52 loss: 0.2923 accuracy0.8691 val_loss: 0.5489 val_accuracy0.7414%

INFO:root:Epoch: 53 loss: 0.2896 accuracy0.8734 val_loss: 0.6159 val_accuracy0.7155%

INFO:root:Epoch: 54 loss: 0.2412 accuracy0.9052 val_loss: 0.5738 val_accuracy0.7328%

INFO:root:Epoch: 55 loss: 0.2208 accuracy0.9100 val_loss: 0.7199 val_accuracy0.6810%

INFO:root:Epoch: 56 loss: 0.2065 accuracy0.9197 val_loss: 0.5903 val_accuracy0.7155%

INFO:root:Epoch: 57 loss: 0.2125 accuracy0.9170 val_loss: 0.5486 val_accuracy0.7328%

INFO:root:Epoch: 58 loss: 0.2431 accuracy0.8982 val_loss: 0.6080 val_accuracy0.6983%

INFO:root:Epoch: 59 loss: 0.2239 accuracy0.9100 val_loss: 0.7074 val_accuracy0.7586%

INFO:root:Epoch: 60 loss: 0.2436 accuracy0.8917 val_loss: 0.7279 val_accuracy0.6810%

INFO:root:Epoch: 61 loss: 0.2283 accuracy0.9041 val_loss: 0.6495 val_accuracy0.7241%

INFO:root:Epoch: 62 loss: 0.2550 accuracy0.8982 val_loss: 0.7179 val_accuracy0.6897%

INFO:root:Epoch: 63 loss: 0.2065 accuracy0.9116 val_loss: 0.5279 val_accuracy0.7414%

INFO:root:Epoch: 64 loss: 0.1841 accuracy0.9213 val_loss: 0.5978 val_accuracy0.7328%

INFO:root:Epoch: 65 loss: 0.1778 accuracy0.9353 val_loss: 0.7859 val_accuracy0.7155%

INFO:root:Epoch: 66 loss: 0.1983 accuracy0.9219 val_loss: 0.5904 val_accuracy0.7414%

INFO:root:Epoch: 67 loss: 0.1849 accuracy0.9240 val_loss: 0.9365 val_accuracy0.6293%

INFO:root:Epoch: 68 loss: 0.1797 accuracy0.9294 val_loss: 0.6757 val_accuracy0.7241%

INFO:root:Epoch: 69 loss: 0.1763 accuracy0.9353 val_loss: 0.6947 val_accuracy0.7328%

INFO:root:Epoch: 70 loss: 0.2039 accuracy0.9133 val_loss: 0.7551 val_accuracy0.6810%

INFO:root:Epoch: 71 loss: 0.1905 accuracy0.9283 val_loss: 0.7608 val_accuracy0.7155%

INFO:root:Epoch: 72 loss: 0.1683 accuracy0.9402 val_loss: 0.6282 val_accuracy0.7672%

INFO:root:Epoch: 73 loss: 0.1627 accuracy0.9370 val_loss: 0.6003 val_accuracy0.7328%

INFO:root:Epoch: 74 loss: 0.1357 accuracy0.9510 val_loss: 0.6098 val_accuracy0.7328%

INFO:root:Epoch: 75 loss: 0.1521 accuracy0.9391 val_loss: 0.8806 val_accuracy0.7069%

INFO:root:Epoch: 76 loss: 0.1562 accuracy0.9375 val_loss: 0.7483 val_accuracy0.7155%

INFO:root:Epoch: 77 loss: 0.1844 accuracy0.9224 val_loss: 0.7849 val_accuracy0.7155%

INFO:root:Epoch: 78 loss: 0.1576 accuracy0.9429 val_loss: 0.9294 val_accuracy0.7500%

INFO:root:Epoch: 79 loss: 0.1702 accuracy0.9294 val_loss: 0.6782 val_accuracy0.7069%

INFO:root:Epoch: 80 loss: 0.1427 accuracy0.9461 val_loss: 0.7792 val_accuracy0.7414%

INFO:root:Epoch: 81 loss: 0.1412 accuracy0.9461 val_loss: 0.6485 val_accuracy0.7500%

INFO:root:Epoch: 82 loss: 0.1153 accuracy0.9585 val_loss: 0.7130 val_accuracy0.7069%

INFO:root:Epoch: 83 loss: 0.1089 accuracy0.9634 val_loss: 0.7087 val_accuracy0.8190%

INFO:root:Epoch: 84 loss: 0.0990 accuracy0.9639 val_loss: 0.7098 val_accuracy0.7328%

INFO:root:Epoch: 85 loss: 0.0959 accuracy0.9725 val_loss: 0.8110 val_accuracy0.7328%

INFO:root:Epoch: 86 loss: 0.0983 accuracy0.9677 val_loss: 1.0297 val_accuracy0.7241%

INFO:root:Epoch: 87 loss: 0.1045 accuracy0.9617 val_loss: 0.6699 val_accuracy0.7500%

INFO:root:Epoch: 88 loss: 0.1204 accuracy0.9558 val_loss: 0.8223 val_accuracy0.6983%

INFO:root:Epoch: 89 loss: 0.1067 accuracy0.9644 val_loss: 1.0349 val_accuracy0.6897%

INFO:root:Epoch: 90 loss: 0.1125 accuracy0.9547 val_loss: 0.9665 val_accuracy0.7241%

INFO:root:Epoch: 91 loss: 0.0976 accuracy0.9677 val_loss: 0.9437 val_accuracy0.7328%

INFO:root:Epoch: 92 loss: 0.1053 accuracy0.9639 val_loss: 0.9513 val_accuracy0.7328%

INFO:root:Epoch: 93 loss: 0.1009 accuracy0.9661 val_loss: 1.1092 val_accuracy0.7328%

INFO:root:Epoch: 94 loss: 0.0849 accuracy0.9725 val_loss: 0.8322 val_accuracy0.7672%

INFO:root:Epoch: 95 loss: 0.0718 accuracy0.9779 val_loss: 0.9001 val_accuracy0.7414%

INFO:root:Epoch: 96 loss: 0.0918 accuracy0.9693 val_loss: 0.8877 val_accuracy0.7069%

INFO:root:Epoch: 97 loss: 0.1073 accuracy0.9607 val_loss: 0.8576 val_accuracy0.7759%

INFO:root:Epoch: 98 loss: 0.0866 accuracy0.9704 val_loss: 0.7425 val_accuracy0.7500%

INFO:root:Epoch: 99 loss: 0.0848 accuracy0.9714 val_loss: 0.9124 val_accuracy0.7500%

INFO:root:Epoch: 100 loss: 0.0808 accuracy0.9768 val_loss: 0.8150 val_accuracy0.7241%

INFO:root:Epoch: 101 loss: 0.1141 accuracy0.9617 val_loss: 1.1386 val_accuracy0.6897%

INFO:root:Epoch: 102 loss: 0.1171 accuracy0.9607 val_loss: 0.9955 val_accuracy0.7155%

INFO:root:Epoch: 103 loss: 0.1126 accuracy0.9607 val_loss: 0.8747 val_accuracy0.7500%

INFO:root:Epoch: 104 loss: 0.1176 accuracy0.9520 val_loss: 1.0535 val_accuracy0.6983%

INFO:root:Epoch: 105 loss: 0.0864 accuracy0.9725 val_loss: 1.0425 val_accuracy0.7586%

INFO:root:Epoch: 106 loss: 0.0657 accuracy0.9768 val_loss: 0.9552 val_accuracy0.7155%

INFO:root:Epoch: 107 loss: 0.0592 accuracy0.9838 val_loss: 0.8808 val_accuracy0.7500%

INFO:root:Epoch: 108 loss: 0.0606 accuracy0.9811 val_loss: 0.8207 val_accuracy0.7500%

INFO:root:Epoch: 109 loss: 0.0698 accuracy0.9736 val_loss: 0.9097 val_accuracy0.6983%

INFO:root:Epoch: 110 loss: 0.1182 accuracy0.9510 val_loss: 1.2968 val_accuracy0.6810%

INFO:root:Epoch: 111 loss: 0.0903 accuracy0.9655 val_loss: 1.1653 val_accuracy0.6810%

INFO:root:Epoch: 112 loss: 0.0575 accuracy0.9833 val_loss: 1.3211 val_accuracy0.6638%

INFO:root:Epoch: 113 loss: 0.0457 accuracy0.9876 val_loss: 0.9902 val_accuracy0.7414%

INFO:root:Epoch: 114 loss: 0.0426 accuracy0.9898 val_loss: 0.8805 val_accuracy0.7586%

INFO:root:Epoch: 115 loss: 0.0477 accuracy0.9876 val_loss: 0.9132 val_accuracy0.7069%

INFO:root:Epoch: 116 loss: 0.0439 accuracy0.9871 val_loss: 0.8874 val_accuracy0.7241%

INFO:root:Epoch: 117 loss: 0.0391 accuracy0.9887 val_loss: 0.9270 val_accuracy0.7328%

INFO:root:Epoch: 118 loss: 0.0383 accuracy0.9887 val_loss: 0.8748 val_accuracy0.7586%

INFO:root:Epoch: 119 loss: 0.0429 accuracy0.9855 val_loss: 0.8291 val_accuracy0.7672%

INFO:root:Epoch: 120 loss: 0.0670 accuracy0.9763 val_loss: 1.0345 val_accuracy0.7241%

INFO:root:Epoch: 121 loss: 0.0740 accuracy0.9725 val_loss: 0.9366 val_accuracy0.7759%

INFO:root:Epoch: 122 loss: 0.0670 accuracy0.9774 val_loss: 0.9194 val_accuracy0.7241%

INFO:root:Epoch: 123 loss: 0.0485 accuracy0.9898 val_loss: 0.7663 val_accuracy0.7845%

INFO:root:Epoch: 124 loss: 0.0448 accuracy0.9855 val_loss: 0.8101 val_accuracy0.7672%

INFO:root:Epoch: 125 loss: 0.0430 accuracy0.9871 val_loss: 0.9110 val_accuracy0.7414%

INFO:root:Epoch: 126 loss: 0.0501 accuracy0.9860 val_loss: 0.9381 val_accuracy0.7241%

INFO:root:Epoch: 127 loss: 0.0391 accuracy0.9876 val_loss: 1.0495 val_accuracy0.6897%

INFO:root:Epoch: 128 loss: 0.0389 accuracy0.9881 val_loss: 0.9130 val_accuracy0.7328%

INFO:root:Epoch: 129 loss: 0.1037 accuracy0.9628 val_loss: 1.8038 val_accuracy0.7069%

INFO:root:Epoch: 130 loss: 0.1886 accuracy0.9327 val_loss: 3.1002 val_accuracy0.5948%

INFO:root:Epoch: 131 loss: 0.1244 accuracy0.9542 val_loss: 1.3074 val_accuracy0.6983%

INFO:root:Epoch: 132 loss: 0.1014 accuracy0.9666 val_loss: 1.2550 val_accuracy0.6897%

INFO:root:Epoch: 133 loss: 0.0784 accuracy0.9763 val_loss: 1.1092 val_accuracy0.7241%

INFO:root:Epoch: 134 loss: 0.0710 accuracy0.9731 val_loss: 1.0209 val_accuracy0.7672%

INFO:root:Epoch: 135 loss: 0.0501 accuracy0.9855 val_loss: 1.0651 val_accuracy0.7241%

INFO:root:Epoch: 136 loss: 0.0501 accuracy0.9849 val_loss: 1.0655 val_accuracy0.7328%

INFO:root:Epoch: 137 loss: 0.0491 accuracy0.9822 val_loss: 1.0478 val_accuracy0.7931%

INFO:root:Epoch: 138 loss: 0.0439 accuracy0.9871 val_loss: 0.9948 val_accuracy0.7672%

INFO:root:Epoch: 139 loss: 0.0348 accuracy0.9903 val_loss: 1.0291 val_accuracy0.7155%

INFO:root:Epoch: 140 loss: 0.0369 accuracy0.9881 val_loss: 0.9430 val_accuracy0.7241%

INFO:root:Epoch: 141 loss: 0.0391 accuracy0.9871 val_loss: 1.0108 val_accuracy0.7328%

INFO:root:Epoch: 142 loss: 0.0363 accuracy0.9892 val_loss: 1.0554 val_accuracy0.6983%

INFO:root:Epoch: 143 loss: 0.0296 accuracy0.9908 val_loss: 1.0778 val_accuracy0.7155%

INFO:root:Epoch: 144 loss: 0.0281 accuracy0.9908 val_loss: 1.0089 val_accuracy0.7069%

INFO:root:Epoch: 145 loss: 0.0279 accuracy0.9914 val_loss: 0.9163 val_accuracy0.7500%

INFO:root:Epoch: 146 loss: 0.0375 accuracy0.9876 val_loss: 1.3063 val_accuracy0.7069%

INFO:root:Epoch: 147 loss: 0.0410 accuracy0.9887 val_loss: 1.5105 val_accuracy0.6552%

INFO:root:Epoch: 148 loss: 0.0419 accuracy0.9876 val_loss: 1.2616 val_accuracy0.7241%

INFO:root:Epoch: 149 loss: 0.0413 accuracy0.9871 val_loss: 1.2041 val_accuracy0.7328%

INFO:root:Epoch: 150 loss: 0.0407 accuracy0.9849 val_loss: 1.2191 val_accuracy0.6552%

INFO:root:Epoch: 151 loss: 0.0333 accuracy0.9887 val_loss: 1.1414 val_accuracy0.7241%

INFO:root:Epoch: 152 loss: 0.0359 accuracy0.9892 val_loss: 1.0508 val_accuracy0.7241%

INFO:root:Epoch: 153 loss: 0.0334 accuracy0.9887 val_loss: 1.1422 val_accuracy0.7500%

INFO:root:Epoch: 154 loss: 0.0384 accuracy0.9898 val_loss: 1.2587 val_accuracy0.7069%

INFO:root:Epoch: 155 loss: 0.0244 accuracy0.9925 val_loss: 1.2490 val_accuracy0.6724%

INFO:root:Epoch: 156 loss: 0.0329 accuracy0.9903 val_loss: 1.1619 val_accuracy0.7328%

INFO:root:Epoch: 157 loss: 0.0384 accuracy0.9855 val_loss: 1.5409 val_accuracy0.6983%

INFO:root:Epoch: 158 loss: 0.0552 accuracy0.9784 val_loss: 1.6739 val_accuracy0.7414%

INFO:root:Epoch: 159 loss: 0.0658 accuracy0.9779 val_loss: 1.9481 val_accuracy0.6724%

INFO:root:Epoch: 160 loss: 0.0574 accuracy0.9779 val_loss: 1.6590 val_accuracy0.6983%

INFO:root:Epoch: 161 loss: 0.0495 accuracy0.9817 val_loss: 1.5908 val_accuracy0.6810%

INFO:root:Epoch: 162 loss: 0.0428 accuracy0.9881 val_loss: 1.2041 val_accuracy0.7241%

INFO:root:Epoch: 163 loss: 0.0468 accuracy0.9844 val_loss: 1.3511 val_accuracy0.6983%

INFO:root:Epoch: 164 loss: 0.0510 accuracy0.9828 val_loss: 1.2426 val_accuracy0.7155%

INFO:root:Epoch: 165 loss: 0.0590 accuracy0.9774 val_loss: 1.0356 val_accuracy0.7155%

INFO:root:Epoch: 166 loss: 0.0692 accuracy0.9741 val_loss: 1.3269 val_accuracy0.7328%

INFO:root:Epoch: 167 loss: 0.0666 accuracy0.9768 val_loss: 1.1295 val_accuracy0.7672%

INFO:root:Epoch: 168 loss: 0.0739 accuracy0.9736 val_loss: 1.2586 val_accuracy0.7241%

INFO:root:Epoch: 169 loss: 0.0588 accuracy0.9801 val_loss: 0.9490 val_accuracy0.7586%

INFO:root:Epoch: 170 loss: 0.0508 accuracy0.9844 val_loss: 1.3155 val_accuracy0.7155%

INFO:root:Epoch: 171 loss: 0.0513 accuracy0.9833 val_loss: 1.1005 val_accuracy0.7241%

INFO:root:Epoch: 172 loss: 0.0431 accuracy0.9855 val_loss: 1.3338 val_accuracy0.6983%

INFO:root:Epoch: 173 loss: 0.0543 accuracy0.9801 val_loss: 1.5341 val_accuracy0.6638%

INFO:root:Epoch: 174 loss: 0.0515 accuracy0.9811 val_loss: 1.7962 val_accuracy0.7069%

INFO:root:Epoch: 175 loss: 0.0361 accuracy0.9876 val_loss: 1.1657 val_accuracy0.7069%

INFO:root:Epoch: 176 loss: 0.0486 accuracy0.9828 val_loss: 1.3380 val_accuracy0.7155%

INFO:root:Epoch: 177 loss: 0.0601 accuracy0.9795 val_loss: 1.8452 val_accuracy0.6897%

INFO:root:Epoch: 178 loss: 0.0754 accuracy0.9725 val_loss: 1.4885 val_accuracy0.7069%

INFO:root:Epoch: 179 loss: 0.0605 accuracy0.9790 val_loss: 1.2344 val_accuracy0.6897%

INFO:root:Epoch: 180 loss: 0.0440 accuracy0.9855 val_loss: 1.0690 val_accuracy0.7328%

INFO:root:Epoch: 181 loss: 0.0468 accuracy0.9855 val_loss: 0.9627 val_accuracy0.7586%

INFO:root:Epoch: 182 loss: 0.0444 accuracy0.9833 val_loss: 1.0836 val_accuracy0.7241%

INFO:root:Epoch: 183 loss: 0.0340 accuracy0.9892 val_loss: 1.0490 val_accuracy0.7931%

INFO:root:Epoch: 184 loss: 0.0379 accuracy0.9855 val_loss: 0.9211 val_accuracy0.7759%

INFO:root:Epoch: 185 loss: 0.0417 accuracy0.9828 val_loss: 0.9987 val_accuracy0.7069%

INFO:root:Epoch: 186 loss: 0.0360 accuracy0.9892 val_loss: 1.4342 val_accuracy0.7500%

INFO:root:Epoch: 187 loss: 0.0325 accuracy0.9914 val_loss: 1.2059 val_accuracy0.7500%

INFO:root:Epoch: 188 loss: 0.0409 accuracy0.9871 val_loss: 1.0348 val_accuracy0.7500%

INFO:root:Epoch: 189 loss: 0.0405 accuracy0.9865 val_loss: 1.0867 val_accuracy0.7672%

INFO:root:Epoch: 190 loss: 0.0367 accuracy0.9871 val_loss: 0.8320 val_accuracy0.7672%

INFO:root:Epoch: 191 loss: 0.0237 accuracy0.9914 val_loss: 1.1754 val_accuracy0.7155%

INFO:root:Epoch: 192 loss: 0.0234 accuracy0.9946 val_loss: 1.1007 val_accuracy0.7241%

INFO:root:Epoch: 193 loss: 0.0252 accuracy0.9919 val_loss: 1.2986 val_accuracy0.7414%

INFO:root:Epoch: 194 loss: 0.0257 accuracy0.9914 val_loss: 1.4249 val_accuracy0.7069%

INFO:root:Epoch: 195 loss: 0.0238 accuracy0.9908 val_loss: 1.0563 val_accuracy0.7241%

INFO:root:Epoch: 196 loss: 0.0254 accuracy0.9908 val_loss: 0.9440 val_accuracy0.7500%

INFO:root:Epoch: 197 loss: 0.0207 accuracy0.9930 val_loss: 1.4193 val_accuracy0.6897%

INFO:root:Epoch: 198 loss: 0.0197 accuracy0.9935 val_loss: 1.0958 val_accuracy0.7328%

INFO:root:Epoch: 199 loss: 0.0157 accuracy0.9946 val_loss: 1.0736 val_accuracy0.7414%

INFO:root:Epoch: 200 loss: 0.0142 accuracy0.9957 val_loss: 1.1338 val_accuracy0.7069%

INFO:root:mean_time=2
INFO:root:Epoch: 1 loss: 0.7780 accuracy0.5679 val_loss: 1.1419 val_accuracy0.3707%

INFO:root:Epoch: 2 loss: 0.6677 accuracy0.5948 val_loss: 0.7641 val_accuracy0.4914%

INFO:root:Epoch: 3 loss: 0.6490 accuracy0.6110 val_loss: 0.7397 val_accuracy0.4914%

INFO:root:Epoch: 4 loss: 0.6350 accuracy0.6412 val_loss: 0.7650 val_accuracy0.5086%

INFO:root:Epoch: 5 loss: 0.6204 accuracy0.6428 val_loss: 0.8341 val_accuracy0.5172%

INFO:root:Epoch: 6 loss: 0.6208 accuracy0.6568 val_loss: 0.8557 val_accuracy0.5172%

INFO:root:Epoch: 7 loss: 0.6247 accuracy0.6347 val_loss: 0.7775 val_accuracy0.4569%

INFO:root:Epoch: 8 loss: 0.6049 accuracy0.6616 val_loss: 0.7353 val_accuracy0.4569%

INFO:root:Epoch: 9 loss: 0.5913 accuracy0.6859 val_loss: 0.8285 val_accuracy0.4914%

INFO:root:Epoch: 10 loss: 0.5961 accuracy0.6724 val_loss: 0.7411 val_accuracy0.5000%

INFO:root:Epoch: 11 loss: 0.5948 accuracy0.6762 val_loss: 0.8583 val_accuracy0.5172%

INFO:root:Epoch: 12 loss: 0.5808 accuracy0.6956 val_loss: 0.9406 val_accuracy0.4310%

INFO:root:Epoch: 13 loss: 0.5660 accuracy0.6934 val_loss: 0.8670 val_accuracy0.5086%

INFO:root:Epoch: 14 loss: 0.5666 accuracy0.6972 val_loss: 0.8365 val_accuracy0.5172%

INFO:root:Epoch: 15 loss: 0.5652 accuracy0.7074 val_loss: 0.9100 val_accuracy0.5086%

INFO:root:Epoch: 16 loss: 0.5483 accuracy0.7144 val_loss: 0.8917 val_accuracy0.5086%

INFO:root:Epoch: 17 loss: 0.5476 accuracy0.7150 val_loss: 0.9475 val_accuracy0.5086%

INFO:root:Epoch: 18 loss: 0.5322 accuracy0.7306 val_loss: 0.8673 val_accuracy0.5000%

INFO:root:Epoch: 19 loss: 0.5397 accuracy0.7328 val_loss: 0.7444 val_accuracy0.5000%

INFO:root:Epoch: 20 loss: 0.5393 accuracy0.7155 val_loss: 0.8078 val_accuracy0.5172%

INFO:root:Epoch: 21 loss: 0.5454 accuracy0.7209 val_loss: 0.8766 val_accuracy0.5172%

INFO:root:Epoch: 22 loss: 0.5095 accuracy0.7613 val_loss: 0.9286 val_accuracy0.5259%

INFO:root:Epoch: 23 loss: 0.4927 accuracy0.7645 val_loss: 0.8281 val_accuracy0.5259%

INFO:root:Epoch: 24 loss: 0.5076 accuracy0.7489 val_loss: 0.8811 val_accuracy0.5000%

INFO:root:Epoch: 25 loss: 0.4962 accuracy0.7608 val_loss: 0.7608 val_accuracy0.5690%

INFO:root:Epoch: 26 loss: 0.4706 accuracy0.7667 val_loss: 0.7702 val_accuracy0.5345%

INFO:root:Epoch: 27 loss: 0.4867 accuracy0.7667 val_loss: 0.7389 val_accuracy0.5431%

INFO:root:Epoch: 28 loss: 0.4815 accuracy0.7726 val_loss: 0.7614 val_accuracy0.5776%

INFO:root:Epoch: 29 loss: 0.4267 accuracy0.8087 val_loss: 0.7104 val_accuracy0.6121%

INFO:root:Epoch: 30 loss: 0.4381 accuracy0.8023 val_loss: 0.7446 val_accuracy0.6034%

INFO:root:Epoch: 31 loss: 0.4357 accuracy0.7980 val_loss: 0.6442 val_accuracy0.6638%

INFO:root:Epoch: 32 loss: 0.4142 accuracy0.8195 val_loss: 0.7436 val_accuracy0.5862%

INFO:root:Epoch: 33 loss: 0.3856 accuracy0.8249 val_loss: 0.7849 val_accuracy0.6121%

INFO:root:Epoch: 34 loss: 0.3996 accuracy0.8163 val_loss: 0.6789 val_accuracy0.5862%

INFO:root:Epoch: 35 loss: 0.4099 accuracy0.8039 val_loss: 0.9174 val_accuracy0.5517%

INFO:root:Epoch: 36 loss: 0.3785 accuracy0.8270 val_loss: 0.6651 val_accuracy0.5948%

INFO:root:Epoch: 37 loss: 0.3550 accuracy0.8551 val_loss: 0.5812 val_accuracy0.7069%

INFO:root:Epoch: 38 loss: 0.3927 accuracy0.8222 val_loss: 0.6134 val_accuracy0.6810%

INFO:root:Epoch: 39 loss: 0.4203 accuracy0.8044 val_loss: 0.9322 val_accuracy0.6207%

INFO:root:Epoch: 40 loss: 0.3650 accuracy0.8459 val_loss: 0.6783 val_accuracy0.7069%

INFO:root:Epoch: 41 loss: 0.3191 accuracy0.8669 val_loss: 0.5483 val_accuracy0.7069%

INFO:root:Epoch: 42 loss: 0.3323 accuracy0.8508 val_loss: 0.6145 val_accuracy0.6810%

INFO:root:Epoch: 43 loss: 0.2980 accuracy0.8658 val_loss: 0.5946 val_accuracy0.6897%

INFO:root:Epoch: 44 loss: 0.2887 accuracy0.8658 val_loss: 0.5646 val_accuracy0.7586%

INFO:root:Epoch: 45 loss: 0.2720 accuracy0.8815 val_loss: 0.5341 val_accuracy0.7672%

INFO:root:Epoch: 46 loss: 0.2475 accuracy0.9036 val_loss: 0.5624 val_accuracy0.7328%

INFO:root:Epoch: 47 loss: 0.2394 accuracy0.9009 val_loss: 0.5745 val_accuracy0.7759%

INFO:root:Epoch: 48 loss: 0.2344 accuracy0.9079 val_loss: 0.5781 val_accuracy0.7672%

INFO:root:Epoch: 49 loss: 0.2357 accuracy0.9089 val_loss: 0.6618 val_accuracy0.7328%

INFO:root:Epoch: 50 loss: 0.2647 accuracy0.8922 val_loss: 1.1487 val_accuracy0.6466%

INFO:root:Epoch: 51 loss: 0.2586 accuracy0.8874 val_loss: 0.6973 val_accuracy0.7672%

INFO:root:Epoch: 52 loss: 0.2201 accuracy0.9089 val_loss: 1.0453 val_accuracy0.6552%

INFO:root:Epoch: 53 loss: 0.1952 accuracy0.9203 val_loss: 0.6033 val_accuracy0.7414%

INFO:root:Epoch: 54 loss: 0.1984 accuracy0.9176 val_loss: 0.6698 val_accuracy0.7241%

INFO:root:Epoch: 55 loss: 0.2008 accuracy0.9230 val_loss: 0.8901 val_accuracy0.7241%

INFO:root:Epoch: 56 loss: 0.1711 accuracy0.9364 val_loss: 0.7148 val_accuracy0.7155%

INFO:root:Epoch: 57 loss: 0.1876 accuracy0.9240 val_loss: 0.9201 val_accuracy0.7069%

INFO:root:Epoch: 58 loss: 0.1946 accuracy0.9192 val_loss: 0.7252 val_accuracy0.7500%

INFO:root:Epoch: 59 loss: 0.1637 accuracy0.9413 val_loss: 0.6805 val_accuracy0.7672%

INFO:root:Epoch: 60 loss: 0.1514 accuracy0.9434 val_loss: 0.8242 val_accuracy0.7586%

INFO:root:Epoch: 61 loss: 0.1706 accuracy0.9321 val_loss: 0.7449 val_accuracy0.7500%

INFO:root:Epoch: 62 loss: 0.1717 accuracy0.9327 val_loss: 0.8483 val_accuracy0.7845%

INFO:root:Epoch: 63 loss: 0.1522 accuracy0.9445 val_loss: 0.7279 val_accuracy0.7759%

INFO:root:Epoch: 64 loss: 0.1588 accuracy0.9359 val_loss: 0.8360 val_accuracy0.7241%

INFO:root:Epoch: 65 loss: 0.1384 accuracy0.9472 val_loss: 1.0710 val_accuracy0.7328%

INFO:root:Epoch: 66 loss: 0.1308 accuracy0.9564 val_loss: 0.7977 val_accuracy0.7672%

INFO:root:Epoch: 67 loss: 0.1187 accuracy0.9580 val_loss: 0.7293 val_accuracy0.7586%

INFO:root:Epoch: 68 loss: 0.1212 accuracy0.9601 val_loss: 0.8823 val_accuracy0.7759%

INFO:root:Epoch: 69 loss: 0.1453 accuracy0.9499 val_loss: 0.9291 val_accuracy0.6293%

INFO:root:Epoch: 70 loss: 0.1198 accuracy0.9553 val_loss: 0.8626 val_accuracy0.7500%

INFO:root:Epoch: 71 loss: 0.1180 accuracy0.9574 val_loss: 0.8109 val_accuracy0.7759%

INFO:root:Epoch: 72 loss: 0.0970 accuracy0.9650 val_loss: 1.0627 val_accuracy0.7155%

INFO:root:Epoch: 73 loss: 0.0884 accuracy0.9709 val_loss: 0.8586 val_accuracy0.7586%

INFO:root:Epoch: 74 loss: 0.0964 accuracy0.9639 val_loss: 0.8351 val_accuracy0.7672%

INFO:root:Epoch: 75 loss: 0.0834 accuracy0.9731 val_loss: 1.0125 val_accuracy0.7241%

INFO:root:Epoch: 76 loss: 0.0848 accuracy0.9714 val_loss: 0.9148 val_accuracy0.7241%

INFO:root:Epoch: 77 loss: 0.0853 accuracy0.9747 val_loss: 1.0308 val_accuracy0.7500%

INFO:root:Epoch: 78 loss: 0.0718 accuracy0.9790 val_loss: 0.9323 val_accuracy0.7328%

INFO:root:Epoch: 79 loss: 0.0688 accuracy0.9779 val_loss: 1.0074 val_accuracy0.7414%

INFO:root:Epoch: 80 loss: 0.0700 accuracy0.9741 val_loss: 1.4452 val_accuracy0.7328%

INFO:root:Epoch: 81 loss: 0.0780 accuracy0.9741 val_loss: 1.2616 val_accuracy0.7328%

INFO:root:Epoch: 82 loss: 0.1005 accuracy0.9650 val_loss: 1.7331 val_accuracy0.7241%

INFO:root:Epoch: 83 loss: 0.1012 accuracy0.9612 val_loss: 0.9600 val_accuracy0.7672%

INFO:root:Epoch: 84 loss: 0.0945 accuracy0.9682 val_loss: 1.2046 val_accuracy0.7069%

INFO:root:Epoch: 85 loss: 0.0849 accuracy0.9714 val_loss: 1.4650 val_accuracy0.7500%

INFO:root:Epoch: 86 loss: 0.0800 accuracy0.9752 val_loss: 1.1484 val_accuracy0.7328%

INFO:root:Epoch: 87 loss: 0.0671 accuracy0.9768 val_loss: 1.4130 val_accuracy0.7328%

INFO:root:Epoch: 88 loss: 0.0656 accuracy0.9768 val_loss: 0.9971 val_accuracy0.7414%

INFO:root:Epoch: 89 loss: 0.0750 accuracy0.9731 val_loss: 1.0340 val_accuracy0.7500%

INFO:root:Epoch: 90 loss: 0.0609 accuracy0.9806 val_loss: 0.9861 val_accuracy0.7672%

INFO:root:Epoch: 91 loss: 0.0520 accuracy0.9849 val_loss: 0.9880 val_accuracy0.7414%

INFO:root:Epoch: 92 loss: 0.0463 accuracy0.9844 val_loss: 0.8732 val_accuracy0.7586%

INFO:root:Epoch: 93 loss: 0.0493 accuracy0.9860 val_loss: 0.9905 val_accuracy0.7155%

INFO:root:Epoch: 94 loss: 0.0562 accuracy0.9833 val_loss: 1.0820 val_accuracy0.7500%

INFO:root:Epoch: 95 loss: 0.0555 accuracy0.9838 val_loss: 1.6025 val_accuracy0.7155%

INFO:root:Epoch: 96 loss: 0.0569 accuracy0.9849 val_loss: 1.3892 val_accuracy0.7586%

INFO:root:Epoch: 97 loss: 0.0554 accuracy0.9833 val_loss: 1.1634 val_accuracy0.7586%

INFO:root:Epoch: 98 loss: 0.0550 accuracy0.9811 val_loss: 0.9633 val_accuracy0.7586%

INFO:root:Epoch: 99 loss: 0.0599 accuracy0.9779 val_loss: 1.1151 val_accuracy0.7241%

INFO:root:Epoch: 100 loss: 0.0574 accuracy0.9828 val_loss: 1.0906 val_accuracy0.7759%

INFO:root:Epoch: 101 loss: 0.0517 accuracy0.9833 val_loss: 0.9485 val_accuracy0.7931%

INFO:root:Epoch: 102 loss: 0.0714 accuracy0.9731 val_loss: 1.8899 val_accuracy0.6983%

INFO:root:Epoch: 103 loss: 0.0702 accuracy0.9774 val_loss: 0.9696 val_accuracy0.7672%

INFO:root:Epoch: 104 loss: 0.0655 accuracy0.9758 val_loss: 1.0850 val_accuracy0.7069%

INFO:root:Epoch: 105 loss: 0.0607 accuracy0.9790 val_loss: 1.2895 val_accuracy0.7414%

INFO:root:Epoch: 106 loss: 0.0694 accuracy0.9779 val_loss: 1.0407 val_accuracy0.6983%

INFO:root:Epoch: 107 loss: 0.0562 accuracy0.9817 val_loss: 1.3520 val_accuracy0.7155%

INFO:root:Epoch: 108 loss: 0.0513 accuracy0.9833 val_loss: 1.2248 val_accuracy0.7586%

INFO:root:Epoch: 109 loss: 0.0402 accuracy0.9881 val_loss: 1.1172 val_accuracy0.7500%

INFO:root:Epoch: 110 loss: 0.0574 accuracy0.9752 val_loss: 1.0395 val_accuracy0.7500%

INFO:root:Epoch: 111 loss: 0.0543 accuracy0.9801 val_loss: 1.2900 val_accuracy0.7414%

INFO:root:Epoch: 112 loss: 0.0499 accuracy0.9860 val_loss: 1.3998 val_accuracy0.7586%

INFO:root:Epoch: 113 loss: 0.0517 accuracy0.9833 val_loss: 1.8014 val_accuracy0.7069%

INFO:root:Epoch: 114 loss: 0.0423 accuracy0.9881 val_loss: 1.1624 val_accuracy0.7931%

INFO:root:Epoch: 115 loss: 0.0341 accuracy0.9892 val_loss: 1.2333 val_accuracy0.7759%

INFO:root:Epoch: 116 loss: 0.0437 accuracy0.9849 val_loss: 1.2664 val_accuracy0.8276%

INFO:root:Epoch: 117 loss: 0.0387 accuracy0.9860 val_loss: 1.3097 val_accuracy0.7672%

INFO:root:Epoch: 118 loss: 0.0302 accuracy0.9908 val_loss: 1.1228 val_accuracy0.7500%

INFO:root:Epoch: 119 loss: 0.0254 accuracy0.9935 val_loss: 1.1647 val_accuracy0.8017%

INFO:root:Epoch: 120 loss: 0.0282 accuracy0.9935 val_loss: 1.3047 val_accuracy0.7500%

INFO:root:Epoch: 121 loss: 0.0276 accuracy0.9925 val_loss: 1.5825 val_accuracy0.7241%

INFO:root:Epoch: 122 loss: 0.0255 accuracy0.9935 val_loss: 1.1592 val_accuracy0.7500%

INFO:root:Epoch: 123 loss: 0.0297 accuracy0.9898 val_loss: 1.2257 val_accuracy0.7672%

INFO:root:Epoch: 124 loss: 0.0311 accuracy0.9908 val_loss: 1.3452 val_accuracy0.7586%

INFO:root:Epoch: 125 loss: 0.0511 accuracy0.9833 val_loss: 1.3761 val_accuracy0.7328%

INFO:root:Epoch: 126 loss: 0.0519 accuracy0.9801 val_loss: 1.6610 val_accuracy0.7328%

INFO:root:Epoch: 127 loss: 0.0554 accuracy0.9784 val_loss: 1.5968 val_accuracy0.7500%

INFO:root:Epoch: 128 loss: 0.0886 accuracy0.9682 val_loss: 1.2449 val_accuracy0.7845%

INFO:root:Epoch: 129 loss: 0.0700 accuracy0.9741 val_loss: 1.4160 val_accuracy0.7586%

INFO:root:Epoch: 130 loss: 0.0630 accuracy0.9763 val_loss: 1.0905 val_accuracy0.7931%

INFO:root:Epoch: 131 loss: 0.0569 accuracy0.9822 val_loss: 1.1217 val_accuracy0.7931%

INFO:root:Epoch: 132 loss: 0.0437 accuracy0.9865 val_loss: 1.4484 val_accuracy0.7328%

INFO:root:Epoch: 133 loss: 0.0371 accuracy0.9908 val_loss: 1.2227 val_accuracy0.7672%

INFO:root:Epoch: 134 loss: 0.0292 accuracy0.9925 val_loss: 1.2904 val_accuracy0.7328%

INFO:root:Epoch: 135 loss: 0.0361 accuracy0.9865 val_loss: 1.4295 val_accuracy0.7328%

INFO:root:Epoch: 136 loss: 0.0369 accuracy0.9887 val_loss: 1.2807 val_accuracy0.7586%

INFO:root:Epoch: 137 loss: 0.0257 accuracy0.9925 val_loss: 1.0866 val_accuracy0.7931%

INFO:root:Epoch: 138 loss: 0.0206 accuracy0.9946 val_loss: 1.1658 val_accuracy0.7672%

INFO:root:Epoch: 139 loss: 0.0211 accuracy0.9930 val_loss: 1.2512 val_accuracy0.7500%

INFO:root:Epoch: 140 loss: 0.0326 accuracy0.9908 val_loss: 1.6353 val_accuracy0.6983%

INFO:root:Epoch: 141 loss: 0.0399 accuracy0.9844 val_loss: 1.7450 val_accuracy0.7155%

INFO:root:Epoch: 142 loss: 0.0399 accuracy0.9876 val_loss: 2.5147 val_accuracy0.7069%

INFO:root:Epoch: 143 loss: 0.0572 accuracy0.9779 val_loss: 1.2839 val_accuracy0.7414%

INFO:root:Epoch: 144 loss: 0.0389 accuracy0.9887 val_loss: 1.3420 val_accuracy0.7672%

INFO:root:Epoch: 145 loss: 0.0386 accuracy0.9892 val_loss: 1.9835 val_accuracy0.7328%

INFO:root:Epoch: 146 loss: 0.0457 accuracy0.9828 val_loss: 2.0090 val_accuracy0.6983%

INFO:root:Epoch: 147 loss: 0.0451 accuracy0.9833 val_loss: 1.9302 val_accuracy0.7586%

INFO:root:Epoch: 148 loss: 0.0469 accuracy0.9822 val_loss: 2.2816 val_accuracy0.7328%

INFO:root:Epoch: 149 loss: 0.0439 accuracy0.9876 val_loss: 1.4188 val_accuracy0.7241%

INFO:root:Epoch: 150 loss: 0.1957 accuracy0.9294 val_loss: 6.3010 val_accuracy0.6466%

INFO:root:Epoch: 151 loss: 0.1852 accuracy0.9246 val_loss: 2.3572 val_accuracy0.6466%

INFO:root:Epoch: 152 loss: 0.1118 accuracy0.9591 val_loss: 1.4355 val_accuracy0.7759%

INFO:root:Epoch: 153 loss: 0.0707 accuracy0.9747 val_loss: 1.2940 val_accuracy0.7241%

INFO:root:Epoch: 154 loss: 0.0468 accuracy0.9844 val_loss: 1.3290 val_accuracy0.7414%

INFO:root:Epoch: 155 loss: 0.0312 accuracy0.9925 val_loss: 1.2666 val_accuracy0.7241%

INFO:root:Epoch: 156 loss: 0.0249 accuracy0.9930 val_loss: 1.2486 val_accuracy0.7500%

INFO:root:Epoch: 157 loss: 0.0242 accuracy0.9903 val_loss: 1.1820 val_accuracy0.7155%

INFO:root:Epoch: 158 loss: 0.0293 accuracy0.9908 val_loss: 1.4213 val_accuracy0.7155%

INFO:root:Epoch: 159 loss: 0.0260 accuracy0.9919 val_loss: 1.3130 val_accuracy0.7241%

INFO:root:Epoch: 160 loss: 0.0229 accuracy0.9908 val_loss: 1.2139 val_accuracy0.7759%

INFO:root:Epoch: 161 loss: 0.0231 accuracy0.9935 val_loss: 1.4630 val_accuracy0.7328%

INFO:root:Epoch: 162 loss: 0.0185 accuracy0.9957 val_loss: 1.2534 val_accuracy0.7414%

INFO:root:Epoch: 163 loss: 0.0208 accuracy0.9919 val_loss: 1.3121 val_accuracy0.7759%

INFO:root:Epoch: 164 loss: 0.0178 accuracy0.9941 val_loss: 1.2103 val_accuracy0.7586%

INFO:root:Epoch: 165 loss: 0.0180 accuracy0.9935 val_loss: 1.3937 val_accuracy0.7414%

INFO:root:Epoch: 166 loss: 0.0174 accuracy0.9935 val_loss: 1.5566 val_accuracy0.7586%

INFO:root:Epoch: 167 loss: 0.0162 accuracy0.9957 val_loss: 1.4805 val_accuracy0.7586%

INFO:root:Epoch: 168 loss: 0.0193 accuracy0.9935 val_loss: 1.5000 val_accuracy0.7759%

INFO:root:Epoch: 169 loss: 0.0201 accuracy0.9952 val_loss: 1.5395 val_accuracy0.7328%

INFO:root:Epoch: 170 loss: 0.0167 accuracy0.9946 val_loss: 1.5643 val_accuracy0.7241%

INFO:root:Epoch: 171 loss: 0.0158 accuracy0.9952 val_loss: 1.3929 val_accuracy0.7328%

INFO:root:Epoch: 172 loss: 0.0180 accuracy0.9935 val_loss: 1.5819 val_accuracy0.7328%

INFO:root:Epoch: 173 loss: 0.0182 accuracy0.9941 val_loss: 1.6175 val_accuracy0.7241%

INFO:root:Epoch: 174 loss: 0.0242 accuracy0.9898 val_loss: 1.4054 val_accuracy0.7931%

INFO:root:Epoch: 175 loss: 0.0443 accuracy0.9844 val_loss: 1.7537 val_accuracy0.7672%

INFO:root:Epoch: 176 loss: 0.0623 accuracy0.9801 val_loss: 1.6415 val_accuracy0.7414%

INFO:root:Epoch: 177 loss: 0.0897 accuracy0.9644 val_loss: 1.6923 val_accuracy0.7155%

INFO:root:Epoch: 178 loss: 0.0666 accuracy0.9725 val_loss: 2.3903 val_accuracy0.6724%

INFO:root:Epoch: 179 loss: 0.0746 accuracy0.9747 val_loss: 1.5741 val_accuracy0.7069%

INFO:root:Epoch: 180 loss: 0.0959 accuracy0.9639 val_loss: 1.7779 val_accuracy0.5948%

INFO:root:Epoch: 181 loss: 0.0842 accuracy0.9752 val_loss: 1.9257 val_accuracy0.6897%

INFO:root:Epoch: 182 loss: 0.0496 accuracy0.9828 val_loss: 1.6140 val_accuracy0.7328%

INFO:root:Epoch: 183 loss: 0.0327 accuracy0.9892 val_loss: 1.4841 val_accuracy0.7586%

INFO:root:Epoch: 184 loss: 0.0221 accuracy0.9946 val_loss: 1.3803 val_accuracy0.7500%

INFO:root:Epoch: 185 loss: 0.0235 accuracy0.9935 val_loss: 1.3677 val_accuracy0.7328%

INFO:root:Epoch: 186 loss: 0.0185 accuracy0.9952 val_loss: 1.6228 val_accuracy0.7414%

INFO:root:Epoch: 187 loss: 0.0133 accuracy0.9968 val_loss: 1.9448 val_accuracy0.7155%

INFO:root:Epoch: 188 loss: 0.0129 accuracy0.9962 val_loss: 1.6539 val_accuracy0.7328%

INFO:root:Epoch: 189 loss: 0.0097 accuracy0.9973 val_loss: 1.5794 val_accuracy0.7328%

INFO:root:Epoch: 190 loss: 0.0116 accuracy0.9962 val_loss: 1.5746 val_accuracy0.7500%

INFO:root:Epoch: 191 loss: 0.0131 accuracy0.9962 val_loss: 1.6096 val_accuracy0.7328%

INFO:root:Epoch: 192 loss: 0.0090 accuracy0.9984 val_loss: 1.6225 val_accuracy0.7500%

INFO:root:Epoch: 193 loss: 0.0092 accuracy0.9973 val_loss: 1.6625 val_accuracy0.7500%

INFO:root:Epoch: 194 loss: 0.0094 accuracy0.9973 val_loss: 1.4522 val_accuracy0.7500%

INFO:root:Epoch: 195 loss: 0.0074 accuracy0.9978 val_loss: 1.4878 val_accuracy0.7672%

INFO:root:Epoch: 196 loss: 0.0064 accuracy0.9989 val_loss: 1.4442 val_accuracy0.7500%

INFO:root:Epoch: 197 loss: 0.0074 accuracy0.9973 val_loss: 1.5149 val_accuracy0.7500%

INFO:root:Epoch: 198 loss: 0.0072 accuracy0.9984 val_loss: 1.6028 val_accuracy0.7500%

INFO:root:Epoch: 199 loss: 0.0107 accuracy0.9957 val_loss: 1.4993 val_accuracy0.7931%

INFO:root:Epoch: 200 loss: 0.0196 accuracy0.9952 val_loss: 1.6489 val_accuracy0.7672%

INFO:root:mean_time=3
INFO:root:Epoch: 1 loss: 0.7520 accuracy0.5609 val_loss: 1.1713 val_accuracy0.4914%

INFO:root:Epoch: 2 loss: 0.6541 accuracy0.6191 val_loss: 0.7734 val_accuracy0.5345%

INFO:root:Epoch: 3 loss: 0.6420 accuracy0.6422 val_loss: 0.7398 val_accuracy0.5172%

INFO:root:Epoch: 4 loss: 0.6223 accuracy0.6509 val_loss: 0.7305 val_accuracy0.5172%

INFO:root:Epoch: 5 loss: 0.6027 accuracy0.6762 val_loss: 0.7495 val_accuracy0.5086%

INFO:root:Epoch: 6 loss: 0.6001 accuracy0.6724 val_loss: 0.7171 val_accuracy0.4828%

INFO:root:Epoch: 7 loss: 0.5953 accuracy0.6805 val_loss: 0.8124 val_accuracy0.5086%

INFO:root:Epoch: 8 loss: 0.6108 accuracy0.6681 val_loss: 0.7358 val_accuracy0.5000%

INFO:root:Epoch: 9 loss: 0.5912 accuracy0.6805 val_loss: 0.7174 val_accuracy0.5000%

INFO:root:Epoch: 10 loss: 0.5846 accuracy0.6918 val_loss: 0.7264 val_accuracy0.4914%

INFO:root:Epoch: 11 loss: 0.5885 accuracy0.6875 val_loss: 0.8723 val_accuracy0.4914%

INFO:root:Epoch: 12 loss: 0.5729 accuracy0.6945 val_loss: 0.7925 val_accuracy0.5172%

INFO:root:Epoch: 13 loss: 0.5664 accuracy0.7037 val_loss: 0.7989 val_accuracy0.5086%

INFO:root:Epoch: 14 loss: 0.5600 accuracy0.7112 val_loss: 0.8048 val_accuracy0.5086%

INFO:root:Epoch: 15 loss: 0.5624 accuracy0.6961 val_loss: 0.7713 val_accuracy0.5345%

INFO:root:Epoch: 16 loss: 0.5627 accuracy0.7171 val_loss: 0.7050 val_accuracy0.5259%

INFO:root:Epoch: 17 loss: 0.5508 accuracy0.7193 val_loss: 0.7407 val_accuracy0.5431%

INFO:root:Epoch: 18 loss: 0.5249 accuracy0.7381 val_loss: 0.9113 val_accuracy0.5259%

INFO:root:Epoch: 19 loss: 0.5185 accuracy0.7414 val_loss: 0.7909 val_accuracy0.5345%

INFO:root:Epoch: 20 loss: 0.5139 accuracy0.7398 val_loss: 0.9347 val_accuracy0.5172%

INFO:root:Epoch: 21 loss: 0.5086 accuracy0.7452 val_loss: 0.8626 val_accuracy0.5172%

INFO:root:Epoch: 22 loss: 0.4740 accuracy0.7699 val_loss: 0.9761 val_accuracy0.5172%

INFO:root:Epoch: 23 loss: 0.5105 accuracy0.7532 val_loss: 0.8383 val_accuracy0.5259%

INFO:root:Epoch: 24 loss: 0.5181 accuracy0.7457 val_loss: 0.8682 val_accuracy0.5431%

INFO:root:Epoch: 25 loss: 0.4724 accuracy0.7796 val_loss: 1.0365 val_accuracy0.5259%

INFO:root:Epoch: 26 loss: 0.4906 accuracy0.7629 val_loss: 0.8715 val_accuracy0.5172%

INFO:root:Epoch: 27 loss: 0.4806 accuracy0.7780 val_loss: 0.7728 val_accuracy0.5603%

INFO:root:Epoch: 28 loss: 0.4522 accuracy0.7861 val_loss: 1.0269 val_accuracy0.5172%

INFO:root:Epoch: 29 loss: 0.4711 accuracy0.7721 val_loss: 0.9901 val_accuracy0.4914%

INFO:root:Epoch: 30 loss: 0.4572 accuracy0.7829 val_loss: 0.9013 val_accuracy0.5517%

INFO:root:Epoch: 31 loss: 0.4559 accuracy0.7850 val_loss: 0.8215 val_accuracy0.5776%

INFO:root:Epoch: 32 loss: 0.4316 accuracy0.7877 val_loss: 1.0111 val_accuracy0.5086%

INFO:root:Epoch: 33 loss: 0.4245 accuracy0.7936 val_loss: 0.9330 val_accuracy0.5259%

INFO:root:Epoch: 34 loss: 0.4307 accuracy0.7936 val_loss: 0.8481 val_accuracy0.5259%

INFO:root:Epoch: 35 loss: 0.4130 accuracy0.8087 val_loss: 0.7449 val_accuracy0.6034%

INFO:root:Epoch: 36 loss: 0.3934 accuracy0.8227 val_loss: 0.7200 val_accuracy0.6121%

INFO:root:Epoch: 37 loss: 0.4139 accuracy0.8006 val_loss: 0.7251 val_accuracy0.6207%

INFO:root:Epoch: 38 loss: 0.4127 accuracy0.8050 val_loss: 0.6818 val_accuracy0.7069%

INFO:root:Epoch: 39 loss: 0.3892 accuracy0.8227 val_loss: 0.6422 val_accuracy0.7155%

INFO:root:Epoch: 40 loss: 0.3629 accuracy0.8384 val_loss: 0.6420 val_accuracy0.6638%

INFO:root:Epoch: 41 loss: 0.3584 accuracy0.8378 val_loss: 0.6679 val_accuracy0.6724%

INFO:root:Epoch: 42 loss: 0.3588 accuracy0.8362 val_loss: 0.6845 val_accuracy0.6724%

INFO:root:Epoch: 43 loss: 0.3744 accuracy0.8217 val_loss: 0.9070 val_accuracy0.6379%

INFO:root:Epoch: 44 loss: 0.3677 accuracy0.8276 val_loss: 0.6291 val_accuracy0.6638%

INFO:root:Epoch: 45 loss: 0.3402 accuracy0.8497 val_loss: 0.7195 val_accuracy0.6724%

INFO:root:Epoch: 46 loss: 0.3514 accuracy0.8367 val_loss: 0.6402 val_accuracy0.7414%

INFO:root:Epoch: 47 loss: 0.3080 accuracy0.8642 val_loss: 0.7827 val_accuracy0.6121%

INFO:root:Epoch: 48 loss: 0.3214 accuracy0.8567 val_loss: 0.9265 val_accuracy0.6121%

INFO:root:Epoch: 49 loss: 0.3127 accuracy0.8658 val_loss: 0.9539 val_accuracy0.6466%

INFO:root:Epoch: 50 loss: 0.3293 accuracy0.8572 val_loss: 0.8657 val_accuracy0.5776%

INFO:root:Epoch: 51 loss: 0.3478 accuracy0.8540 val_loss: 0.6815 val_accuracy0.6983%

INFO:root:Epoch: 52 loss: 0.2857 accuracy0.8809 val_loss: 0.6156 val_accuracy0.6983%

INFO:root:Epoch: 53 loss: 0.3216 accuracy0.8621 val_loss: 0.6764 val_accuracy0.6897%

INFO:root:Epoch: 54 loss: 0.2783 accuracy0.8847 val_loss: 0.6552 val_accuracy0.6983%

INFO:root:Epoch: 55 loss: 0.2656 accuracy0.8906 val_loss: 0.6625 val_accuracy0.7586%

INFO:root:Epoch: 56 loss: 0.2665 accuracy0.8890 val_loss: 0.8877 val_accuracy0.6466%

INFO:root:Epoch: 57 loss: 0.2630 accuracy0.8879 val_loss: 0.9760 val_accuracy0.6379%

INFO:root:Epoch: 58 loss: 0.2466 accuracy0.8966 val_loss: 0.6937 val_accuracy0.7672%

INFO:root:Epoch: 59 loss: 0.2163 accuracy0.9165 val_loss: 0.7877 val_accuracy0.7500%

INFO:root:Epoch: 60 loss: 0.2301 accuracy0.9073 val_loss: 0.7426 val_accuracy0.7414%

INFO:root:Epoch: 61 loss: 0.2026 accuracy0.9213 val_loss: 0.7402 val_accuracy0.6983%

INFO:root:Epoch: 62 loss: 0.2150 accuracy0.9133 val_loss: 0.8648 val_accuracy0.7759%

INFO:root:Epoch: 63 loss: 0.2592 accuracy0.8869 val_loss: 0.7431 val_accuracy0.7586%

INFO:root:Epoch: 64 loss: 0.2310 accuracy0.9068 val_loss: 0.9056 val_accuracy0.6897%

INFO:root:Epoch: 65 loss: 0.2000 accuracy0.9224 val_loss: 0.8888 val_accuracy0.6293%

INFO:root:Epoch: 66 loss: 0.2039 accuracy0.9176 val_loss: 0.8100 val_accuracy0.7155%

INFO:root:Epoch: 67 loss: 0.2244 accuracy0.9036 val_loss: 0.9387 val_accuracy0.6983%

INFO:root:Epoch: 68 loss: 0.1887 accuracy0.9262 val_loss: 0.8362 val_accuracy0.7414%

INFO:root:Epoch: 69 loss: 0.1901 accuracy0.9224 val_loss: 1.0318 val_accuracy0.6379%

INFO:root:Epoch: 70 loss: 0.1716 accuracy0.9327 val_loss: 0.7718 val_accuracy0.7414%

INFO:root:Epoch: 71 loss: 0.2298 accuracy0.9019 val_loss: 0.8494 val_accuracy0.7241%

INFO:root:Epoch: 72 loss: 0.1746 accuracy0.9289 val_loss: 0.7969 val_accuracy0.6810%

INFO:root:Epoch: 73 loss: 0.1606 accuracy0.9332 val_loss: 0.8729 val_accuracy0.6897%

INFO:root:Epoch: 74 loss: 0.1448 accuracy0.9450 val_loss: 1.1667 val_accuracy0.6810%

INFO:root:Epoch: 75 loss: 0.1570 accuracy0.9391 val_loss: 0.8311 val_accuracy0.7241%

INFO:root:Epoch: 76 loss: 0.1454 accuracy0.9450 val_loss: 0.6912 val_accuracy0.7586%

INFO:root:Epoch: 77 loss: 0.1857 accuracy0.9273 val_loss: 1.4127 val_accuracy0.6552%

INFO:root:Epoch: 78 loss: 0.1912 accuracy0.9273 val_loss: 0.8501 val_accuracy0.7155%

INFO:root:Epoch: 79 loss: 0.1529 accuracy0.9429 val_loss: 0.9190 val_accuracy0.7241%

INFO:root:Epoch: 80 loss: 0.1301 accuracy0.9531 val_loss: 0.7001 val_accuracy0.7759%

INFO:root:Epoch: 81 loss: 0.1523 accuracy0.9380 val_loss: 0.8568 val_accuracy0.7155%

INFO:root:Epoch: 82 loss: 0.1219 accuracy0.9564 val_loss: 0.8963 val_accuracy0.6897%

INFO:root:Epoch: 83 loss: 0.1076 accuracy0.9623 val_loss: 1.0385 val_accuracy0.6810%

INFO:root:Epoch: 84 loss: 0.1102 accuracy0.9639 val_loss: 0.8706 val_accuracy0.7155%

INFO:root:Epoch: 85 loss: 0.1153 accuracy0.9607 val_loss: 1.2210 val_accuracy0.6897%

INFO:root:Epoch: 86 loss: 0.1339 accuracy0.9472 val_loss: 1.2214 val_accuracy0.6724%

INFO:root:Epoch: 87 loss: 0.1300 accuracy0.9488 val_loss: 0.9423 val_accuracy0.7241%

INFO:root:Epoch: 88 loss: 0.1421 accuracy0.9429 val_loss: 1.2281 val_accuracy0.6724%

INFO:root:Epoch: 89 loss: 0.1114 accuracy0.9569 val_loss: 1.0184 val_accuracy0.6897%

INFO:root:Epoch: 90 loss: 0.1040 accuracy0.9644 val_loss: 1.1483 val_accuracy0.6983%

INFO:root:Epoch: 91 loss: 0.0865 accuracy0.9693 val_loss: 1.0732 val_accuracy0.6810%

INFO:root:Epoch: 92 loss: 0.0711 accuracy0.9752 val_loss: 0.8183 val_accuracy0.7500%

INFO:root:Epoch: 93 loss: 0.0976 accuracy0.9617 val_loss: 1.1413 val_accuracy0.6983%

INFO:root:Epoch: 94 loss: 0.1217 accuracy0.9531 val_loss: 0.9235 val_accuracy0.7069%

INFO:root:Epoch: 95 loss: 0.1597 accuracy0.9370 val_loss: 1.5118 val_accuracy0.7069%

INFO:root:Epoch: 96 loss: 0.1624 accuracy0.9370 val_loss: 1.0172 val_accuracy0.7241%

INFO:root:Epoch: 97 loss: 0.1231 accuracy0.9558 val_loss: 0.8607 val_accuracy0.7500%

INFO:root:Epoch: 98 loss: 0.1062 accuracy0.9612 val_loss: 0.9532 val_accuracy0.7672%

INFO:root:Epoch: 99 loss: 0.1080 accuracy0.9617 val_loss: 1.3454 val_accuracy0.6810%

INFO:root:Epoch: 100 loss: 0.1100 accuracy0.9574 val_loss: 0.8768 val_accuracy0.7414%

INFO:root:Epoch: 101 loss: 0.0857 accuracy0.9698 val_loss: 0.9048 val_accuracy0.7155%

INFO:root:Epoch: 102 loss: 0.0917 accuracy0.9671 val_loss: 1.3580 val_accuracy0.6293%

INFO:root:Epoch: 103 loss: 0.0933 accuracy0.9644 val_loss: 0.8965 val_accuracy0.7328%

INFO:root:Epoch: 104 loss: 0.0726 accuracy0.9736 val_loss: 0.8779 val_accuracy0.7069%

INFO:root:Epoch: 105 loss: 0.0796 accuracy0.9725 val_loss: 0.8361 val_accuracy0.7500%

INFO:root:Epoch: 106 loss: 0.0761 accuracy0.9671 val_loss: 1.0671 val_accuracy0.7328%

INFO:root:Epoch: 107 loss: 0.0799 accuracy0.9698 val_loss: 1.0289 val_accuracy0.7069%

INFO:root:Epoch: 108 loss: 0.0692 accuracy0.9790 val_loss: 1.0522 val_accuracy0.7500%

INFO:root:Epoch: 109 loss: 0.0594 accuracy0.9801 val_loss: 0.8266 val_accuracy0.7586%

INFO:root:Epoch: 110 loss: 0.0663 accuracy0.9790 val_loss: 1.2503 val_accuracy0.7241%

INFO:root:Epoch: 111 loss: 0.0583 accuracy0.9795 val_loss: 1.2749 val_accuracy0.7500%

INFO:root:Epoch: 112 loss: 0.0680 accuracy0.9758 val_loss: 0.9221 val_accuracy0.7500%

INFO:root:Epoch: 113 loss: 0.0619 accuracy0.9790 val_loss: 1.0973 val_accuracy0.7069%

INFO:root:Epoch: 114 loss: 0.0538 accuracy0.9828 val_loss: 0.9838 val_accuracy0.7414%

INFO:root:Epoch: 115 loss: 0.0504 accuracy0.9838 val_loss: 1.0675 val_accuracy0.7500%

INFO:root:Epoch: 116 loss: 0.0583 accuracy0.9790 val_loss: 1.0918 val_accuracy0.7414%

INFO:root:Epoch: 117 loss: 0.0499 accuracy0.9849 val_loss: 0.7884 val_accuracy0.7586%

INFO:root:Epoch: 118 loss: 0.0588 accuracy0.9806 val_loss: 0.9979 val_accuracy0.7414%

INFO:root:Epoch: 119 loss: 0.0644 accuracy0.9774 val_loss: 1.0769 val_accuracy0.7155%

INFO:root:Epoch: 120 loss: 0.0680 accuracy0.9774 val_loss: 0.8366 val_accuracy0.7845%

INFO:root:Epoch: 121 loss: 0.0729 accuracy0.9752 val_loss: 1.3750 val_accuracy0.7500%

INFO:root:Epoch: 122 loss: 0.0665 accuracy0.9795 val_loss: 1.2301 val_accuracy0.7328%

INFO:root:Epoch: 123 loss: 0.0651 accuracy0.9784 val_loss: 1.2535 val_accuracy0.7414%

INFO:root:Epoch: 124 loss: 0.0750 accuracy0.9747 val_loss: 1.1460 val_accuracy0.6983%

INFO:root:Epoch: 125 loss: 0.0965 accuracy0.9655 val_loss: 1.8490 val_accuracy0.6466%

INFO:root:Epoch: 126 loss: 0.1181 accuracy0.9499 val_loss: 1.8662 val_accuracy0.6466%

INFO:root:Epoch: 127 loss: 0.0932 accuracy0.9661 val_loss: 1.3125 val_accuracy0.7328%

INFO:root:Epoch: 128 loss: 0.1260 accuracy0.9510 val_loss: 1.1878 val_accuracy0.7586%

INFO:root:Epoch: 129 loss: 0.1115 accuracy0.9526 val_loss: 1.3737 val_accuracy0.6466%

INFO:root:Epoch: 130 loss: 0.0837 accuracy0.9666 val_loss: 0.9190 val_accuracy0.7672%

INFO:root:Epoch: 131 loss: 0.0824 accuracy0.9709 val_loss: 1.1237 val_accuracy0.6897%

INFO:root:Epoch: 132 loss: 0.0783 accuracy0.9758 val_loss: 1.1194 val_accuracy0.6983%

INFO:root:Epoch: 133 loss: 0.0657 accuracy0.9763 val_loss: 0.9686 val_accuracy0.7328%

INFO:root:Epoch: 134 loss: 0.0523 accuracy0.9828 val_loss: 0.8926 val_accuracy0.7672%

INFO:root:Epoch: 135 loss: 0.0423 accuracy0.9881 val_loss: 1.1414 val_accuracy0.7155%

INFO:root:Epoch: 136 loss: 0.0370 accuracy0.9892 val_loss: 0.8901 val_accuracy0.7672%

INFO:root:Epoch: 137 loss: 0.0294 accuracy0.9908 val_loss: 0.9112 val_accuracy0.7586%

INFO:root:Epoch: 138 loss: 0.0310 accuracy0.9876 val_loss: 0.9272 val_accuracy0.7328%

INFO:root:Epoch: 139 loss: 0.0271 accuracy0.9930 val_loss: 1.1268 val_accuracy0.7155%

INFO:root:Epoch: 140 loss: 0.0268 accuracy0.9919 val_loss: 1.0329 val_accuracy0.7069%

INFO:root:Epoch: 141 loss: 0.0311 accuracy0.9903 val_loss: 1.0164 val_accuracy0.6983%

INFO:root:Epoch: 142 loss: 0.0425 accuracy0.9865 val_loss: 1.1604 val_accuracy0.7328%

INFO:root:Epoch: 143 loss: 0.0524 accuracy0.9822 val_loss: 1.1299 val_accuracy0.7500%

INFO:root:Epoch: 144 loss: 0.0380 accuracy0.9865 val_loss: 1.0548 val_accuracy0.7500%

INFO:root:Epoch: 145 loss: 0.0366 accuracy0.9919 val_loss: 1.2631 val_accuracy0.7069%

INFO:root:Epoch: 146 loss: 0.0433 accuracy0.9865 val_loss: 1.1007 val_accuracy0.7328%

INFO:root:Epoch: 147 loss: 0.0642 accuracy0.9763 val_loss: 1.4654 val_accuracy0.7586%

INFO:root:Epoch: 148 loss: 0.0675 accuracy0.9741 val_loss: 1.1170 val_accuracy0.7586%

INFO:root:Epoch: 149 loss: 0.0489 accuracy0.9828 val_loss: 1.8261 val_accuracy0.6638%

INFO:root:Epoch: 150 loss: 0.0387 accuracy0.9892 val_loss: 1.2943 val_accuracy0.7328%

INFO:root:Epoch: 151 loss: 0.0343 accuracy0.9887 val_loss: 0.9982 val_accuracy0.7414%

INFO:root:Epoch: 152 loss: 0.0275 accuracy0.9914 val_loss: 1.0533 val_accuracy0.7759%

INFO:root:Epoch: 153 loss: 0.0260 accuracy0.9919 val_loss: 1.0443 val_accuracy0.7586%

INFO:root:Epoch: 154 loss: 0.0253 accuracy0.9941 val_loss: 1.0873 val_accuracy0.7414%

INFO:root:Epoch: 155 loss: 0.0273 accuracy0.9914 val_loss: 1.1031 val_accuracy0.7414%

INFO:root:Epoch: 156 loss: 0.0202 accuracy0.9946 val_loss: 1.0777 val_accuracy0.7155%

INFO:root:Epoch: 157 loss: 0.0199 accuracy0.9941 val_loss: 1.0254 val_accuracy0.7586%

INFO:root:Epoch: 158 loss: 0.0194 accuracy0.9952 val_loss: 1.0961 val_accuracy0.7155%

INFO:root:Epoch: 159 loss: 0.0297 accuracy0.9881 val_loss: 1.1014 val_accuracy0.7586%

INFO:root:Epoch: 160 loss: 0.0346 accuracy0.9925 val_loss: 1.2407 val_accuracy0.7155%

INFO:root:Epoch: 161 loss: 0.0477 accuracy0.9844 val_loss: 1.4272 val_accuracy0.7241%

INFO:root:Epoch: 162 loss: 0.0455 accuracy0.9849 val_loss: 2.2009 val_accuracy0.6121%

INFO:root:Epoch: 163 loss: 0.0355 accuracy0.9876 val_loss: 1.5847 val_accuracy0.7241%

INFO:root:Epoch: 164 loss: 0.0351 accuracy0.9892 val_loss: 1.1671 val_accuracy0.7414%

INFO:root:Epoch: 165 loss: 0.0325 accuracy0.9898 val_loss: 1.2532 val_accuracy0.7241%

INFO:root:Epoch: 166 loss: 0.0546 accuracy0.9817 val_loss: 1.3164 val_accuracy0.6983%

INFO:root:Epoch: 167 loss: 0.0371 accuracy0.9876 val_loss: 0.9877 val_accuracy0.7414%

INFO:root:Epoch: 168 loss: 0.0373 accuracy0.9881 val_loss: 1.1927 val_accuracy0.7069%

INFO:root:Epoch: 169 loss: 0.0259 accuracy0.9919 val_loss: 1.0108 val_accuracy0.7241%

INFO:root:Epoch: 170 loss: 0.0208 accuracy0.9941 val_loss: 1.0591 val_accuracy0.7241%

INFO:root:Epoch: 171 loss: 0.0221 accuracy0.9946 val_loss: 1.0452 val_accuracy0.7672%

INFO:root:Epoch: 172 loss: 0.0241 accuracy0.9925 val_loss: 1.1687 val_accuracy0.7241%

INFO:root:Epoch: 173 loss: 0.0316 accuracy0.9898 val_loss: 1.3177 val_accuracy0.6983%

INFO:root:Epoch: 174 loss: 0.0420 accuracy0.9844 val_loss: 1.1921 val_accuracy0.7414%

INFO:root:Epoch: 175 loss: 0.0354 accuracy0.9887 val_loss: 1.5354 val_accuracy0.7328%

INFO:root:Epoch: 176 loss: 0.0293 accuracy0.9892 val_loss: 1.2427 val_accuracy0.7931%

INFO:root:Epoch: 177 loss: 0.0383 accuracy0.9849 val_loss: 1.8250 val_accuracy0.7069%

INFO:root:Epoch: 178 loss: 0.0779 accuracy0.9709 val_loss: 1.5642 val_accuracy0.7241%

INFO:root:Epoch: 179 loss: 0.0820 accuracy0.9704 val_loss: 1.9527 val_accuracy0.7069%

INFO:root:Epoch: 180 loss: 0.0569 accuracy0.9822 val_loss: 1.7396 val_accuracy0.7155%

INFO:root:Epoch: 181 loss: 0.0511 accuracy0.9822 val_loss: 1.4561 val_accuracy0.6810%

INFO:root:Epoch: 182 loss: 0.0487 accuracy0.9822 val_loss: 1.4396 val_accuracy0.7155%

INFO:root:Epoch: 183 loss: 0.0477 accuracy0.9838 val_loss: 1.4416 val_accuracy0.7241%

INFO:root:Epoch: 184 loss: 0.0386 accuracy0.9849 val_loss: 1.2527 val_accuracy0.7586%

INFO:root:Epoch: 185 loss: 0.0468 accuracy0.9838 val_loss: 2.1253 val_accuracy0.6207%

INFO:root:Epoch: 186 loss: 0.0358 accuracy0.9881 val_loss: 1.6382 val_accuracy0.7069%

INFO:root:Epoch: 187 loss: 0.0303 accuracy0.9892 val_loss: 1.2708 val_accuracy0.7500%

INFO:root:Epoch: 188 loss: 0.0234 accuracy0.9919 val_loss: 1.2718 val_accuracy0.7155%

INFO:root:Epoch: 189 loss: 0.0214 accuracy0.9946 val_loss: 1.5222 val_accuracy0.6810%

INFO:root:Epoch: 190 loss: 0.0183 accuracy0.9946 val_loss: 1.2229 val_accuracy0.7241%

INFO:root:Epoch: 191 loss: 0.0200 accuracy0.9941 val_loss: 1.3449 val_accuracy0.6897%

INFO:root:Epoch: 192 loss: 0.0175 accuracy0.9941 val_loss: 0.9899 val_accuracy0.7586%

INFO:root:Epoch: 193 loss: 0.0208 accuracy0.9925 val_loss: 1.4336 val_accuracy0.7241%

INFO:root:Epoch: 194 loss: 0.0166 accuracy0.9930 val_loss: 1.3477 val_accuracy0.7414%

INFO:root:Epoch: 195 loss: 0.0286 accuracy0.9914 val_loss: 1.2557 val_accuracy0.7500%

INFO:root:Epoch: 196 loss: 0.0228 accuracy0.9908 val_loss: 1.2681 val_accuracy0.7500%

INFO:root:Epoch: 197 loss: 0.0188 accuracy0.9946 val_loss: 1.2168 val_accuracy0.7586%

INFO:root:Epoch: 198 loss: 0.0183 accuracy0.9941 val_loss: 1.1443 val_accuracy0.7414%

INFO:root:Epoch: 199 loss: 0.0151 accuracy0.9941 val_loss: 1.1545 val_accuracy0.7500%

INFO:root:Epoch: 200 loss: 0.0236 accuracy0.9941 val_loss: 1.4101 val_accuracy0.7414%

INFO:root:mean_time=4
INFO:root:Epoch: 1 loss: 0.7436 accuracy0.5754 val_loss: 0.6984 val_accuracy0.5603%

INFO:root:Epoch: 2 loss: 0.6442 accuracy0.6202 val_loss: 0.7001 val_accuracy0.5000%

INFO:root:Epoch: 3 loss: 0.6417 accuracy0.6347 val_loss: 0.6996 val_accuracy0.5000%

INFO:root:Epoch: 4 loss: 0.6308 accuracy0.6401 val_loss: 0.7396 val_accuracy0.5000%

INFO:root:Epoch: 5 loss: 0.6070 accuracy0.6665 val_loss: 0.7682 val_accuracy0.4828%

INFO:root:Epoch: 6 loss: 0.6218 accuracy0.6439 val_loss: 0.7431 val_accuracy0.4741%

INFO:root:Epoch: 7 loss: 0.6082 accuracy0.6654 val_loss: 0.8261 val_accuracy0.4655%

INFO:root:Epoch: 8 loss: 0.5979 accuracy0.6853 val_loss: 0.7102 val_accuracy0.5345%

INFO:root:Epoch: 9 loss: 0.6058 accuracy0.6686 val_loss: 0.7152 val_accuracy0.5086%

INFO:root:Epoch: 10 loss: 0.5784 accuracy0.6983 val_loss: 0.7520 val_accuracy0.4914%

INFO:root:Epoch: 11 loss: 0.5676 accuracy0.7047 val_loss: 0.7288 val_accuracy0.4483%

INFO:root:Epoch: 12 loss: 0.5670 accuracy0.7010 val_loss: 0.7891 val_accuracy0.4741%

INFO:root:Epoch: 13 loss: 0.5727 accuracy0.7004 val_loss: 0.7803 val_accuracy0.4569%

INFO:root:Epoch: 14 loss: 0.5430 accuracy0.7295 val_loss: 0.8351 val_accuracy0.4569%

INFO:root:Epoch: 15 loss: 0.5552 accuracy0.7047 val_loss: 0.8805 val_accuracy0.5086%

INFO:root:Epoch: 16 loss: 0.5546 accuracy0.7161 val_loss: 0.7874 val_accuracy0.4828%

INFO:root:Epoch: 17 loss: 0.5432 accuracy0.7241 val_loss: 0.8078 val_accuracy0.5172%

INFO:root:Epoch: 18 loss: 0.5341 accuracy0.7214 val_loss: 0.7865 val_accuracy0.5172%

INFO:root:Epoch: 19 loss: 0.5170 accuracy0.7484 val_loss: 0.8475 val_accuracy0.5086%

INFO:root:Epoch: 20 loss: 0.5053 accuracy0.7527 val_loss: 0.8391 val_accuracy0.5086%

INFO:root:Epoch: 21 loss: 0.5233 accuracy0.7489 val_loss: 0.8138 val_accuracy0.5172%

INFO:root:Epoch: 22 loss: 0.5389 accuracy0.7333 val_loss: 0.7331 val_accuracy0.5345%

INFO:root:Epoch: 23 loss: 0.4931 accuracy0.7543 val_loss: 0.8020 val_accuracy0.5259%

INFO:root:Epoch: 24 loss: 0.4851 accuracy0.7721 val_loss: 0.8026 val_accuracy0.5431%

INFO:root:Epoch: 25 loss: 0.4950 accuracy0.7667 val_loss: 0.7612 val_accuracy0.5517%

INFO:root:Epoch: 26 loss: 0.4876 accuracy0.7786 val_loss: 0.7719 val_accuracy0.5603%

INFO:root:Epoch: 27 loss: 0.4915 accuracy0.7678 val_loss: 0.7040 val_accuracy0.6121%

INFO:root:Epoch: 28 loss: 0.4738 accuracy0.7915 val_loss: 0.8806 val_accuracy0.5086%

INFO:root:Epoch: 29 loss: 0.4786 accuracy0.7786 val_loss: 0.6709 val_accuracy0.6207%

INFO:root:Epoch: 30 loss: 0.4653 accuracy0.7850 val_loss: 0.7134 val_accuracy0.5948%

INFO:root:Epoch: 31 loss: 0.4401 accuracy0.7985 val_loss: 0.6937 val_accuracy0.6207%

INFO:root:Epoch: 32 loss: 0.4337 accuracy0.7969 val_loss: 0.6668 val_accuracy0.6638%

INFO:root:Epoch: 33 loss: 0.4455 accuracy0.7974 val_loss: 0.7567 val_accuracy0.5948%

INFO:root:Epoch: 34 loss: 0.4370 accuracy0.8033 val_loss: 0.6213 val_accuracy0.7241%

INFO:root:Epoch: 35 loss: 0.4429 accuracy0.7920 val_loss: 0.6748 val_accuracy0.6207%

INFO:root:Epoch: 36 loss: 0.4341 accuracy0.8071 val_loss: 0.6811 val_accuracy0.6466%

INFO:root:Epoch: 37 loss: 0.4003 accuracy0.8103 val_loss: 0.6535 val_accuracy0.6466%

INFO:root:Epoch: 38 loss: 0.3849 accuracy0.8319 val_loss: 0.6067 val_accuracy0.7241%

INFO:root:Epoch: 39 loss: 0.3913 accuracy0.8249 val_loss: 0.6062 val_accuracy0.7155%

INFO:root:Epoch: 40 loss: 0.3725 accuracy0.8432 val_loss: 0.6179 val_accuracy0.6897%

INFO:root:Epoch: 41 loss: 0.3919 accuracy0.8238 val_loss: 0.6209 val_accuracy0.7155%

INFO:root:Epoch: 42 loss: 0.3521 accuracy0.8475 val_loss: 0.6015 val_accuracy0.7155%

INFO:root:Epoch: 43 loss: 0.3606 accuracy0.8486 val_loss: 0.6459 val_accuracy0.7241%

INFO:root:Epoch: 44 loss: 0.3671 accuracy0.8405 val_loss: 0.6935 val_accuracy0.7069%

INFO:root:Epoch: 45 loss: 0.4240 accuracy0.7990 val_loss: 0.8399 val_accuracy0.6466%

INFO:root:Epoch: 46 loss: 0.3820 accuracy0.8346 val_loss: 0.5885 val_accuracy0.6983%

INFO:root:Epoch: 47 loss: 0.3383 accuracy0.8599 val_loss: 0.6138 val_accuracy0.6983%

INFO:root:Epoch: 48 loss: 0.3268 accuracy0.8653 val_loss: 0.6038 val_accuracy0.6897%

INFO:root:Epoch: 49 loss: 0.3240 accuracy0.8508 val_loss: 0.6593 val_accuracy0.6724%

INFO:root:Epoch: 50 loss: 0.3046 accuracy0.8691 val_loss: 0.6332 val_accuracy0.6897%

INFO:root:Epoch: 51 loss: 0.2885 accuracy0.8804 val_loss: 0.6865 val_accuracy0.6810%

INFO:root:Epoch: 52 loss: 0.2945 accuracy0.8728 val_loss: 1.0216 val_accuracy0.6552%

INFO:root:Epoch: 53 loss: 0.3160 accuracy0.8561 val_loss: 0.7431 val_accuracy0.7328%

INFO:root:Epoch: 54 loss: 0.2800 accuracy0.8772 val_loss: 0.7446 val_accuracy0.7155%

INFO:root:Epoch: 55 loss: 0.2446 accuracy0.9019 val_loss: 0.8899 val_accuracy0.6638%

INFO:root:Epoch: 56 loss: 0.2295 accuracy0.9095 val_loss: 0.8320 val_accuracy0.6810%

INFO:root:Epoch: 57 loss: 0.2748 accuracy0.8825 val_loss: 0.7588 val_accuracy0.7414%

INFO:root:Epoch: 58 loss: 0.2667 accuracy0.8933 val_loss: 0.7048 val_accuracy0.6638%

INFO:root:Epoch: 59 loss: 0.2369 accuracy0.9030 val_loss: 0.7655 val_accuracy0.6379%

INFO:root:Epoch: 60 loss: 0.2698 accuracy0.8912 val_loss: 0.8265 val_accuracy0.6638%

INFO:root:Epoch: 61 loss: 0.2524 accuracy0.8992 val_loss: 0.8180 val_accuracy0.6552%

INFO:root:Epoch: 62 loss: 0.2515 accuracy0.8966 val_loss: 0.7142 val_accuracy0.7586%

INFO:root:Epoch: 63 loss: 0.2345 accuracy0.9041 val_loss: 0.8409 val_accuracy0.7069%

INFO:root:Epoch: 64 loss: 0.2058 accuracy0.9159 val_loss: 0.6352 val_accuracy0.7069%

INFO:root:Epoch: 65 loss: 0.1981 accuracy0.9240 val_loss: 0.8221 val_accuracy0.6638%

INFO:root:Epoch: 66 loss: 0.2235 accuracy0.9062 val_loss: 0.9792 val_accuracy0.6897%

INFO:root:Epoch: 67 loss: 0.2381 accuracy0.9019 val_loss: 0.7309 val_accuracy0.7155%

INFO:root:Epoch: 68 loss: 0.2014 accuracy0.9213 val_loss: 0.7991 val_accuracy0.7069%

INFO:root:Epoch: 69 loss: 0.1762 accuracy0.9337 val_loss: 0.7242 val_accuracy0.7155%

INFO:root:Epoch: 70 loss: 0.1506 accuracy0.9402 val_loss: 0.8322 val_accuracy0.6466%

INFO:root:Epoch: 71 loss: 0.1632 accuracy0.9380 val_loss: 0.7124 val_accuracy0.7328%

INFO:root:Epoch: 72 loss: 0.1601 accuracy0.9359 val_loss: 0.7572 val_accuracy0.7155%

INFO:root:Epoch: 73 loss: 0.1671 accuracy0.9305 val_loss: 0.8619 val_accuracy0.7155%

INFO:root:Epoch: 74 loss: 0.1580 accuracy0.9397 val_loss: 0.7844 val_accuracy0.6983%

INFO:root:Epoch: 75 loss: 0.1468 accuracy0.9467 val_loss: 0.8102 val_accuracy0.6897%

INFO:root:Epoch: 76 loss: 0.1512 accuracy0.9418 val_loss: 0.9071 val_accuracy0.7069%

INFO:root:Epoch: 77 loss: 0.1468 accuracy0.9461 val_loss: 0.8851 val_accuracy0.6724%

INFO:root:Epoch: 78 loss: 0.1666 accuracy0.9321 val_loss: 0.9477 val_accuracy0.6379%

INFO:root:Epoch: 79 loss: 0.2057 accuracy0.9181 val_loss: 0.9753 val_accuracy0.6810%

INFO:root:Epoch: 80 loss: 0.1666 accuracy0.9348 val_loss: 0.9141 val_accuracy0.7069%

INFO:root:Epoch: 81 loss: 0.1555 accuracy0.9407 val_loss: 1.0416 val_accuracy0.6466%

INFO:root:Epoch: 82 loss: 0.1277 accuracy0.9553 val_loss: 0.9272 val_accuracy0.7069%

INFO:root:Epoch: 83 loss: 0.1071 accuracy0.9585 val_loss: 0.8845 val_accuracy0.7328%

INFO:root:Epoch: 84 loss: 0.1155 accuracy0.9574 val_loss: 0.7454 val_accuracy0.7328%

INFO:root:Epoch: 85 loss: 0.1112 accuracy0.9596 val_loss: 0.9872 val_accuracy0.6983%

INFO:root:Epoch: 86 loss: 0.1066 accuracy0.9596 val_loss: 1.2270 val_accuracy0.6293%

INFO:root:Epoch: 87 loss: 0.1044 accuracy0.9574 val_loss: 0.7912 val_accuracy0.7155%

INFO:root:Epoch: 88 loss: 0.1118 accuracy0.9601 val_loss: 0.9727 val_accuracy0.7328%

INFO:root:Epoch: 89 loss: 0.0989 accuracy0.9639 val_loss: 1.0135 val_accuracy0.6810%

INFO:root:Epoch: 90 loss: 0.0857 accuracy0.9725 val_loss: 0.9824 val_accuracy0.6983%

INFO:root:Epoch: 91 loss: 0.0845 accuracy0.9709 val_loss: 1.3204 val_accuracy0.6983%

INFO:root:Epoch: 92 loss: 0.0843 accuracy0.9704 val_loss: 1.2977 val_accuracy0.7241%

INFO:root:Epoch: 93 loss: 0.0815 accuracy0.9714 val_loss: 1.3391 val_accuracy0.6897%

INFO:root:Epoch: 94 loss: 0.1029 accuracy0.9628 val_loss: 1.1275 val_accuracy0.6983%

INFO:root:Epoch: 95 loss: 0.1225 accuracy0.9526 val_loss: 1.3298 val_accuracy0.6638%

INFO:root:Epoch: 96 loss: 0.1345 accuracy0.9494 val_loss: 1.3191 val_accuracy0.6983%

INFO:root:Epoch: 97 loss: 0.1272 accuracy0.9510 val_loss: 1.1209 val_accuracy0.6810%

INFO:root:Epoch: 98 loss: 0.1200 accuracy0.9553 val_loss: 1.2146 val_accuracy0.6293%

INFO:root:Epoch: 99 loss: 0.1049 accuracy0.9607 val_loss: 0.9609 val_accuracy0.7241%

INFO:root:Epoch: 100 loss: 0.1092 accuracy0.9591 val_loss: 1.6278 val_accuracy0.6379%

INFO:root:Epoch: 101 loss: 0.1179 accuracy0.9547 val_loss: 1.6932 val_accuracy0.6552%

INFO:root:Epoch: 102 loss: 0.0946 accuracy0.9682 val_loss: 1.0117 val_accuracy0.7414%

INFO:root:Epoch: 103 loss: 0.0873 accuracy0.9725 val_loss: 1.1606 val_accuracy0.7155%

INFO:root:Epoch: 104 loss: 0.1122 accuracy0.9569 val_loss: 1.5711 val_accuracy0.7241%

INFO:root:Epoch: 105 loss: 0.1103 accuracy0.9580 val_loss: 1.5219 val_accuracy0.6810%

INFO:root:Epoch: 106 loss: 0.1299 accuracy0.9450 val_loss: 0.9555 val_accuracy0.7241%

INFO:root:Epoch: 107 loss: 0.1142 accuracy0.9612 val_loss: 1.2257 val_accuracy0.7328%

INFO:root:Epoch: 108 loss: 0.0908 accuracy0.9623 val_loss: 1.3120 val_accuracy0.6724%

INFO:root:Epoch: 109 loss: 0.0752 accuracy0.9763 val_loss: 1.3024 val_accuracy0.7069%

INFO:root:Epoch: 110 loss: 0.0759 accuracy0.9731 val_loss: 1.0236 val_accuracy0.7241%

INFO:root:Epoch: 111 loss: 0.0604 accuracy0.9811 val_loss: 0.9569 val_accuracy0.7328%

INFO:root:Epoch: 112 loss: 0.0561 accuracy0.9795 val_loss: 1.1441 val_accuracy0.6897%

INFO:root:Epoch: 113 loss: 0.0641 accuracy0.9784 val_loss: 1.0252 val_accuracy0.7241%

INFO:root:Epoch: 114 loss: 0.0487 accuracy0.9855 val_loss: 1.2829 val_accuracy0.6897%

INFO:root:Epoch: 115 loss: 0.0517 accuracy0.9828 val_loss: 1.0380 val_accuracy0.7069%

INFO:root:Epoch: 116 loss: 0.0479 accuracy0.9844 val_loss: 1.3601 val_accuracy0.6638%

INFO:root:Epoch: 117 loss: 0.0469 accuracy0.9865 val_loss: 1.1832 val_accuracy0.6638%

INFO:root:Epoch: 118 loss: 0.0442 accuracy0.9828 val_loss: 1.5666 val_accuracy0.6552%

INFO:root:Epoch: 119 loss: 0.0523 accuracy0.9849 val_loss: 1.1545 val_accuracy0.6897%

INFO:root:Epoch: 120 loss: 0.0558 accuracy0.9779 val_loss: 1.3358 val_accuracy0.6810%

INFO:root:Epoch: 121 loss: 0.0554 accuracy0.9822 val_loss: 1.3135 val_accuracy0.6724%

INFO:root:Epoch: 122 loss: 0.0471 accuracy0.9844 val_loss: 1.2966 val_accuracy0.7069%

INFO:root:Epoch: 123 loss: 0.0550 accuracy0.9806 val_loss: 2.0704 val_accuracy0.6552%

INFO:root:Epoch: 124 loss: 0.0459 accuracy0.9844 val_loss: 1.3367 val_accuracy0.7069%

INFO:root:Epoch: 125 loss: 0.0438 accuracy0.9849 val_loss: 1.4200 val_accuracy0.6724%

INFO:root:Epoch: 126 loss: 0.0558 accuracy0.9828 val_loss: 1.6320 val_accuracy0.6724%

INFO:root:Epoch: 127 loss: 0.0587 accuracy0.9811 val_loss: 1.9684 val_accuracy0.6810%

INFO:root:Epoch: 128 loss: 0.0637 accuracy0.9741 val_loss: 1.7910 val_accuracy0.6724%

INFO:root:Epoch: 129 loss: 0.0578 accuracy0.9774 val_loss: 1.4021 val_accuracy0.6724%

INFO:root:Epoch: 130 loss: 0.0792 accuracy0.9714 val_loss: 1.3264 val_accuracy0.6724%

INFO:root:Epoch: 131 loss: 0.0572 accuracy0.9801 val_loss: 1.1698 val_accuracy0.7241%

INFO:root:Epoch: 132 loss: 0.0515 accuracy0.9817 val_loss: 1.3028 val_accuracy0.6983%

INFO:root:Epoch: 133 loss: 0.0419 accuracy0.9881 val_loss: 1.2219 val_accuracy0.7241%

INFO:root:Epoch: 134 loss: 0.0459 accuracy0.9849 val_loss: 1.3028 val_accuracy0.6810%

INFO:root:Epoch: 135 loss: 0.0445 accuracy0.9865 val_loss: 1.2200 val_accuracy0.6983%

INFO:root:Epoch: 136 loss: 0.0390 accuracy0.9871 val_loss: 1.4578 val_accuracy0.6466%

INFO:root:Epoch: 137 loss: 0.0459 accuracy0.9806 val_loss: 1.5319 val_accuracy0.6983%

INFO:root:Epoch: 138 loss: 0.0646 accuracy0.9758 val_loss: 1.7013 val_accuracy0.6379%

INFO:root:Epoch: 139 loss: 0.0672 accuracy0.9741 val_loss: 1.5933 val_accuracy0.6552%

INFO:root:Epoch: 140 loss: 0.0605 accuracy0.9784 val_loss: 1.4375 val_accuracy0.6724%

INFO:root:Epoch: 141 loss: 0.0454 accuracy0.9838 val_loss: 1.4435 val_accuracy0.6638%

INFO:root:Epoch: 142 loss: 0.0489 accuracy0.9833 val_loss: 1.4670 val_accuracy0.6810%

INFO:root:Epoch: 143 loss: 0.0657 accuracy0.9790 val_loss: 1.7665 val_accuracy0.6293%

INFO:root:Epoch: 144 loss: 0.1035 accuracy0.9655 val_loss: 1.2552 val_accuracy0.6466%

INFO:root:Epoch: 145 loss: 0.0825 accuracy0.9677 val_loss: 2.0161 val_accuracy0.6897%

INFO:root:Epoch: 146 loss: 0.0580 accuracy0.9801 val_loss: 1.5239 val_accuracy0.6552%

INFO:root:Epoch: 147 loss: 0.0468 accuracy0.9849 val_loss: 1.6412 val_accuracy0.6379%

INFO:root:Epoch: 148 loss: 0.0470 accuracy0.9855 val_loss: 1.6004 val_accuracy0.6897%

INFO:root:Epoch: 149 loss: 0.0525 accuracy0.9828 val_loss: 2.0283 val_accuracy0.6724%

INFO:root:Epoch: 150 loss: 0.0462 accuracy0.9844 val_loss: 2.6702 val_accuracy0.6207%

INFO:root:Epoch: 151 loss: 0.0481 accuracy0.9828 val_loss: 1.3813 val_accuracy0.7069%

INFO:root:Epoch: 152 loss: 0.0350 accuracy0.9881 val_loss: 1.5833 val_accuracy0.6897%

INFO:root:Epoch: 153 loss: 0.0409 accuracy0.9871 val_loss: 1.5371 val_accuracy0.6638%

INFO:root:Epoch: 154 loss: 0.0372 accuracy0.9881 val_loss: 1.9474 val_accuracy0.6121%

INFO:root:Epoch: 155 loss: 0.0373 accuracy0.9871 val_loss: 1.6595 val_accuracy0.6810%

INFO:root:Epoch: 156 loss: 0.0588 accuracy0.9790 val_loss: 2.3544 val_accuracy0.6207%

INFO:root:Epoch: 157 loss: 0.0503 accuracy0.9806 val_loss: 1.8258 val_accuracy0.6897%

INFO:root:Epoch: 158 loss: 0.0417 accuracy0.9828 val_loss: 1.2147 val_accuracy0.6983%

INFO:root:Epoch: 159 loss: 0.0450 accuracy0.9838 val_loss: 1.3577 val_accuracy0.6897%

INFO:root:Epoch: 160 loss: 0.0408 accuracy0.9838 val_loss: 1.2246 val_accuracy0.6724%

INFO:root:Epoch: 161 loss: 0.0542 accuracy0.9801 val_loss: 1.9250 val_accuracy0.6897%

INFO:root:Epoch: 162 loss: 0.0450 accuracy0.9860 val_loss: 1.6730 val_accuracy0.6638%

INFO:root:Epoch: 163 loss: 0.0376 accuracy0.9865 val_loss: 1.6619 val_accuracy0.6983%

INFO:root:Epoch: 164 loss: 0.0278 accuracy0.9914 val_loss: 1.4271 val_accuracy0.7069%

INFO:root:Epoch: 165 loss: 0.0327 accuracy0.9908 val_loss: 1.2335 val_accuracy0.7500%

INFO:root:Epoch: 166 loss: 0.0437 accuracy0.9849 val_loss: 1.2950 val_accuracy0.7155%

INFO:root:Epoch: 167 loss: 0.0689 accuracy0.9763 val_loss: 1.5874 val_accuracy0.6466%

INFO:root:Epoch: 168 loss: 0.0979 accuracy0.9644 val_loss: 2.8459 val_accuracy0.6983%

INFO:root:Epoch: 169 loss: 0.1157 accuracy0.9553 val_loss: 1.9526 val_accuracy0.6466%

INFO:root:Epoch: 170 loss: 0.1317 accuracy0.9553 val_loss: 1.8299 val_accuracy0.6379%

INFO:root:Epoch: 171 loss: 0.0990 accuracy0.9617 val_loss: 1.4106 val_accuracy0.7069%

INFO:root:Epoch: 172 loss: 0.0614 accuracy0.9801 val_loss: 2.6834 val_accuracy0.6466%

INFO:root:Epoch: 173 loss: 0.0567 accuracy0.9801 val_loss: 1.6665 val_accuracy0.6897%

INFO:root:Epoch: 174 loss: 0.0547 accuracy0.9817 val_loss: 1.5735 val_accuracy0.7155%

INFO:root:Epoch: 175 loss: 0.0550 accuracy0.9801 val_loss: 2.0526 val_accuracy0.6724%

INFO:root:Epoch: 176 loss: 0.0439 accuracy0.9855 val_loss: 1.7492 val_accuracy0.6897%

INFO:root:Epoch: 177 loss: 0.0359 accuracy0.9871 val_loss: 1.6296 val_accuracy0.7241%

INFO:root:Epoch: 178 loss: 0.0316 accuracy0.9871 val_loss: 1.5770 val_accuracy0.7069%

INFO:root:Epoch: 179 loss: 0.0284 accuracy0.9903 val_loss: 1.3865 val_accuracy0.7155%

INFO:root:Epoch: 180 loss: 0.0272 accuracy0.9898 val_loss: 1.3640 val_accuracy0.7155%

INFO:root:Epoch: 181 loss: 0.0270 accuracy0.9925 val_loss: 1.5228 val_accuracy0.6810%

INFO:root:Epoch: 182 loss: 0.0339 accuracy0.9898 val_loss: 1.4343 val_accuracy0.7069%

INFO:root:Epoch: 183 loss: 0.0282 accuracy0.9908 val_loss: 1.6154 val_accuracy0.6638%

INFO:root:Epoch: 184 loss: 0.0249 accuracy0.9908 val_loss: 1.4581 val_accuracy0.7155%

INFO:root:Epoch: 185 loss: 0.0260 accuracy0.9919 val_loss: 1.7585 val_accuracy0.6897%

INFO:root:Epoch: 186 loss: 0.0218 accuracy0.9925 val_loss: 1.4708 val_accuracy0.7414%

INFO:root:Epoch: 187 loss: 0.0250 accuracy0.9919 val_loss: 1.7989 val_accuracy0.7155%

INFO:root:Epoch: 188 loss: 0.0243 accuracy0.9925 val_loss: 1.4279 val_accuracy0.7069%

INFO:root:Epoch: 189 loss: 0.0201 accuracy0.9935 val_loss: 1.2734 val_accuracy0.7414%

INFO:root:Epoch: 190 loss: 0.0215 accuracy0.9930 val_loss: 1.4990 val_accuracy0.7069%

INFO:root:Epoch: 191 loss: 0.0279 accuracy0.9892 val_loss: 1.8448 val_accuracy0.6552%

INFO:root:Epoch: 192 loss: 0.0360 accuracy0.9865 val_loss: 1.7199 val_accuracy0.7500%

INFO:root:Epoch: 193 loss: 0.0344 accuracy0.9908 val_loss: 1.6722 val_accuracy0.6466%

INFO:root:Epoch: 194 loss: 0.0293 accuracy0.9892 val_loss: 1.8644 val_accuracy0.6983%

INFO:root:Epoch: 195 loss: 0.0237 accuracy0.9925 val_loss: 1.6173 val_accuracy0.6810%

INFO:root:Epoch: 196 loss: 0.0251 accuracy0.9908 val_loss: 1.5789 val_accuracy0.7241%

INFO:root:Epoch: 197 loss: 0.0241 accuracy0.9887 val_loss: 1.7494 val_accuracy0.6810%

INFO:root:Epoch: 198 loss: 0.0243 accuracy0.9925 val_loss: 1.7646 val_accuracy0.6897%

INFO:root:Epoch: 199 loss: 0.0281 accuracy0.9903 val_loss: 1.4718 val_accuracy0.7155%

INFO:root:Epoch: 200 loss: 0.0289 accuracy0.9898 val_loss: 1.8254 val_accuracy0.6466%

INFO:root:mean_time=5
INFO:root:Epoch: 1 loss: 0.7792 accuracy0.5539 val_loss: 1.3350 val_accuracy0.5000%

INFO:root:Epoch: 2 loss: 0.6577 accuracy0.6078 val_loss: 0.9795 val_accuracy0.4914%

INFO:root:Epoch: 3 loss: 0.6475 accuracy0.6061 val_loss: 0.7652 val_accuracy0.4569%

INFO:root:Epoch: 4 loss: 0.6311 accuracy0.6325 val_loss: 0.7160 val_accuracy0.4655%

INFO:root:Epoch: 5 loss: 0.6170 accuracy0.6482 val_loss: 0.7143 val_accuracy0.4741%

INFO:root:Epoch: 6 loss: 0.6178 accuracy0.6471 val_loss: 0.7370 val_accuracy0.4655%

INFO:root:Epoch: 7 loss: 0.5914 accuracy0.6821 val_loss: 0.7659 val_accuracy0.4138%

INFO:root:Epoch: 8 loss: 0.5802 accuracy0.7020 val_loss: 0.7184 val_accuracy0.4741%

INFO:root:Epoch: 9 loss: 0.5841 accuracy0.6961 val_loss: 0.7291 val_accuracy0.4655%

INFO:root:Epoch: 10 loss: 0.5932 accuracy0.6767 val_loss: 0.8059 val_accuracy0.4741%

INFO:root:Epoch: 11 loss: 0.5858 accuracy0.6918 val_loss: 0.7575 val_accuracy0.4483%

INFO:root:Epoch: 12 loss: 0.5625 accuracy0.7182 val_loss: 0.7557 val_accuracy0.4397%

INFO:root:Epoch: 13 loss: 0.5504 accuracy0.7144 val_loss: 0.7791 val_accuracy0.4569%

INFO:root:Epoch: 14 loss: 0.5700 accuracy0.7010 val_loss: 0.7647 val_accuracy0.4483%

INFO:root:Epoch: 15 loss: 0.5461 accuracy0.7252 val_loss: 0.8416 val_accuracy0.4655%

INFO:root:Epoch: 16 loss: 0.5413 accuracy0.7258 val_loss: 0.7427 val_accuracy0.5086%

INFO:root:Epoch: 17 loss: 0.5338 accuracy0.7328 val_loss: 0.7507 val_accuracy0.5431%

INFO:root:Epoch: 18 loss: 0.5276 accuracy0.7435 val_loss: 0.7410 val_accuracy0.5431%

INFO:root:Epoch: 19 loss: 0.4983 accuracy0.7527 val_loss: 0.8176 val_accuracy0.4828%

INFO:root:Epoch: 20 loss: 0.5034 accuracy0.7495 val_loss: 0.8717 val_accuracy0.4483%

INFO:root:Epoch: 21 loss: 0.5224 accuracy0.7365 val_loss: 0.8424 val_accuracy0.4397%

INFO:root:Epoch: 22 loss: 0.4890 accuracy0.7597 val_loss: 0.9133 val_accuracy0.4569%

INFO:root:Epoch: 23 loss: 0.4654 accuracy0.7834 val_loss: 0.8061 val_accuracy0.5259%

INFO:root:Epoch: 24 loss: 0.4611 accuracy0.7861 val_loss: 0.7420 val_accuracy0.5690%

INFO:root:Epoch: 25 loss: 0.4645 accuracy0.7716 val_loss: 0.6599 val_accuracy0.6466%

INFO:root:Epoch: 26 loss: 0.4329 accuracy0.8023 val_loss: 0.7767 val_accuracy0.5517%

INFO:root:Epoch: 27 loss: 0.4183 accuracy0.8093 val_loss: 0.9607 val_accuracy0.4828%

INFO:root:Epoch: 28 loss: 0.4483 accuracy0.7812 val_loss: 0.6935 val_accuracy0.6034%

INFO:root:Epoch: 29 loss: 0.4287 accuracy0.8055 val_loss: 0.6873 val_accuracy0.6552%

INFO:root:Epoch: 30 loss: 0.4022 accuracy0.8136 val_loss: 0.6498 val_accuracy0.6638%

INFO:root:Epoch: 31 loss: 0.3700 accuracy0.8303 val_loss: 0.6961 val_accuracy0.6724%

INFO:root:Epoch: 32 loss: 0.4077 accuracy0.8217 val_loss: 0.8391 val_accuracy0.5603%

INFO:root:Epoch: 33 loss: 0.4139 accuracy0.8012 val_loss: 0.7756 val_accuracy0.5345%

INFO:root:Epoch: 34 loss: 0.3865 accuracy0.8238 val_loss: 0.6185 val_accuracy0.7069%

INFO:root:Epoch: 35 loss: 0.3667 accuracy0.8378 val_loss: 0.6551 val_accuracy0.6379%

INFO:root:Epoch: 36 loss: 0.3380 accuracy0.8534 val_loss: 0.7251 val_accuracy0.6121%

INFO:root:Epoch: 37 loss: 0.3831 accuracy0.8287 val_loss: 0.6547 val_accuracy0.6810%

INFO:root:Epoch: 38 loss: 0.3565 accuracy0.8400 val_loss: 0.8866 val_accuracy0.5603%

INFO:root:Epoch: 39 loss: 0.3236 accuracy0.8572 val_loss: 0.6781 val_accuracy0.6552%

INFO:root:Epoch: 40 loss: 0.2982 accuracy0.8788 val_loss: 0.5653 val_accuracy0.6897%

INFO:root:Epoch: 41 loss: 0.2954 accuracy0.8831 val_loss: 0.7369 val_accuracy0.6034%

INFO:root:Epoch: 42 loss: 0.2762 accuracy0.8825 val_loss: 0.8223 val_accuracy0.6897%

INFO:root:Epoch: 43 loss: 0.2946 accuracy0.8712 val_loss: 0.6555 val_accuracy0.7155%

INFO:root:Epoch: 44 loss: 0.2664 accuracy0.8874 val_loss: 0.6697 val_accuracy0.7155%

INFO:root:Epoch: 45 loss: 0.2384 accuracy0.9057 val_loss: 0.7651 val_accuracy0.7241%

INFO:root:Epoch: 46 loss: 0.2244 accuracy0.9116 val_loss: 0.9618 val_accuracy0.6724%

INFO:root:Epoch: 47 loss: 0.2658 accuracy0.8955 val_loss: 0.7162 val_accuracy0.7069%

INFO:root:Epoch: 48 loss: 0.2255 accuracy0.9062 val_loss: 0.6328 val_accuracy0.7241%

INFO:root:Epoch: 49 loss: 0.2263 accuracy0.9133 val_loss: 0.6951 val_accuracy0.7931%

INFO:root:Epoch: 50 loss: 0.1991 accuracy0.9213 val_loss: 0.6407 val_accuracy0.7241%

INFO:root:Epoch: 51 loss: 0.1849 accuracy0.9310 val_loss: 0.6528 val_accuracy0.7586%

INFO:root:Epoch: 52 loss: 0.1778 accuracy0.9337 val_loss: 1.0780 val_accuracy0.6638%

INFO:root:Epoch: 53 loss: 0.2097 accuracy0.9149 val_loss: 0.8244 val_accuracy0.7069%

INFO:root:Epoch: 54 loss: 0.2244 accuracy0.9057 val_loss: 1.2073 val_accuracy0.7328%

INFO:root:Epoch: 55 loss: 0.1815 accuracy0.9332 val_loss: 0.6192 val_accuracy0.8017%

INFO:root:Epoch: 56 loss: 0.1709 accuracy0.9332 val_loss: 0.6294 val_accuracy0.7241%

INFO:root:Epoch: 57 loss: 0.1677 accuracy0.9397 val_loss: 0.5668 val_accuracy0.7845%

INFO:root:Epoch: 58 loss: 0.1799 accuracy0.9300 val_loss: 0.7401 val_accuracy0.7845%

INFO:root:Epoch: 59 loss: 0.1617 accuracy0.9370 val_loss: 0.9739 val_accuracy0.7414%

INFO:root:Epoch: 60 loss: 0.1600 accuracy0.9397 val_loss: 0.6840 val_accuracy0.7845%

INFO:root:Epoch: 61 loss: 0.1397 accuracy0.9520 val_loss: 0.5869 val_accuracy0.7672%

INFO:root:Epoch: 62 loss: 0.1179 accuracy0.9591 val_loss: 0.7451 val_accuracy0.7500%

INFO:root:Epoch: 63 loss: 0.1136 accuracy0.9601 val_loss: 0.6364 val_accuracy0.7672%

INFO:root:Epoch: 64 loss: 0.1061 accuracy0.9591 val_loss: 0.7359 val_accuracy0.7845%

INFO:root:Epoch: 65 loss: 0.1285 accuracy0.9537 val_loss: 0.7392 val_accuracy0.7931%

INFO:root:Epoch: 66 loss: 0.1121 accuracy0.9591 val_loss: 0.6765 val_accuracy0.7672%

INFO:root:Epoch: 67 loss: 0.0913 accuracy0.9693 val_loss: 0.9315 val_accuracy0.7414%

INFO:root:Epoch: 68 loss: 0.1090 accuracy0.9580 val_loss: 0.7522 val_accuracy0.7500%

INFO:root:Epoch: 69 loss: 0.1195 accuracy0.9553 val_loss: 0.9556 val_accuracy0.7500%

INFO:root:Epoch: 70 loss: 0.1096 accuracy0.9655 val_loss: 0.9163 val_accuracy0.7672%

INFO:root:Epoch: 71 loss: 0.1199 accuracy0.9569 val_loss: 0.9521 val_accuracy0.7241%

INFO:root:Epoch: 72 loss: 0.1241 accuracy0.9585 val_loss: 0.8133 val_accuracy0.8276%

INFO:root:Epoch: 73 loss: 0.1202 accuracy0.9569 val_loss: 0.8326 val_accuracy0.7931%

INFO:root:Epoch: 74 loss: 0.1065 accuracy0.9644 val_loss: 0.7783 val_accuracy0.7672%

INFO:root:Epoch: 75 loss: 0.0912 accuracy0.9661 val_loss: 1.0219 val_accuracy0.7672%

INFO:root:Epoch: 76 loss: 0.1031 accuracy0.9682 val_loss: 1.3071 val_accuracy0.7069%

INFO:root:Epoch: 77 loss: 0.1173 accuracy0.9558 val_loss: 0.9338 val_accuracy0.7586%

INFO:root:Epoch: 78 loss: 0.0923 accuracy0.9688 val_loss: 0.6894 val_accuracy0.7931%

INFO:root:Epoch: 79 loss: 0.0694 accuracy0.9768 val_loss: 0.7773 val_accuracy0.7931%

INFO:root:Epoch: 80 loss: 0.0655 accuracy0.9779 val_loss: 0.7919 val_accuracy0.8103%

INFO:root:Epoch: 81 loss: 0.1012 accuracy0.9655 val_loss: 0.8488 val_accuracy0.7414%

INFO:root:Epoch: 82 loss: 0.0632 accuracy0.9822 val_loss: 0.6388 val_accuracy0.7672%

INFO:root:Epoch: 83 loss: 0.0552 accuracy0.9860 val_loss: 0.7423 val_accuracy0.7672%

INFO:root:Epoch: 84 loss: 0.0651 accuracy0.9828 val_loss: 0.6563 val_accuracy0.8276%

INFO:root:Epoch: 85 loss: 0.0579 accuracy0.9838 val_loss: 0.7158 val_accuracy0.7759%

INFO:root:Epoch: 86 loss: 0.0626 accuracy0.9811 val_loss: 1.1471 val_accuracy0.7328%

INFO:root:Epoch: 87 loss: 0.0585 accuracy0.9811 val_loss: 0.8647 val_accuracy0.7672%

INFO:root:Epoch: 88 loss: 0.0778 accuracy0.9725 val_loss: 1.0237 val_accuracy0.7586%

INFO:root:Epoch: 89 loss: 0.0735 accuracy0.9784 val_loss: 1.1717 val_accuracy0.7672%

INFO:root:Epoch: 90 loss: 0.0770 accuracy0.9752 val_loss: 0.7348 val_accuracy0.7845%

INFO:root:Epoch: 91 loss: 0.0763 accuracy0.9736 val_loss: 1.0030 val_accuracy0.7759%

INFO:root:Epoch: 92 loss: 0.0825 accuracy0.9709 val_loss: 1.0281 val_accuracy0.7500%

INFO:root:Epoch: 93 loss: 0.0855 accuracy0.9698 val_loss: 1.0010 val_accuracy0.7672%

INFO:root:Epoch: 94 loss: 0.0767 accuracy0.9736 val_loss: 1.1248 val_accuracy0.7586%

INFO:root:Epoch: 95 loss: 0.0677 accuracy0.9801 val_loss: 1.0244 val_accuracy0.7672%

INFO:root:Epoch: 96 loss: 0.0456 accuracy0.9892 val_loss: 0.7834 val_accuracy0.7931%

INFO:root:Epoch: 97 loss: 0.0466 accuracy0.9855 val_loss: 0.7846 val_accuracy0.7672%

INFO:root:Epoch: 98 loss: 0.0393 accuracy0.9881 val_loss: 0.8616 val_accuracy0.7500%

INFO:root:Epoch: 99 loss: 0.0551 accuracy0.9822 val_loss: 0.7733 val_accuracy0.7759%

INFO:root:Epoch: 100 loss: 0.0836 accuracy0.9698 val_loss: 0.7481 val_accuracy0.7845%

INFO:root:Epoch: 101 loss: 0.0653 accuracy0.9774 val_loss: 0.9688 val_accuracy0.7672%

INFO:root:Epoch: 102 loss: 0.0588 accuracy0.9801 val_loss: 1.1393 val_accuracy0.7500%

INFO:root:Epoch: 103 loss: 0.0664 accuracy0.9795 val_loss: 0.7627 val_accuracy0.7672%

INFO:root:Epoch: 104 loss: 0.0610 accuracy0.9774 val_loss: 1.1528 val_accuracy0.7586%

INFO:root:Epoch: 105 loss: 0.0703 accuracy0.9774 val_loss: 1.0459 val_accuracy0.8276%

INFO:root:Epoch: 106 loss: 0.0937 accuracy0.9666 val_loss: 0.8329 val_accuracy0.7931%

INFO:root:Epoch: 107 loss: 0.0961 accuracy0.9661 val_loss: 1.1728 val_accuracy0.7586%

INFO:root:Epoch: 108 loss: 0.0681 accuracy0.9790 val_loss: 0.9666 val_accuracy0.7845%

INFO:root:Epoch: 109 loss: 0.0646 accuracy0.9779 val_loss: 1.0288 val_accuracy0.8017%

INFO:root:Epoch: 110 loss: 0.0477 accuracy0.9855 val_loss: 1.0332 val_accuracy0.7759%

INFO:root:Epoch: 111 loss: 0.0381 accuracy0.9887 val_loss: 1.4166 val_accuracy0.7328%

INFO:root:Epoch: 112 loss: 0.0351 accuracy0.9898 val_loss: 1.0115 val_accuracy0.7845%

INFO:root:Epoch: 113 loss: 0.0273 accuracy0.9919 val_loss: 1.1078 val_accuracy0.7672%

INFO:root:Epoch: 114 loss: 0.0252 accuracy0.9935 val_loss: 1.2386 val_accuracy0.7586%

INFO:root:Epoch: 115 loss: 0.0261 accuracy0.9919 val_loss: 0.9510 val_accuracy0.8190%

INFO:root:Epoch: 116 loss: 0.0354 accuracy0.9881 val_loss: 1.0108 val_accuracy0.7931%

INFO:root:Epoch: 117 loss: 0.0247 accuracy0.9930 val_loss: 0.7432 val_accuracy0.7845%

INFO:root:Epoch: 118 loss: 0.0291 accuracy0.9908 val_loss: 1.0043 val_accuracy0.7586%

INFO:root:Epoch: 119 loss: 0.0253 accuracy0.9919 val_loss: 0.8912 val_accuracy0.7931%

INFO:root:Epoch: 120 loss: 0.0307 accuracy0.9871 val_loss: 0.8100 val_accuracy0.7845%

INFO:root:Epoch: 121 loss: 0.0783 accuracy0.9774 val_loss: 1.0646 val_accuracy0.7931%

INFO:root:Epoch: 122 loss: 0.0853 accuracy0.9677 val_loss: 1.3628 val_accuracy0.7672%

INFO:root:Epoch: 123 loss: 0.0781 accuracy0.9747 val_loss: 1.3015 val_accuracy0.7672%

INFO:root:Epoch: 124 loss: 0.0769 accuracy0.9731 val_loss: 1.6545 val_accuracy0.7500%

INFO:root:Epoch: 125 loss: 0.0554 accuracy0.9790 val_loss: 1.5920 val_accuracy0.7759%

INFO:root:Epoch: 126 loss: 0.0395 accuracy0.9892 val_loss: 1.1924 val_accuracy0.7759%

INFO:root:Epoch: 127 loss: 0.0360 accuracy0.9903 val_loss: 1.3578 val_accuracy0.7586%

INFO:root:Epoch: 128 loss: 0.0278 accuracy0.9903 val_loss: 1.2610 val_accuracy0.7586%

INFO:root:Epoch: 129 loss: 0.0242 accuracy0.9930 val_loss: 1.0845 val_accuracy0.7845%

INFO:root:Epoch: 130 loss: 0.0272 accuracy0.9919 val_loss: 1.1020 val_accuracy0.8017%

INFO:root:Epoch: 131 loss: 0.0226 accuracy0.9930 val_loss: 1.1397 val_accuracy0.7931%

INFO:root:Epoch: 132 loss: 0.0210 accuracy0.9941 val_loss: 1.2501 val_accuracy0.8103%

INFO:root:Epoch: 133 loss: 0.0201 accuracy0.9946 val_loss: 1.2675 val_accuracy0.7759%

INFO:root:Epoch: 134 loss: 0.0245 accuracy0.9935 val_loss: 1.0735 val_accuracy0.7931%

INFO:root:Epoch: 135 loss: 0.0244 accuracy0.9903 val_loss: 1.0212 val_accuracy0.8017%

INFO:root:Epoch: 136 loss: 0.0381 accuracy0.9849 val_loss: 1.2212 val_accuracy0.7500%

INFO:root:Epoch: 137 loss: 0.0558 accuracy0.9801 val_loss: 0.9528 val_accuracy0.8017%

INFO:root:Epoch: 138 loss: 0.0361 accuracy0.9881 val_loss: 0.8859 val_accuracy0.8017%

INFO:root:Epoch: 139 loss: 0.0778 accuracy0.9725 val_loss: 1.3304 val_accuracy0.7845%

INFO:root:Epoch: 140 loss: 0.0882 accuracy0.9677 val_loss: 1.3655 val_accuracy0.7328%

INFO:root:Epoch: 141 loss: 0.1023 accuracy0.9591 val_loss: 0.9434 val_accuracy0.7672%

INFO:root:Epoch: 142 loss: 0.0902 accuracy0.9677 val_loss: 2.0333 val_accuracy0.7241%

INFO:root:Epoch: 143 loss: 0.0902 accuracy0.9666 val_loss: 1.5208 val_accuracy0.7586%

INFO:root:Epoch: 144 loss: 0.0584 accuracy0.9768 val_loss: 1.4460 val_accuracy0.7155%

INFO:root:Epoch: 145 loss: 0.0344 accuracy0.9903 val_loss: 1.3455 val_accuracy0.7500%

INFO:root:Epoch: 146 loss: 0.0334 accuracy0.9898 val_loss: 1.1362 val_accuracy0.7931%

INFO:root:Epoch: 147 loss: 0.0386 accuracy0.9865 val_loss: 1.0942 val_accuracy0.7500%

INFO:root:Epoch: 148 loss: 0.0408 accuracy0.9855 val_loss: 1.8031 val_accuracy0.7759%

INFO:root:Epoch: 149 loss: 0.0326 accuracy0.9892 val_loss: 1.2197 val_accuracy0.7759%

INFO:root:Epoch: 150 loss: 0.0351 accuracy0.9892 val_loss: 1.3772 val_accuracy0.7500%

INFO:root:Epoch: 151 loss: 0.0330 accuracy0.9887 val_loss: 1.2833 val_accuracy0.7586%

INFO:root:Epoch: 152 loss: 0.0293 accuracy0.9919 val_loss: 1.1884 val_accuracy0.7759%

INFO:root:Epoch: 153 loss: 0.0226 accuracy0.9935 val_loss: 1.1605 val_accuracy0.7845%

INFO:root:Epoch: 154 loss: 0.0217 accuracy0.9941 val_loss: 1.1762 val_accuracy0.7500%

INFO:root:Epoch: 155 loss: 0.0183 accuracy0.9935 val_loss: 1.1848 val_accuracy0.7845%

INFO:root:Epoch: 156 loss: 0.0169 accuracy0.9952 val_loss: 1.0425 val_accuracy0.7759%

INFO:root:Epoch: 157 loss: 0.0171 accuracy0.9946 val_loss: 1.0455 val_accuracy0.7845%

INFO:root:Epoch: 158 loss: 0.0181 accuracy0.9941 val_loss: 1.1826 val_accuracy0.7931%

INFO:root:Epoch: 159 loss: 0.0190 accuracy0.9941 val_loss: 1.0704 val_accuracy0.7845%

INFO:root:Epoch: 160 loss: 0.0139 accuracy0.9946 val_loss: 1.1003 val_accuracy0.8017%

INFO:root:Epoch: 161 loss: 0.0138 accuracy0.9946 val_loss: 1.1716 val_accuracy0.7931%

INFO:root:Epoch: 162 loss: 0.0175 accuracy0.9957 val_loss: 1.0390 val_accuracy0.8017%

INFO:root:Epoch: 163 loss: 0.0194 accuracy0.9952 val_loss: 1.2200 val_accuracy0.7845%

INFO:root:Epoch: 164 loss: 0.0203 accuracy0.9946 val_loss: 1.2209 val_accuracy0.7500%

INFO:root:Epoch: 165 loss: 0.0160 accuracy0.9946 val_loss: 1.1525 val_accuracy0.7759%

INFO:root:Epoch: 166 loss: 0.0137 accuracy0.9957 val_loss: 1.1140 val_accuracy0.7931%

INFO:root:Epoch: 167 loss: 0.0141 accuracy0.9952 val_loss: 1.0785 val_accuracy0.8190%

INFO:root:Epoch: 168 loss: 0.0172 accuracy0.9925 val_loss: 1.1361 val_accuracy0.7931%

INFO:root:Epoch: 169 loss: 0.0349 accuracy0.9881 val_loss: 1.4776 val_accuracy0.7845%

INFO:root:Epoch: 170 loss: 0.0370 accuracy0.9849 val_loss: 1.4144 val_accuracy0.7672%

INFO:root:Epoch: 171 loss: 0.0444 accuracy0.9865 val_loss: 1.5152 val_accuracy0.7414%

INFO:root:Epoch: 172 loss: 0.0688 accuracy0.9714 val_loss: 1.7955 val_accuracy0.8103%

INFO:root:Epoch: 173 loss: 0.0562 accuracy0.9795 val_loss: 1.2679 val_accuracy0.7759%

INFO:root:Epoch: 174 loss: 0.0535 accuracy0.9790 val_loss: 1.0833 val_accuracy0.7759%

INFO:root:Epoch: 175 loss: 0.1028 accuracy0.9623 val_loss: 2.1140 val_accuracy0.6638%

INFO:root:Epoch: 176 loss: 0.1132 accuracy0.9591 val_loss: 0.9484 val_accuracy0.7759%

INFO:root:Epoch: 177 loss: 0.0961 accuracy0.9644 val_loss: 1.3200 val_accuracy0.7414%

INFO:root:Epoch: 178 loss: 0.0840 accuracy0.9666 val_loss: 1.3187 val_accuracy0.7500%

INFO:root:Epoch: 179 loss: 0.0486 accuracy0.9833 val_loss: 0.9946 val_accuracy0.8103%

INFO:root:Epoch: 180 loss: 0.0361 accuracy0.9844 val_loss: 1.0632 val_accuracy0.7931%

INFO:root:Epoch: 181 loss: 0.0328 accuracy0.9887 val_loss: 1.0753 val_accuracy0.8017%

INFO:root:Epoch: 182 loss: 0.0266 accuracy0.9914 val_loss: 1.1671 val_accuracy0.7845%

INFO:root:Epoch: 183 loss: 0.0193 accuracy0.9941 val_loss: 1.0263 val_accuracy0.8017%

INFO:root:Epoch: 184 loss: 0.0152 accuracy0.9957 val_loss: 0.9352 val_accuracy0.7845%

INFO:root:Epoch: 185 loss: 0.0197 accuracy0.9935 val_loss: 0.9210 val_accuracy0.7931%

INFO:root:Epoch: 186 loss: 0.0164 accuracy0.9935 val_loss: 1.0168 val_accuracy0.8017%

INFO:root:Epoch: 187 loss: 0.0138 accuracy0.9952 val_loss: 1.0791 val_accuracy0.7759%

INFO:root:Epoch: 188 loss: 0.0141 accuracy0.9957 val_loss: 1.0817 val_accuracy0.7931%

INFO:root:Epoch: 189 loss: 0.0116 accuracy0.9962 val_loss: 1.0770 val_accuracy0.7672%

INFO:root:Epoch: 190 loss: 0.0124 accuracy0.9952 val_loss: 0.9770 val_accuracy0.7845%

INFO:root:Epoch: 191 loss: 0.0104 accuracy0.9973 val_loss: 1.0017 val_accuracy0.7931%

INFO:root:Epoch: 192 loss: 0.0101 accuracy0.9962 val_loss: 1.0645 val_accuracy0.7931%

INFO:root:Epoch: 193 loss: 0.0149 accuracy0.9946 val_loss: 1.0272 val_accuracy0.7931%

INFO:root:Epoch: 194 loss: 0.0166 accuracy0.9935 val_loss: 1.1077 val_accuracy0.7759%

INFO:root:Epoch: 195 loss: 0.0199 accuracy0.9957 val_loss: 1.1478 val_accuracy0.7931%

INFO:root:Epoch: 196 loss: 0.0169 accuracy0.9935 val_loss: 1.2497 val_accuracy0.7759%

INFO:root:Epoch: 197 loss: 0.0343 accuracy0.9887 val_loss: 1.4104 val_accuracy0.7586%

INFO:root:Epoch: 198 loss: 0.0308 accuracy0.9898 val_loss: 1.4021 val_accuracy0.7586%

INFO:root:Epoch: 199 loss: 0.0250 accuracy0.9908 val_loss: 1.2351 val_accuracy0.7586%

INFO:root:Epoch: 200 loss: 0.0217 accuracy0.9935 val_loss: 1.4284 val_accuracy0.7672%

INFO:root:model summary:
INFO:root:Model: "model"
INFO:root:__________________________________________________________________________________________________
INFO:root:Layer (type)                    Output Shape         Param #     Connected to                     
INFO:root:==================================================================================================
INFO:root:input_1 (InputLayer)            [(None, 200, 2)]     0                                            
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d (MaxPooling1D)    (None, 200, 2)       0           input_1[0][0]                    
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d (Conv1D)                 (None, 200, 32)      2624        input_1[0][0]                    
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_1 (Conv1D)               (None, 200, 32)      1280        input_1[0][0]                    
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_2 (Conv1D)               (None, 200, 32)      640         input_1[0][0]                    
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_3 (Conv1D)               (None, 200, 32)      64          max_pooling1d[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate (Concatenate)       (None, 200, 128)     0           conv1d[0][0]                     
INFO:root:                                                                 conv1d_1[0][0]                   
INFO:root:                                                                 conv1d_2[0][0]                   
INFO:root:                                                                 conv1d_3[0][0]                   
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization (BatchNorma (None, 200, 128)     512         concatenate[0][0]                
INFO:root:__________________________________________________________________________________________________
INFO:root:activation (Activation)         (None, 200, 128)     0           batch_normalization[0][0]        
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_1 (MaxPooling1D)  (None, 200, 128)     0           activation[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_4 (Conv1D)               (None, 200, 32)      167936      activation[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_5 (Conv1D)               (None, 200, 32)      81920       activation[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_6 (Conv1D)               (None, 200, 32)      40960       activation[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_7 (Conv1D)               (None, 200, 32)      4096        max_pooling1d_1[0][0]            
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_1 (Concatenate)     (None, 200, 128)     0           conv1d_4[0][0]                   
INFO:root:                                                                 conv1d_5[0][0]                   
INFO:root:                                                                 conv1d_6[0][0]                   
INFO:root:                                                                 conv1d_7[0][0]                   
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_1 (BatchNor (None, 200, 128)     512         concatenate_1[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_1 (Activation)       (None, 200, 128)     0           batch_normalization_1[0][0]      
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_2 (MaxPooling1D)  (None, 200, 128)     0           activation_1[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_8 (Conv1D)               (None, 200, 32)      167936      activation_1[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_9 (Conv1D)               (None, 200, 32)      81920       activation_1[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_10 (Conv1D)              (None, 200, 32)      40960       activation_1[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_11 (Conv1D)              (None, 200, 32)      4096        max_pooling1d_2[0][0]            
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_2 (Concatenate)     (None, 200, 128)     0           conv1d_8[0][0]                   
INFO:root:                                                                 conv1d_9[0][0]                   
INFO:root:                                                                 conv1d_10[0][0]                  
INFO:root:                                                                 conv1d_11[0][0]                  
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_12 (Conv1D)              (None, 200, 128)     256         input_1[0][0]                    
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_2 (BatchNor (None, 200, 128)     512         concatenate_2[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_3 (BatchNor (None, 200, 128)     512         conv1d_12[0][0]                  
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_2 (Activation)       (None, 200, 128)     0           batch_normalization_2[0][0]      
INFO:root:__________________________________________________________________________________________________
INFO:root:add (Add)                       (None, 200, 128)     0           batch_normalization_3[0][0]      
INFO:root:                                                                 activation_2[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_3 (Activation)       (None, 200, 128)     0           add[0][0]                        
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_3 (MaxPooling1D)  (None, 200, 128)     0           activation_3[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_13 (Conv1D)              (None, 200, 32)      167936      activation_3[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_14 (Conv1D)              (None, 200, 32)      81920       activation_3[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_15 (Conv1D)              (None, 200, 32)      40960       activation_3[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_16 (Conv1D)              (None, 200, 32)      4096        max_pooling1d_3[0][0]            
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_3 (Concatenate)     (None, 200, 128)     0           conv1d_13[0][0]                  
INFO:root:                                                                 conv1d_14[0][0]                  
INFO:root:                                                                 conv1d_15[0][0]                  
INFO:root:                                                                 conv1d_16[0][0]                  
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_4 (BatchNor (None, 200, 128)     512         concatenate_3[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_4 (Activation)       (None, 200, 128)     0           batch_normalization_4[0][0]      
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_4 (MaxPooling1D)  (None, 200, 128)     0           activation_4[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_17 (Conv1D)              (None, 200, 32)      167936      activation_4[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_18 (Conv1D)              (None, 200, 32)      81920       activation_4[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_19 (Conv1D)              (None, 200, 32)      40960       activation_4[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_20 (Conv1D)              (None, 200, 32)      4096        max_pooling1d_4[0][0]            
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_4 (Concatenate)     (None, 200, 128)     0           conv1d_17[0][0]                  
INFO:root:                                                                 conv1d_18[0][0]                  
INFO:root:                                                                 conv1d_19[0][0]                  
INFO:root:                                                                 conv1d_20[0][0]                  
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_5 (BatchNor (None, 200, 128)     512         concatenate_4[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_5 (Activation)       (None, 200, 128)     0           batch_normalization_5[0][0]      
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_5 (MaxPooling1D)  (None, 200, 128)     0           activation_5[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_21 (Conv1D)              (None, 200, 32)      167936      activation_5[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_22 (Conv1D)              (None, 200, 32)      81920       activation_5[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_23 (Conv1D)              (None, 200, 32)      40960       activation_5[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_24 (Conv1D)              (None, 200, 32)      4096        max_pooling1d_5[0][0]            
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_5 (Concatenate)     (None, 200, 128)     0           conv1d_21[0][0]                  
INFO:root:                                                                 conv1d_22[0][0]                  
INFO:root:                                                                 conv1d_23[0][0]                  
INFO:root:                                                                 conv1d_24[0][0]                  
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_25 (Conv1D)              (None, 200, 128)     16384       activation_3[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_6 (BatchNor (None, 200, 128)     512         concatenate_5[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_7 (BatchNor (None, 200, 128)     512         conv1d_25[0][0]                  
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_6 (Activation)       (None, 200, 128)     0           batch_normalization_6[0][0]      
INFO:root:__________________________________________________________________________________________________
INFO:root:add_1 (Add)                     (None, 200, 128)     0           batch_normalization_7[0][0]      
INFO:root:                                                                 activation_6[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_7 (Activation)       (None, 200, 128)     0           add_1[0][0]                      
INFO:root:__________________________________________________________________________________________________
INFO:root:global_average_pooling1d (Globa (None, 128)          0           activation_7[0][0]               
INFO:root:__________________________________________________________________________________________________
INFO:root:dense (Dense)                   (None, 2)            258         global_average_pooling1d[0][0]   
INFO:root:==================================================================================================
INFO:root:Total params: 1,500,162
INFO:root:Trainable params: 1,498,114
INFO:root:Non-trainable params: 2,048
INFO:root:__________________________________________________________________________________________________
INFO:root:tmodel performance per fold and showing results:
INFO:root:avg (SD) accuracy:0.7296551724137931 (0.03034482758620688)
INFO:root:avg (SD) precision:0.7418823409597166 (0.09032894360573515)
INFO:root:avg (SD) recall:0.7371650720184648 (0.10739081495784916)
INFO:root:avg (SD) fscore:0.7276158181195804 (0.038628985804366606)
INFO:root:avg (SD) fw:0.7283386539479323 (0.031014903977938966)
INFO:root:mean_time=0.21705665672197938
INFO:root:testing confusionmatrix:
INFO:root:testing confusionmatrix:[[266. 105.]
 [ 65. 289.]]
INFO:root:testing acc:0.7655172413793103
INFO:root:testing fscore:[0.7578347578347577, 0.7727272727272727]
INFO:root:testing weighted fscore:0.7659280693763453
DEBUG:matplotlib.colorbar:locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f7ddfa6f970>
DEBUG:matplotlib.colorbar:Using auto colorbar locator on colorbar
DEBUG:matplotlib.colorbar:locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f7ddfa6f970>
DEBUG:matplotlib.colorbar:Setting pcolormesh
INFO:root:mean_time_total=605.1212853658944
