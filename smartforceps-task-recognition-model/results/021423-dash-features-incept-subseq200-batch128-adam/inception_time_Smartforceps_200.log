WARNING:tensorflow:From /home/amir/Desktop/smartforceps_ai_models/smartforceps_dl_prediction_models_tf2/smartforceps_task_model/model_info.py:31: The name tf.keras.backend.set_session is deprecated. Please use tf.compat.v1.keras.backend.set_session instead.

DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 1.2440909090909091
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msbm10' (msbm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'eufm10' (eufm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'esint10' (esint10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'wasy10' (wasy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msam10' (msam10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 2.244090909090909
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'rsfs10' (rsfs10.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'stmary10' (stmary10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 1.2440909090909091
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msbm10' (msbm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'eufm10' (eufm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'esint10' (esint10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'wasy10' (wasy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msam10' (msam10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 2.244090909090909
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'rsfs10' (rsfs10.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'stmary10' (stmary10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=668)
           2	BUILD_MAP(arg=0, lineno=668)
           4	STORE_FAST(arg=4, lineno=668)
           6	LOAD_GLOBAL(arg=0, lineno=671)
           8	LOAD_FAST(arg=0, lineno=671)
          10	LOAD_FAST(arg=1, lineno=671)
          12	LOAD_CONST(arg=1, lineno=671)
          14	CALL_FUNCTION_KW(arg=2, lineno=671)
          16	LOAD_METHOD(arg=1, lineno=671)
          18	CALL_METHOD(arg=0, lineno=671)
          20	STORE_FAST(arg=5, lineno=671)
          22	LOAD_FAST(arg=2, lineno=674)
          24	LOAD_CONST(arg=2, lineno=674)
          26	COMPARE_OP(arg=9, lineno=674)
          28	POP_JUMP_IF_FALSE(arg=80, lineno=674)
          30	LOAD_FAST(arg=2, lineno=674)
          32	LOAD_METHOD(arg=2, lineno=674)
          34	LOAD_CONST(arg=3, lineno=674)
          36	LOAD_FAST(arg=3, lineno=674)
          38	CALL_METHOD(arg=2, lineno=674)
          40	POP_JUMP_IF_FALSE(arg=80, lineno=674)
          42	LOAD_CONST(arg=4, lineno=675)
          44	LOAD_GLOBAL(arg=3, lineno=675)
          46	LOAD_METHOD(arg=4, lineno=675)
          48	LOAD_FAST(arg=5, lineno=675)
          50	LOAD_ATTR(arg=5, lineno=675)
          52	CALL_METHOD(arg=1, lineno=675)
          54	LOAD_GLOBAL(arg=3, lineno=675)
          56	LOAD_METHOD(arg=4, lineno=675)
          58	LOAD_FAST(arg=5, lineno=676)
          60	LOAD_ATTR(arg=6, lineno=676)
          62	LOAD_FAST(arg=5, lineno=676)
          64	LOAD_ATTR(arg=5, lineno=676)
          66	BINARY_ADD(arg=None, lineno=676)
          68	CALL_METHOD(arg=1, lineno=675)
          70	BINARY_TRUE_DIVIDE(arg=None, lineno=675)
          72	BINARY_SUBTRACT(arg=None, lineno=675)
          74	LOAD_FAST(arg=4, lineno=675)
          76	LOAD_CONST(arg=3, lineno=675)
          78	STORE_SUBSCR(arg=None, lineno=675)
>         80	LOAD_FAST(arg=2, lineno=680)
          82	LOAD_CONST(arg=2, lineno=680)
          84	COMPARE_OP(arg=9, lineno=680)
          86	POP_JUMP_IF_FALSE(arg=138, lineno=680)
          88	LOAD_FAST(arg=2, lineno=680)
          90	LOAD_METHOD(arg=2, lineno=680)
          92	LOAD_CONST(arg=5, lineno=680)
          94	LOAD_FAST(arg=3, lineno=680)
          96	CALL_METHOD(arg=2, lineno=680)
          98	POP_JUMP_IF_FALSE(arg=138, lineno=680)
         100	LOAD_CONST(arg=4, lineno=681)
         102	LOAD_GLOBAL(arg=3, lineno=681)
         104	LOAD_METHOD(arg=4, lineno=681)
         106	LOAD_FAST(arg=5, lineno=681)
         108	LOAD_ATTR(arg=5, lineno=681)
         110	CALL_METHOD(arg=1, lineno=681)
         112	LOAD_GLOBAL(arg=3, lineno=681)
         114	LOAD_METHOD(arg=4, lineno=681)
         116	LOAD_FAST(arg=5, lineno=682)
         118	LOAD_ATTR(arg=7, lineno=682)
         120	LOAD_FAST(arg=5, lineno=682)
         122	LOAD_ATTR(arg=5, lineno=682)
         124	BINARY_ADD(arg=None, lineno=682)
         126	CALL_METHOD(arg=1, lineno=681)
         128	BINARY_TRUE_DIVIDE(arg=None, lineno=681)
         130	BINARY_SUBTRACT(arg=None, lineno=681)
         132	LOAD_FAST(arg=4, lineno=681)
         134	LOAD_CONST(arg=5, lineno=681)
         136	STORE_SUBSCR(arg=None, lineno=681)
>        138	LOAD_FAST(arg=2, lineno=686)
         140	LOAD_CONST(arg=2, lineno=686)
         142	COMPARE_OP(arg=9, lineno=686)
         144	POP_JUMP_IF_FALSE(arg=246, lineno=686)
         146	LOAD_FAST(arg=2, lineno=686)
         148	LOAD_METHOD(arg=2, lineno=686)
         150	LOAD_CONST(arg=6, lineno=686)
         152	LOAD_FAST(arg=3, lineno=686)
         154	CALL_METHOD(arg=2, lineno=686)
         156	POP_JUMP_IF_FALSE(arg=246, lineno=686)
         158	LOAD_GLOBAL(arg=3, lineno=687)
         160	LOAD_ATTR(arg=8, lineno=687)
         162	LOAD_GLOBAL(arg=3, lineno=688)
         164	LOAD_METHOD(arg=9, lineno=688)
         166	LOAD_FAST(arg=5, lineno=688)
         168	LOAD_ATTR(arg=5, lineno=688)
         170	CALL_METHOD(arg=1, lineno=688)
         172	LOAD_CONST(arg=2, lineno=688)
         174	LOAD_CONST(arg=2, lineno=688)
         176	BUILD_SLICE(arg=2, lineno=688)
         178	LOAD_GLOBAL(arg=3, lineno=688)
         180	LOAD_ATTR(arg=10, lineno=688)
         182	BUILD_TUPLE(arg=2, lineno=688)
         184	BINARY_SUBSCR(arg=None, lineno=688)
         186	LOAD_GLOBAL(arg=11, lineno=688)
         188	LOAD_FAST(arg=5, lineno=688)
         190	LOAD_ATTR(arg=5, lineno=688)
         192	CALL_FUNCTION(arg=1, lineno=688)
         194	LOAD_CONST(arg=4, lineno=688)
         196	LOAD_CONST(arg=7, lineno=687)
         198	CALL_FUNCTION_KW(arg=3, lineno=687)
         200	STORE_FAST(arg=6, lineno=687)
         202	LOAD_GLOBAL(arg=3, lineno=690)
         204	LOAD_ATTR(arg=12, lineno=690)
         206	LOAD_FAST(arg=6, lineno=690)
         208	LOAD_GLOBAL(arg=3, lineno=690)
         210	LOAD_METHOD(arg=13, lineno=690)
         212	LOAD_GLOBAL(arg=11, lineno=690)
         214	LOAD_FAST(arg=6, lineno=690)
         216	CALL_FUNCTION(arg=1, lineno=690)
         218	CALL_METHOD(arg=1, lineno=690)
         220	STORE_SUBSCR(arg=None, lineno=690)
         222	LOAD_GLOBAL(arg=3, lineno=691)
         224	LOAD_METHOD(arg=4, lineno=691)
         226	LOAD_GLOBAL(arg=3, lineno=691)
         228	LOAD_ATTR(arg=14, lineno=691)
         230	LOAD_FAST(arg=6, lineno=691)
         232	LOAD_CONST(arg=8, lineno=691)
         234	LOAD_CONST(arg=7, lineno=691)
         236	CALL_FUNCTION_KW(arg=2, lineno=691)
         238	CALL_METHOD(arg=1, lineno=691)
         240	LOAD_FAST(arg=4, lineno=691)
         242	LOAD_CONST(arg=6, lineno=691)
         244	STORE_SUBSCR(arg=None, lineno=691)
>        246	LOAD_FAST(arg=2, lineno=694)
         248	LOAD_CONST(arg=2, lineno=694)
         250	COMPARE_OP(arg=9, lineno=694)
         252	POP_JUMP_IF_FALSE(arg=294, lineno=694)
         256	LOAD_FAST(arg=2, lineno=694)
         258	LOAD_METHOD(arg=2, lineno=694)
         260	LOAD_CONST(arg=9, lineno=694)
         262	LOAD_FAST(arg=3, lineno=694)
         264	CALL_METHOD(arg=2, lineno=694)
         266	POP_JUMP_IF_FALSE(arg=294, lineno=694)
         270	LOAD_GLOBAL(arg=3, lineno=695)
         272	LOAD_METHOD(arg=15, lineno=695)
         274	LOAD_FAST(arg=5, lineno=695)
         276	LOAD_ATTR(arg=7, lineno=695)
         278	LOAD_CONST(arg=2, lineno=695)
         280	LOAD_FAST(arg=1, lineno=695)
         282	BUILD_SLICE(arg=2, lineno=695)
         284	BINARY_SUBSCR(arg=None, lineno=695)
         286	CALL_METHOD(arg=1, lineno=695)
         288	LOAD_FAST(arg=4, lineno=695)
         290	LOAD_CONST(arg=9, lineno=695)
         292	STORE_SUBSCR(arg=None, lineno=695)
>        294	LOAD_FAST(arg=2, lineno=698)
         296	LOAD_CONST(arg=2, lineno=698)
         298	COMPARE_OP(arg=9, lineno=698)
         300	POP_JUMP_IF_FALSE(arg=342, lineno=698)
         304	LOAD_FAST(arg=2, lineno=698)
         306	LOAD_METHOD(arg=2, lineno=698)
         308	LOAD_CONST(arg=10, lineno=698)
         310	LOAD_FAST(arg=3, lineno=698)
         312	CALL_METHOD(arg=2, lineno=698)
         314	POP_JUMP_IF_FALSE(arg=342, lineno=698)
         318	LOAD_GLOBAL(arg=3, lineno=699)
         320	LOAD_METHOD(arg=16, lineno=699)
         322	LOAD_FAST(arg=5, lineno=699)
         324	LOAD_ATTR(arg=7, lineno=699)
         326	LOAD_CONST(arg=2, lineno=699)
         328	LOAD_FAST(arg=1, lineno=699)
         330	BUILD_SLICE(arg=2, lineno=699)
         332	BINARY_SUBSCR(arg=None, lineno=699)
         334	CALL_METHOD(arg=1, lineno=699)
         336	LOAD_FAST(arg=4, lineno=699)
         338	LOAD_CONST(arg=10, lineno=699)
         340	STORE_SUBSCR(arg=None, lineno=699)
>        342	LOAD_FAST(arg=4, lineno=701)
         344	RETURN_VALUE(arg=None, lineno=701)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=668)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=BUILD_MAP(arg=0, lineno=668)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=STORE_FAST(arg=4, lineno=668)
DEBUG:numba.core.byteflow:stack ['$2build_map.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=671)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=671)
DEBUG:numba.core.byteflow:stack ['$6load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=671)
DEBUG:numba.core.byteflow:stack ['$6load_global.1', '$x8.2']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=671)
DEBUG:numba.core.byteflow:stack ['$6load_global.1', '$x8.2', '$period10.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION_KW(arg=2, lineno=671)
DEBUG:numba.core.byteflow:stack ['$6load_global.1', '$x8.2', '$period10.3', '$const12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_METHOD(arg=1, lineno=671)
DEBUG:numba.core.byteflow:stack ['$14call_function_kw.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=CALL_METHOD(arg=0, lineno=671)
DEBUG:numba.core.byteflow:stack ['$16load_method.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=STORE_FAST(arg=5, lineno=671)
DEBUG:numba.core.byteflow:stack ['$18call_method.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=674)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=674)
DEBUG:numba.core.byteflow:stack ['$extra_args22.8']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=COMPARE_OP(arg=9, lineno=674)
DEBUG:numba.core.byteflow:stack ['$extra_args22.8', '$const24.9']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=80, lineno=674)
DEBUG:numba.core.byteflow:stack ['$26compare_op.10']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=80, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=80 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=674)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_METHOD(arg=2, lineno=674)
DEBUG:numba.core.byteflow:stack ['$extra_args30.0']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_CONST(arg=3, lineno=674)
DEBUG:numba.core.byteflow:stack ['$32load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=674)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$const34.2']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=CALL_METHOD(arg=2, lineno=674)
DEBUG:numba.core.byteflow:stack ['$32load_method.1', '$const34.2', '$default_status36.3']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=80, lineno=674)
DEBUG:numba.core.byteflow:stack ['$38call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=80, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=80 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_FAST(arg=2, lineno=680)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_CONST(arg=2, lineno=680)
DEBUG:numba.core.byteflow:stack ['$extra_args80.0']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=COMPARE_OP(arg=9, lineno=680)
DEBUG:numba.core.byteflow:stack ['$extra_args80.0', '$const82.1']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=POP_JUMP_IF_FALSE(arg=138, lineno=680)
DEBUG:numba.core.byteflow:stack ['$84compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=138, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_CONST(arg=4, lineno=675)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_GLOBAL(arg=3, lineno=675)
DEBUG:numba.core.byteflow:stack ['$const42.0']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_METHOD(arg=4, lineno=675)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$44load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=675)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$46load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_ATTR(arg=5, lineno=675)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$46load_method.2', '$res48.3']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=CALL_METHOD(arg=1, lineno=675)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$46load_method.2', '$50load_attr.4']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_GLOBAL(arg=3, lineno=675)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$52call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_METHOD(arg=4, lineno=675)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$52call_method.5', '$54load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=676)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$52call_method.5', '$56load_method.7']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_ATTR(arg=6, lineno=676)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$52call_method.5', '$56load_method.7', '$res58.8']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=5, lineno=676)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$52call_method.5', '$56load_method.7', '$60load_attr.9']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_ATTR(arg=5, lineno=676)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$52call_method.5', '$56load_method.7', '$60load_attr.9', '$res62.10']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=BINARY_ADD(arg=None, lineno=676)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$52call_method.5', '$56load_method.7', '$60load_attr.9', '$64load_attr.11']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=CALL_METHOD(arg=1, lineno=675)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$52call_method.5', '$56load_method.7', '$66binary_add.12']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=675)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$52call_method.5', '$68call_method.13']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_SUBTRACT(arg=None, lineno=675)
DEBUG:numba.core.byteflow:stack ['$const42.0', '$70binary_true_divide.14']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=675)
DEBUG:numba.core.byteflow:stack ['$72binary_subtract.15']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_CONST(arg=3, lineno=675)
DEBUG:numba.core.byteflow:stack ['$72binary_subtract.15', '$stl_features74.16']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=STORE_SUBSCR(arg=None, lineno=675)
DEBUG:numba.core.byteflow:stack ['$72binary_subtract.15', '$stl_features74.16', '$const76.17']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=80 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=80 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=680)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_METHOD(arg=2, lineno=680)
DEBUG:numba.core.byteflow:stack ['$extra_args88.0']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_CONST(arg=5, lineno=680)
DEBUG:numba.core.byteflow:stack ['$90load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=680)
DEBUG:numba.core.byteflow:stack ['$90load_method.1', '$const92.2']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=CALL_METHOD(arg=2, lineno=680)
DEBUG:numba.core.byteflow:stack ['$90load_method.1', '$const92.2', '$default_status94.3']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=POP_JUMP_IF_FALSE(arg=138, lineno=680)
DEBUG:numba.core.byteflow:stack ['$96call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=100, stack=(), blockstack=(), npush=0), Edge(pc=138, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=100 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=138, inst=LOAD_FAST(arg=2, lineno=686)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_CONST(arg=2, lineno=686)
DEBUG:numba.core.byteflow:stack ['$extra_args138.0']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=COMPARE_OP(arg=9, lineno=686)
DEBUG:numba.core.byteflow:stack ['$extra_args138.0', '$const140.1']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=246, lineno=686)
DEBUG:numba.core.byteflow:stack ['$142compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=246, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=100 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_CONST(arg=4, lineno=681)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_GLOBAL(arg=3, lineno=681)
DEBUG:numba.core.byteflow:stack ['$const100.0']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_METHOD(arg=4, lineno=681)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$102load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=5, lineno=681)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$104load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=LOAD_ATTR(arg=5, lineno=681)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$104load_method.2', '$res106.3']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=CALL_METHOD(arg=1, lineno=681)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$104load_method.2', '$108load_attr.4']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_GLOBAL(arg=3, lineno=681)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$110call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_METHOD(arg=4, lineno=681)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$110call_method.5', '$112load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_FAST(arg=5, lineno=682)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$110call_method.5', '$114load_method.7']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=LOAD_ATTR(arg=7, lineno=682)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$110call_method.5', '$114load_method.7', '$res116.8']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=682)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$110call_method.5', '$114load_method.7', '$118load_attr.9']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_ATTR(arg=5, lineno=682)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$110call_method.5', '$114load_method.7', '$118load_attr.9', '$res120.10']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=BINARY_ADD(arg=None, lineno=682)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$110call_method.5', '$114load_method.7', '$118load_attr.9', '$122load_attr.11']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=CALL_METHOD(arg=1, lineno=681)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$110call_method.5', '$114load_method.7', '$124binary_add.12']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=681)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$110call_method.5', '$126call_method.13']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=BINARY_SUBTRACT(arg=None, lineno=681)
DEBUG:numba.core.byteflow:stack ['$const100.0', '$128binary_true_divide.14']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=681)
DEBUG:numba.core.byteflow:stack ['$130binary_subtract.15']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=LOAD_CONST(arg=5, lineno=681)
DEBUG:numba.core.byteflow:stack ['$130binary_subtract.15', '$stl_features132.16']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=STORE_SUBSCR(arg=None, lineno=681)
DEBUG:numba.core.byteflow:stack ['$130binary_subtract.15', '$stl_features132.16', '$const134.17']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=686)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_METHOD(arg=2, lineno=686)
DEBUG:numba.core.byteflow:stack ['$extra_args146.0']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=LOAD_CONST(arg=6, lineno=686)
DEBUG:numba.core.byteflow:stack ['$148load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=LOAD_FAST(arg=3, lineno=686)
DEBUG:numba.core.byteflow:stack ['$148load_method.1', '$const150.2']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=CALL_METHOD(arg=2, lineno=686)
DEBUG:numba.core.byteflow:stack ['$148load_method.1', '$const150.2', '$default_status152.3']
DEBUG:numba.core.byteflow:dispatch pc=156, inst=POP_JUMP_IF_FALSE(arg=246, lineno=686)
DEBUG:numba.core.byteflow:stack ['$154call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=158, stack=(), blockstack=(), npush=0), Edge(pc=246, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=246 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=158 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=246, inst=LOAD_FAST(arg=2, lineno=694)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=248, inst=LOAD_CONST(arg=2, lineno=694)
DEBUG:numba.core.byteflow:stack ['$extra_args246.0']
DEBUG:numba.core.byteflow:dispatch pc=250, inst=COMPARE_OP(arg=9, lineno=694)
DEBUG:numba.core.byteflow:stack ['$extra_args246.0', '$const248.1']
DEBUG:numba.core.byteflow:dispatch pc=252, inst=POP_JUMP_IF_FALSE(arg=294, lineno=694)
DEBUG:numba.core.byteflow:stack ['$250compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=256, stack=(), blockstack=(), npush=0), Edge(pc=294, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=158 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=294 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=158 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=294 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=158, inst=LOAD_GLOBAL(arg=3, lineno=687)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=160, inst=LOAD_ATTR(arg=8, lineno=687)
DEBUG:numba.core.byteflow:stack ['$158load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_GLOBAL(arg=3, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_METHOD(arg=9, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$162load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=LOAD_FAST(arg=5, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$164load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=LOAD_ATTR(arg=5, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$164load_method.3', '$res166.4']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=CALL_METHOD(arg=1, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$164load_method.3', '$168load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_CONST(arg=2, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$170call_method.6']
DEBUG:numba.core.byteflow:dispatch pc=174, inst=LOAD_CONST(arg=2, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$170call_method.6', '$const172.7']
DEBUG:numba.core.byteflow:dispatch pc=176, inst=BUILD_SLICE(arg=2, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$170call_method.6', '$const172.7', '$const174.8']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=LOAD_GLOBAL(arg=3, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$170call_method.6', '$176build_slice.10']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=LOAD_ATTR(arg=10, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$170call_method.6', '$176build_slice.10', '$178load_global.11']
DEBUG:numba.core.byteflow:dispatch pc=182, inst=BUILD_TUPLE(arg=2, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$170call_method.6', '$176build_slice.10', '$180load_attr.12']
DEBUG:numba.core.byteflow:dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$170call_method.6', '$182build_tuple.13']
DEBUG:numba.core.byteflow:dispatch pc=186, inst=LOAD_GLOBAL(arg=11, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$184binary_subscr.14']
DEBUG:numba.core.byteflow:dispatch pc=188, inst=LOAD_FAST(arg=5, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$184binary_subscr.14', '$186load_global.15']
DEBUG:numba.core.byteflow:dispatch pc=190, inst=LOAD_ATTR(arg=5, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$184binary_subscr.14', '$186load_global.15', '$res188.16']
DEBUG:numba.core.byteflow:dispatch pc=192, inst=CALL_FUNCTION(arg=1, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$184binary_subscr.14', '$186load_global.15', '$190load_attr.17']
DEBUG:numba.core.byteflow:dispatch pc=194, inst=LOAD_CONST(arg=4, lineno=688)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$184binary_subscr.14', '$192call_function.18']
DEBUG:numba.core.byteflow:dispatch pc=196, inst=LOAD_CONST(arg=7, lineno=687)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$184binary_subscr.14', '$192call_function.18', '$const194.19']
DEBUG:numba.core.byteflow:dispatch pc=198, inst=CALL_FUNCTION_KW(arg=3, lineno=687)
DEBUG:numba.core.byteflow:stack ['$160load_attr.1', '$184binary_subscr.14', '$192call_function.18', '$const194.19', '$const196.20']
DEBUG:numba.core.byteflow:dispatch pc=200, inst=STORE_FAST(arg=6, lineno=687)
DEBUG:numba.core.byteflow:stack ['$198call_function_kw.21']
DEBUG:numba.core.byteflow:dispatch pc=202, inst=LOAD_GLOBAL(arg=3, lineno=690)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=204, inst=LOAD_ATTR(arg=12, lineno=690)
DEBUG:numba.core.byteflow:stack ['$202load_global.22']
DEBUG:numba.core.byteflow:dispatch pc=206, inst=LOAD_FAST(arg=6, lineno=690)
DEBUG:numba.core.byteflow:stack ['$204load_attr.23']
DEBUG:numba.core.byteflow:dispatch pc=208, inst=LOAD_GLOBAL(arg=3, lineno=690)
DEBUG:numba.core.byteflow:stack ['$204load_attr.23', '$resid_array206.24']
DEBUG:numba.core.byteflow:dispatch pc=210, inst=LOAD_METHOD(arg=13, lineno=690)
DEBUG:numba.core.byteflow:stack ['$204load_attr.23', '$resid_array206.24', '$208load_global.25']
DEBUG:numba.core.byteflow:dispatch pc=212, inst=LOAD_GLOBAL(arg=11, lineno=690)
DEBUG:numba.core.byteflow:stack ['$204load_attr.23', '$resid_array206.24', '$210load_method.26']
DEBUG:numba.core.byteflow:dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=690)
DEBUG:numba.core.byteflow:stack ['$204load_attr.23', '$resid_array206.24', '$210load_method.26', '$212load_global.27']
DEBUG:numba.core.byteflow:dispatch pc=216, inst=CALL_FUNCTION(arg=1, lineno=690)
DEBUG:numba.core.byteflow:stack ['$204load_attr.23', '$resid_array206.24', '$210load_method.26', '$212load_global.27', '$resid_array214.28']
DEBUG:numba.core.byteflow:dispatch pc=218, inst=CALL_METHOD(arg=1, lineno=690)
DEBUG:numba.core.byteflow:stack ['$204load_attr.23', '$resid_array206.24', '$210load_method.26', '$216call_function.29']
DEBUG:numba.core.byteflow:dispatch pc=220, inst=STORE_SUBSCR(arg=None, lineno=690)
DEBUG:numba.core.byteflow:stack ['$204load_attr.23', '$resid_array206.24', '$218call_method.30']
DEBUG:numba.core.byteflow:dispatch pc=222, inst=LOAD_GLOBAL(arg=3, lineno=691)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=224, inst=LOAD_METHOD(arg=4, lineno=691)
DEBUG:numba.core.byteflow:stack ['$222load_global.31']
DEBUG:numba.core.byteflow:dispatch pc=226, inst=LOAD_GLOBAL(arg=3, lineno=691)
DEBUG:numba.core.byteflow:stack ['$224load_method.32']
DEBUG:numba.core.byteflow:dispatch pc=228, inst=LOAD_ATTR(arg=14, lineno=691)
DEBUG:numba.core.byteflow:stack ['$224load_method.32', '$226load_global.33']
DEBUG:numba.core.byteflow:dispatch pc=230, inst=LOAD_FAST(arg=6, lineno=691)
DEBUG:numba.core.byteflow:stack ['$224load_method.32', '$228load_attr.34']
DEBUG:numba.core.byteflow:dispatch pc=232, inst=LOAD_CONST(arg=8, lineno=691)
DEBUG:numba.core.byteflow:stack ['$224load_method.32', '$228load_attr.34', '$resid_array230.35']
DEBUG:numba.core.byteflow:dispatch pc=234, inst=LOAD_CONST(arg=7, lineno=691)
DEBUG:numba.core.byteflow:stack ['$224load_method.32', '$228load_attr.34', '$resid_array230.35', '$const232.36']
DEBUG:numba.core.byteflow:dispatch pc=236, inst=CALL_FUNCTION_KW(arg=2, lineno=691)
DEBUG:numba.core.byteflow:stack ['$224load_method.32', '$228load_attr.34', '$resid_array230.35', '$const232.36', '$const234.37']
DEBUG:numba.core.byteflow:dispatch pc=238, inst=CALL_METHOD(arg=1, lineno=691)
DEBUG:numba.core.byteflow:stack ['$224load_method.32', '$236call_function_kw.38']
DEBUG:numba.core.byteflow:dispatch pc=240, inst=LOAD_FAST(arg=4, lineno=691)
DEBUG:numba.core.byteflow:stack ['$238call_method.39']
DEBUG:numba.core.byteflow:dispatch pc=242, inst=LOAD_CONST(arg=6, lineno=691)
DEBUG:numba.core.byteflow:stack ['$238call_method.39', '$stl_features240.40']
DEBUG:numba.core.byteflow:dispatch pc=244, inst=STORE_SUBSCR(arg=None, lineno=691)
DEBUG:numba.core.byteflow:stack ['$238call_method.39', '$stl_features240.40', '$const242.41']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=246, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=246 nstack_initial=0), State(pc_initial=256 nstack_initial=0), State(pc_initial=294 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=256 nstack_initial=0), State(pc_initial=294 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=256, inst=LOAD_FAST(arg=2, lineno=694)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=258, inst=LOAD_METHOD(arg=2, lineno=694)
DEBUG:numba.core.byteflow:stack ['$extra_args256.0']
DEBUG:numba.core.byteflow:dispatch pc=260, inst=LOAD_CONST(arg=9, lineno=694)
DEBUG:numba.core.byteflow:stack ['$258load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=262, inst=LOAD_FAST(arg=3, lineno=694)
DEBUG:numba.core.byteflow:stack ['$258load_method.1', '$const260.2']
DEBUG:numba.core.byteflow:dispatch pc=264, inst=CALL_METHOD(arg=2, lineno=694)
DEBUG:numba.core.byteflow:stack ['$258load_method.1', '$const260.2', '$default_status262.3']
DEBUG:numba.core.byteflow:dispatch pc=266, inst=POP_JUMP_IF_FALSE(arg=294, lineno=694)
DEBUG:numba.core.byteflow:stack ['$264call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=270, stack=(), blockstack=(), npush=0), Edge(pc=294, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=294 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=294 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=294, inst=LOAD_FAST(arg=2, lineno=698)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=296, inst=LOAD_CONST(arg=2, lineno=698)
DEBUG:numba.core.byteflow:stack ['$extra_args294.0']
DEBUG:numba.core.byteflow:dispatch pc=298, inst=COMPARE_OP(arg=9, lineno=698)
DEBUG:numba.core.byteflow:stack ['$extra_args294.0', '$const296.1']
DEBUG:numba.core.byteflow:dispatch pc=300, inst=POP_JUMP_IF_FALSE(arg=342, lineno=698)
DEBUG:numba.core.byteflow:stack ['$298compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=304, stack=(), blockstack=(), npush=0), Edge(pc=342, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=246 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=294 nstack_initial=0), State(pc_initial=304 nstack_initial=0), State(pc_initial=342 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=270 nstack_initial=0), State(pc_initial=294 nstack_initial=0), State(pc_initial=304 nstack_initial=0), State(pc_initial=342 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=695)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=272, inst=LOAD_METHOD(arg=15, lineno=695)
DEBUG:numba.core.byteflow:stack ['$270load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=274, inst=LOAD_FAST(arg=5, lineno=695)
DEBUG:numba.core.byteflow:stack ['$272load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=276, inst=LOAD_ATTR(arg=7, lineno=695)
DEBUG:numba.core.byteflow:stack ['$272load_method.1', '$res274.2']
DEBUG:numba.core.byteflow:dispatch pc=278, inst=LOAD_CONST(arg=2, lineno=695)
DEBUG:numba.core.byteflow:stack ['$272load_method.1', '$276load_attr.3']
DEBUG:numba.core.byteflow:dispatch pc=280, inst=LOAD_FAST(arg=1, lineno=695)
DEBUG:numba.core.byteflow:stack ['$272load_method.1', '$276load_attr.3', '$const278.4']
DEBUG:numba.core.byteflow:dispatch pc=282, inst=BUILD_SLICE(arg=2, lineno=695)
DEBUG:numba.core.byteflow:stack ['$272load_method.1', '$276load_attr.3', '$const278.4', '$period280.5']
DEBUG:numba.core.byteflow:dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=695)
DEBUG:numba.core.byteflow:stack ['$272load_method.1', '$276load_attr.3', '$282build_slice.7']
DEBUG:numba.core.byteflow:dispatch pc=286, inst=CALL_METHOD(arg=1, lineno=695)
DEBUG:numba.core.byteflow:stack ['$272load_method.1', '$284binary_subscr.8']
DEBUG:numba.core.byteflow:dispatch pc=288, inst=LOAD_FAST(arg=4, lineno=695)
DEBUG:numba.core.byteflow:stack ['$286call_method.9']
DEBUG:numba.core.byteflow:dispatch pc=290, inst=LOAD_CONST(arg=9, lineno=695)
DEBUG:numba.core.byteflow:stack ['$286call_method.9', '$stl_features288.10']
DEBUG:numba.core.byteflow:dispatch pc=292, inst=STORE_SUBSCR(arg=None, lineno=695)
DEBUG:numba.core.byteflow:stack ['$286call_method.9', '$stl_features288.10', '$const290.11']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=294, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=294 nstack_initial=0), State(pc_initial=304 nstack_initial=0), State(pc_initial=342 nstack_initial=0), State(pc_initial=294 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=304 nstack_initial=0), State(pc_initial=342 nstack_initial=0), State(pc_initial=294 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=304, inst=LOAD_FAST(arg=2, lineno=698)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=306, inst=LOAD_METHOD(arg=2, lineno=698)
DEBUG:numba.core.byteflow:stack ['$extra_args304.0']
DEBUG:numba.core.byteflow:dispatch pc=308, inst=LOAD_CONST(arg=10, lineno=698)
DEBUG:numba.core.byteflow:stack ['$306load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=310, inst=LOAD_FAST(arg=3, lineno=698)
DEBUG:numba.core.byteflow:stack ['$306load_method.1', '$const308.2']
DEBUG:numba.core.byteflow:dispatch pc=312, inst=CALL_METHOD(arg=2, lineno=698)
DEBUG:numba.core.byteflow:stack ['$306load_method.1', '$const308.2', '$default_status310.3']
DEBUG:numba.core.byteflow:dispatch pc=314, inst=POP_JUMP_IF_FALSE(arg=342, lineno=698)
DEBUG:numba.core.byteflow:stack ['$312call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=318, stack=(), blockstack=(), npush=0), Edge(pc=342, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=342 nstack_initial=0), State(pc_initial=294 nstack_initial=0), State(pc_initial=318 nstack_initial=0), State(pc_initial=342 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=342, inst=LOAD_FAST(arg=4, lineno=701)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=344, inst=RETURN_VALUE(arg=None, lineno=701)
DEBUG:numba.core.byteflow:stack ['$stl_features342.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=294 nstack_initial=0), State(pc_initial=318 nstack_initial=0), State(pc_initial=342 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=318 nstack_initial=0), State(pc_initial=342 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=318, inst=LOAD_GLOBAL(arg=3, lineno=699)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=320, inst=LOAD_METHOD(arg=16, lineno=699)
DEBUG:numba.core.byteflow:stack ['$318load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=322, inst=LOAD_FAST(arg=5, lineno=699)
DEBUG:numba.core.byteflow:stack ['$320load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=324, inst=LOAD_ATTR(arg=7, lineno=699)
DEBUG:numba.core.byteflow:stack ['$320load_method.1', '$res322.2']
DEBUG:numba.core.byteflow:dispatch pc=326, inst=LOAD_CONST(arg=2, lineno=699)
DEBUG:numba.core.byteflow:stack ['$320load_method.1', '$324load_attr.3']
DEBUG:numba.core.byteflow:dispatch pc=328, inst=LOAD_FAST(arg=1, lineno=699)
DEBUG:numba.core.byteflow:stack ['$320load_method.1', '$324load_attr.3', '$const326.4']
DEBUG:numba.core.byteflow:dispatch pc=330, inst=BUILD_SLICE(arg=2, lineno=699)
DEBUG:numba.core.byteflow:stack ['$320load_method.1', '$324load_attr.3', '$const326.4', '$period328.5']
DEBUG:numba.core.byteflow:dispatch pc=332, inst=BINARY_SUBSCR(arg=None, lineno=699)
DEBUG:numba.core.byteflow:stack ['$320load_method.1', '$324load_attr.3', '$330build_slice.7']
DEBUG:numba.core.byteflow:dispatch pc=334, inst=CALL_METHOD(arg=1, lineno=699)
DEBUG:numba.core.byteflow:stack ['$320load_method.1', '$332binary_subscr.8']
DEBUG:numba.core.byteflow:dispatch pc=336, inst=LOAD_FAST(arg=4, lineno=699)
DEBUG:numba.core.byteflow:stack ['$334call_method.9']
DEBUG:numba.core.byteflow:dispatch pc=338, inst=LOAD_CONST(arg=10, lineno=699)
DEBUG:numba.core.byteflow:stack ['$334call_method.9', '$stl_features336.10']
DEBUG:numba.core.byteflow:dispatch pc=340, inst=STORE_SUBSCR(arg=None, lineno=699)
DEBUG:numba.core.byteflow:stack ['$334call_method.9', '$stl_features336.10', '$const338.11']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=342, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=342 nstack_initial=0), State(pc_initial=342 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=342 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=158 nstack_initial=0): set(),
             State(pc_initial=246 nstack_initial=0): set(),
             State(pc_initial=256 nstack_initial=0): set(),
             State(pc_initial=270 nstack_initial=0): set(),
             State(pc_initial=294 nstack_initial=0): set(),
             State(pc_initial=304 nstack_initial=0): set(),
             State(pc_initial=318 nstack_initial=0): set(),
             State(pc_initial=342 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'size': 0, 'res': '$2build_map.0'}), (4, {'value': '$2build_map.0'}), (6, {'res': '$6load_global.1'}), (8, {'res': '$x8.2'}), (10, {'res': '$period10.3'}), (12, {'res': '$const12.4'}), (14, {'func': '$6load_global.1', 'args': ['$x8.2', '$period10.3'], 'names': '$const12.4', 'res': '$14call_function_kw.5'}), (16, {'item': '$14call_function_kw.5', 'res': '$16load_method.6'}), (18, {'func': '$16load_method.6', 'args': [], 'res': '$18call_method.7'}), (20, {'value': '$18call_method.7'}), (22, {'res': '$extra_args22.8'}), (24, {'res': '$const24.9'}), (26, {'lhs': '$extra_args22.8', 'rhs': '$const24.9', 'res': '$26compare_op.10'}), (28, {'pred': '$26compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 80: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$extra_args30.0'}), (32, {'item': '$extra_args30.0', 'res': '$32load_method.1'}), (34, {'res': '$const34.2'}), (36, {'res': '$default_status36.3'}), (38, {'func': '$32load_method.1', 'args': ['$const34.2', '$default_status36.3'], 'res': '$38call_method.4'}), (40, {'pred': '$38call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 80: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$const42.0'}), (44, {'res': '$44load_global.1'}), (46, {'item': '$44load_global.1', 'res': '$46load_method.2'}), (48, {'res': '$res48.3'}), (50, {'item': '$res48.3', 'res': '$50load_attr.4'}), (52, {'func': '$46load_method.2', 'args': ['$50load_attr.4'], 'res': '$52call_method.5'}), (54, {'res': '$54load_global.6'}), (56, {'item': '$54load_global.6', 'res': '$56load_method.7'}), (58, {'res': '$res58.8'}), (60, {'item': '$res58.8', 'res': '$60load_attr.9'}), (62, {'res': '$res62.10'}), (64, {'item': '$res62.10', 'res': '$64load_attr.11'}), (66, {'lhs': '$60load_attr.9', 'rhs': '$64load_attr.11', 'res': '$66binary_add.12'}), (68, {'func': '$56load_method.7', 'args': ['$66binary_add.12'], 'res': '$68call_method.13'}), (70, {'lhs': '$52call_method.5', 'rhs': '$68call_method.13', 'res': '$70binary_true_divide.14'}), (72, {'lhs': '$const42.0', 'rhs': '$70binary_true_divide.14', 'res': '$72binary_subtract.15'}), (74, {'res': '$stl_features74.16'}), (76, {'res': '$const76.17'}), (78, {'target': '$stl_features74.16', 'index': '$const76.17', 'value': '$72binary_subtract.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$extra_args80.0'}), (82, {'res': '$const82.1'}), (84, {'lhs': '$extra_args80.0', 'rhs': '$const82.1', 'res': '$84compare_op.2'}), (86, {'pred': '$84compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 138: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$extra_args88.0'}), (90, {'item': '$extra_args88.0', 'res': '$90load_method.1'}), (92, {'res': '$const92.2'}), (94, {'res': '$default_status94.3'}), (96, {'func': '$90load_method.1', 'args': ['$const92.2', '$default_status94.3'], 'res': '$96call_method.4'}), (98, {'pred': '$96call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={100: (), 138: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=((100, {'res': '$const100.0'}), (102, {'res': '$102load_global.1'}), (104, {'item': '$102load_global.1', 'res': '$104load_method.2'}), (106, {'res': '$res106.3'}), (108, {'item': '$res106.3', 'res': '$108load_attr.4'}), (110, {'func': '$104load_method.2', 'args': ['$108load_attr.4'], 'res': '$110call_method.5'}), (112, {'res': '$112load_global.6'}), (114, {'item': '$112load_global.6', 'res': '$114load_method.7'}), (116, {'res': '$res116.8'}), (118, {'item': '$res116.8', 'res': '$118load_attr.9'}), (120, {'res': '$res120.10'}), (122, {'item': '$res120.10', 'res': '$122load_attr.11'}), (124, {'lhs': '$118load_attr.9', 'rhs': '$122load_attr.11', 'res': '$124binary_add.12'}), (126, {'func': '$114load_method.7', 'args': ['$124binary_add.12'], 'res': '$126call_method.13'}), (128, {'lhs': '$110call_method.5', 'rhs': '$126call_method.13', 'res': '$128binary_true_divide.14'}), (130, {'lhs': '$const100.0', 'rhs': '$128binary_true_divide.14', 'res': '$130binary_subtract.15'}), (132, {'res': '$stl_features132.16'}), (134, {'res': '$const134.17'}), (136, {'target': '$stl_features132.16', 'index': '$const134.17', 'value': '$130binary_subtract.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$extra_args138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$extra_args138.0', 'rhs': '$const140.1', 'res': '$142compare_op.2'}), (144, {'pred': '$142compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 246: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$extra_args146.0'}), (148, {'item': '$extra_args146.0', 'res': '$148load_method.1'}), (150, {'res': '$const150.2'}), (152, {'res': '$default_status152.3'}), (154, {'func': '$148load_method.1', 'args': ['$const150.2', '$default_status152.3'], 'res': '$154call_method.4'}), (156, {'pred': '$154call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={158: (), 246: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=158 nstack_initial=0):
AdaptBlockInfo(insts=((158, {'res': '$158load_global.0'}), (160, {'item': '$158load_global.0', 'res': '$160load_attr.1'}), (162, {'res': '$162load_global.2'}), (164, {'item': '$162load_global.2', 'res': '$164load_method.3'}), (166, {'res': '$res166.4'}), (168, {'item': '$res166.4', 'res': '$168load_attr.5'}), (170, {'func': '$164load_method.3', 'args': ['$168load_attr.5'], 'res': '$170call_method.6'}), (172, {'res': '$const172.7'}), (174, {'res': '$const174.8'}), (176, {'start': '$const172.7', 'stop': '$const174.8', 'step': None, 'res': '$176build_slice.10', 'slicevar': '$176build_slice.9'}), (178, {'res': '$178load_global.11'}), (180, {'item': '$178load_global.11', 'res': '$180load_attr.12'}), (182, {'items': ['$176build_slice.10', '$180load_attr.12'], 'res': '$182build_tuple.13'}), (184, {'index': '$182build_tuple.13', 'target': '$170call_method.6', 'res': '$184binary_subscr.14'}), (186, {'res': '$186load_global.15'}), (188, {'res': '$res188.16'}), (190, {'item': '$res188.16', 'res': '$190load_attr.17'}), (192, {'func': '$186load_global.15', 'args': ['$190load_attr.17'], 'res': '$192call_function.18'}), (194, {'res': '$const194.19'}), (196, {'res': '$const196.20'}), (198, {'func': '$160load_attr.1', 'args': ['$184binary_subscr.14', '$192call_function.18', '$const194.19'], 'names': '$const196.20', 'res': '$198call_function_kw.21'}), (200, {'value': '$198call_function_kw.21'}), (202, {'res': '$202load_global.22'}), (204, {'item': '$202load_global.22', 'res': '$204load_attr.23'}), (206, {'res': '$resid_array206.24'}), (208, {'res': '$208load_global.25'}), (210, {'item': '$208load_global.25', 'res': '$210load_method.26'}), (212, {'res': '$212load_global.27'}), (214, {'res': '$resid_array214.28'}), (216, {'func': '$212load_global.27', 'args': ['$resid_array214.28'], 'res': '$216call_function.29'}), (218, {'func': '$210load_method.26', 'args': ['$216call_function.29'], 'res': '$218call_method.30'}), (220, {'target': '$resid_array206.24', 'index': '$218call_method.30', 'value': '$204load_attr.23'}), (222, {'res': '$222load_global.31'}), (224, {'item': '$222load_global.31', 'res': '$224load_method.32'}), (226, {'res': '$226load_global.33'}), (228, {'item': '$226load_global.33', 'res': '$228load_attr.34'}), (230, {'res': '$resid_array230.35'}), (232, {'res': '$const232.36'}), (234, {'res': '$const234.37'}), (236, {'func': '$228load_attr.34', 'args': ['$resid_array230.35', '$const232.36'], 'names': '$const234.37', 'res': '$236call_function_kw.38'}), (238, {'func': '$224load_method.32', 'args': ['$236call_function_kw.38'], 'res': '$238call_method.39'}), (240, {'res': '$stl_features240.40'}), (242, {'res': '$const242.41'}), (244, {'target': '$stl_features240.40', 'index': '$const242.41', 'value': '$238call_method.39'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={246: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=246 nstack_initial=0):
AdaptBlockInfo(insts=((246, {'res': '$extra_args246.0'}), (248, {'res': '$const248.1'}), (250, {'lhs': '$extra_args246.0', 'rhs': '$const248.1', 'res': '$250compare_op.2'}), (252, {'pred': '$250compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={256: (), 294: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=256 nstack_initial=0):
AdaptBlockInfo(insts=((256, {'res': '$extra_args256.0'}), (258, {'item': '$extra_args256.0', 'res': '$258load_method.1'}), (260, {'res': '$const260.2'}), (262, {'res': '$default_status262.3'}), (264, {'func': '$258load_method.1', 'args': ['$const260.2', '$default_status262.3'], 'res': '$264call_method.4'}), (266, {'pred': '$264call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={270: (), 294: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=270 nstack_initial=0):
AdaptBlockInfo(insts=((270, {'res': '$270load_global.0'}), (272, {'item': '$270load_global.0', 'res': '$272load_method.1'}), (274, {'res': '$res274.2'}), (276, {'item': '$res274.2', 'res': '$276load_attr.3'}), (278, {'res': '$const278.4'}), (280, {'res': '$period280.5'}), (282, {'start': '$const278.4', 'stop': '$period280.5', 'step': None, 'res': '$282build_slice.7', 'slicevar': '$282build_slice.6'}), (284, {'index': '$282build_slice.7', 'target': '$276load_attr.3', 'res': '$284binary_subscr.8'}), (286, {'func': '$272load_method.1', 'args': ['$284binary_subscr.8'], 'res': '$286call_method.9'}), (288, {'res': '$stl_features288.10'}), (290, {'res': '$const290.11'}), (292, {'target': '$stl_features288.10', 'index': '$const290.11', 'value': '$286call_method.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={294: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=294 nstack_initial=0):
AdaptBlockInfo(insts=((294, {'res': '$extra_args294.0'}), (296, {'res': '$const296.1'}), (298, {'lhs': '$extra_args294.0', 'rhs': '$const296.1', 'res': '$298compare_op.2'}), (300, {'pred': '$298compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: (), 342: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=304 nstack_initial=0):
AdaptBlockInfo(insts=((304, {'res': '$extra_args304.0'}), (306, {'item': '$extra_args304.0', 'res': '$306load_method.1'}), (308, {'res': '$const308.2'}), (310, {'res': '$default_status310.3'}), (312, {'func': '$306load_method.1', 'args': ['$const308.2', '$default_status310.3'], 'res': '$312call_method.4'}), (314, {'pred': '$312call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={318: (), 342: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=318 nstack_initial=0):
AdaptBlockInfo(insts=((318, {'res': '$318load_global.0'}), (320, {'item': '$318load_global.0', 'res': '$320load_method.1'}), (322, {'res': '$res322.2'}), (324, {'item': '$res322.2', 'res': '$324load_attr.3'}), (326, {'res': '$const326.4'}), (328, {'res': '$period328.5'}), (330, {'start': '$const326.4', 'stop': '$period328.5', 'step': None, 'res': '$330build_slice.7', 'slicevar': '$330build_slice.6'}), (332, {'index': '$330build_slice.7', 'target': '$324load_attr.3', 'res': '$332binary_subscr.8'}), (334, {'func': '$320load_method.1', 'args': ['$332binary_subscr.8'], 'res': '$334call_method.9'}), (336, {'res': '$stl_features336.10'}), (338, {'res': '$const338.11'}), (340, {'target': '$stl_features336.10', 'index': '$const338.11', 'value': '$334call_method.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={342: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=342 nstack_initial=0):
AdaptBlockInfo(insts=((342, {'res': '$stl_features342.0'}), (344, {'retval': '$stl_features342.0', 'castval': '$344return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    period = arg(1, name=period)             ['period']
    extra_args = arg(2, name=extra_args)     ['extra_args']
    default_status = arg(3, name=default_status) ['default_status']
    stl_features = build_map(items=[], size=0, literal_value={}, value_indexes={}) ['stl_features']
    $6load_global.1 = global(STL: <class 'statsmodels.tsa._stl.STL'>) ['$6load_global.1']
    $14call_function_kw.5 = call $6load_global.1(x, func=$6load_global.1, args=[Var(x, tsfeatures.py:668)], kws=[('period', Var(period, tsfeatures.py:668))], vararg=None) ['$14call_function_kw.5', '$6load_global.1', 'period', 'x']
    $16load_method.6 = getattr(value=$14call_function_kw.5, attr=fit) ['$14call_function_kw.5', '$16load_method.6']
    res = call $16load_method.6(func=$16load_method.6, args=[], kws=(), vararg=None) ['$16load_method.6', 'res']
    $const24.9 = const(NoneType, None)       ['$const24.9']
    $26compare_op.10 = extra_args is not $const24.9 ['$26compare_op.10', '$const24.9', 'extra_args']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.10, func=bool28, args=(Var($26compare_op.10, tsfeatures.py:674),), kws=(), vararg=None) ['$26compare_op.10', '$28pred', 'bool28']
    branch $28pred, 30, 80                   ['$28pred']
label 30:
    $32load_method.1 = getattr(value=extra_args, attr=get) ['$32load_method.1', 'extra_args']
    $const34.2 = const(str, trend_strength)  ['$const34.2']
    $38call_method.4 = call $32load_method.1($const34.2, default_status, func=$32load_method.1, args=[Var($const34.2, tsfeatures.py:674), Var(default_status, tsfeatures.py:668)], kws=(), vararg=None) ['$32load_method.1', '$38call_method.4', '$const34.2', 'default_status']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38call_method.4, func=bool40, args=(Var($38call_method.4, tsfeatures.py:674),), kws=(), vararg=None) ['$38call_method.4', '$40pred', 'bool40']
    branch $40pred, 42, 80                   ['$40pred']
label 42:
    $const42.0 = const(int, 1)               ['$const42.0']
    $44load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$44load_global.1']
    $46load_method.2 = getattr(value=$44load_global.1, attr=var) ['$44load_global.1', '$46load_method.2']
    $50load_attr.4 = getattr(value=res, attr=resid) ['$50load_attr.4', 'res']
    $52call_method.5 = call $46load_method.2($50load_attr.4, func=$46load_method.2, args=[Var($50load_attr.4, tsfeatures.py:675)], kws=(), vararg=None) ['$46load_method.2', '$50load_attr.4', '$52call_method.5']
    $54load_global.6 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$54load_global.6']
    $56load_method.7 = getattr(value=$54load_global.6, attr=var) ['$54load_global.6', '$56load_method.7']
    $60load_attr.9 = getattr(value=res, attr=trend) ['$60load_attr.9', 'res']
    $64load_attr.11 = getattr(value=res, attr=resid) ['$64load_attr.11', 'res']
    $66binary_add.12 = $60load_attr.9 + $64load_attr.11 ['$60load_attr.9', '$64load_attr.11', '$66binary_add.12']
    $68call_method.13 = call $56load_method.7($66binary_add.12, func=$56load_method.7, args=[Var($66binary_add.12, tsfeatures.py:676)], kws=(), vararg=None) ['$56load_method.7', '$66binary_add.12', '$68call_method.13']
    $70binary_true_divide.14 = $52call_method.5 / $68call_method.13 ['$52call_method.5', '$68call_method.13', '$70binary_true_divide.14']
    $72binary_subtract.15 = $const42.0 - $70binary_true_divide.14 ['$70binary_true_divide.14', '$72binary_subtract.15', '$const42.0']
    $const76.17 = const(str, trend_strength) ['$const76.17']
    stl_features[$const76.17] = $72binary_subtract.15 ['$72binary_subtract.15', '$const76.17', 'stl_features']
    jump 80                                  []
label 80:
    $const82.1 = const(NoneType, None)       ['$const82.1']
    $84compare_op.2 = extra_args is not $const82.1 ['$84compare_op.2', '$const82.1', 'extra_args']
    bool86 = global(bool: <class 'bool'>)    ['bool86']
    $86pred = call bool86($84compare_op.2, func=bool86, args=(Var($84compare_op.2, tsfeatures.py:680),), kws=(), vararg=None) ['$84compare_op.2', '$86pred', 'bool86']
    branch $86pred, 88, 138                  ['$86pred']
label 88:
    $90load_method.1 = getattr(value=extra_args, attr=get) ['$90load_method.1', 'extra_args']
    $const92.2 = const(str, seasonality_strength) ['$const92.2']
    $96call_method.4 = call $90load_method.1($const92.2, default_status, func=$90load_method.1, args=[Var($const92.2, tsfeatures.py:680), Var(default_status, tsfeatures.py:668)], kws=(), vararg=None) ['$90load_method.1', '$96call_method.4', '$const92.2', 'default_status']
    bool98 = global(bool: <class 'bool'>)    ['bool98']
    $98pred = call bool98($96call_method.4, func=bool98, args=(Var($96call_method.4, tsfeatures.py:680),), kws=(), vararg=None) ['$96call_method.4', '$98pred', 'bool98']
    branch $98pred, 100, 138                 ['$98pred']
label 100:
    $const100.0 = const(int, 1)              ['$const100.0']
    $102load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$102load_global.1']
    $104load_method.2 = getattr(value=$102load_global.1, attr=var) ['$102load_global.1', '$104load_method.2']
    $108load_attr.4 = getattr(value=res, attr=resid) ['$108load_attr.4', 'res']
    $110call_method.5 = call $104load_method.2($108load_attr.4, func=$104load_method.2, args=[Var($108load_attr.4, tsfeatures.py:681)], kws=(), vararg=None) ['$104load_method.2', '$108load_attr.4', '$110call_method.5']
    $112load_global.6 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$112load_global.6']
    $114load_method.7 = getattr(value=$112load_global.6, attr=var) ['$112load_global.6', '$114load_method.7']
    $118load_attr.9 = getattr(value=res, attr=seasonal) ['$118load_attr.9', 'res']
    $122load_attr.11 = getattr(value=res, attr=resid) ['$122load_attr.11', 'res']
    $124binary_add.12 = $118load_attr.9 + $122load_attr.11 ['$118load_attr.9', '$122load_attr.11', '$124binary_add.12']
    $126call_method.13 = call $114load_method.7($124binary_add.12, func=$114load_method.7, args=[Var($124binary_add.12, tsfeatures.py:682)], kws=(), vararg=None) ['$114load_method.7', '$124binary_add.12', '$126call_method.13']
    $128binary_true_divide.14 = $110call_method.5 / $126call_method.13 ['$110call_method.5', '$126call_method.13', '$128binary_true_divide.14']
    $130binary_subtract.15 = $const100.0 - $128binary_true_divide.14 ['$128binary_true_divide.14', '$130binary_subtract.15', '$const100.0']
    $const134.17 = const(str, seasonality_strength) ['$const134.17']
    stl_features[$const134.17] = $130binary_subtract.15 ['$130binary_subtract.15', '$const134.17', 'stl_features']
    jump 138                                 []
label 138:
    $const140.1 = const(NoneType, None)      ['$const140.1']
    $142compare_op.2 = extra_args is not $const140.1 ['$142compare_op.2', '$const140.1', 'extra_args']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142compare_op.2, func=bool144, args=(Var($142compare_op.2, tsfeatures.py:686),), kws=(), vararg=None) ['$142compare_op.2', '$144pred', 'bool144']
    branch $144pred, 146, 246                ['$144pred']
label 146:
    $148load_method.1 = getattr(value=extra_args, attr=get) ['$148load_method.1', 'extra_args']
    $const150.2 = const(str, spikiness)      ['$const150.2']
    $154call_method.4 = call $148load_method.1($const150.2, default_status, func=$148load_method.1, args=[Var($const150.2, tsfeatures.py:686), Var(default_status, tsfeatures.py:668)], kws=(), vararg=None) ['$148load_method.1', '$154call_method.4', '$const150.2', 'default_status']
    bool156 = global(bool: <class 'bool'>)   ['bool156']
    $156pred = call bool156($154call_method.4, func=bool156, args=(Var($154call_method.4, tsfeatures.py:686),), kws=(), vararg=None) ['$154call_method.4', '$156pred', 'bool156']
    branch $156pred, 158, 246                ['$156pred']
label 158:
    $158load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$158load_global.0']
    $160load_attr.1 = getattr(value=$158load_global.0, attr=repeat) ['$158load_global.0', '$160load_attr.1']
    $162load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$162load_global.2']
    $164load_method.3 = getattr(value=$162load_global.2, attr=array) ['$162load_global.2', '$164load_method.3']
    $168load_attr.5 = getattr(value=res, attr=resid) ['$168load_attr.5', 'res']
    $170call_method.6 = call $164load_method.3($168load_attr.5, func=$164load_method.3, args=[Var($168load_attr.5, tsfeatures.py:688)], kws=(), vararg=None) ['$164load_method.3', '$168load_attr.5', '$170call_method.6']
    $const172.7 = const(NoneType, None)      ['$const172.7']
    $const174.8 = const(NoneType, None)      ['$const174.8']
    $176build_slice.9 = global(slice: <class 'slice'>) ['$176build_slice.9']
    $176build_slice.10 = call $176build_slice.9($const172.7, $const174.8, func=$176build_slice.9, args=(Var($const172.7, tsfeatures.py:688), Var($const174.8, tsfeatures.py:688)), kws=(), vararg=None) ['$176build_slice.10', '$176build_slice.9', '$const172.7', '$const174.8']
    $178load_global.11 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$178load_global.11']
    $180load_attr.12 = getattr(value=$178load_global.11, attr=newaxis) ['$178load_global.11', '$180load_attr.12']
    $182build_tuple.13 = build_tuple(items=[Var($176build_slice.10, tsfeatures.py:688), Var($180load_attr.12, tsfeatures.py:688)]) ['$176build_slice.10', '$180load_attr.12', '$182build_tuple.13']
    $184binary_subscr.14 = getitem(value=$170call_method.6, index=$182build_tuple.13, fn=<built-in function getitem>) ['$170call_method.6', '$182build_tuple.13', '$184binary_subscr.14']
    $186load_global.15 = global(len: <built-in function len>) ['$186load_global.15']
    $190load_attr.17 = getattr(value=res, attr=resid) ['$190load_attr.17', 'res']
    $192call_function.18 = call $186load_global.15($190load_attr.17, func=$186load_global.15, args=[Var($190load_attr.17, tsfeatures.py:688)], kws=(), vararg=None) ['$186load_global.15', '$190load_attr.17', '$192call_function.18']
    $const194.19 = const(int, 1)             ['$const194.19']
    resid_array = call $160load_attr.1($184binary_subscr.14, $192call_function.18, func=$160load_attr.1, args=[Var($184binary_subscr.14, tsfeatures.py:688), Var($192call_function.18, tsfeatures.py:688)], kws=[('axis', Var($const194.19, tsfeatures.py:688))], vararg=None) ['$160load_attr.1', '$184binary_subscr.14', '$192call_function.18', '$const194.19', 'resid_array']
    $202load_global.22 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$202load_global.22']
    $204load_attr.23 = getattr(value=$202load_global.22, attr=NaN) ['$202load_global.22', '$204load_attr.23']
    $208load_global.25 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$208load_global.25']
    $210load_method.26 = getattr(value=$208load_global.25, attr=diag_indices) ['$208load_global.25', '$210load_method.26']
    $212load_global.27 = global(len: <built-in function len>) ['$212load_global.27']
    $216call_function.29 = call $212load_global.27(resid_array, func=$212load_global.27, args=[Var(resid_array, tsfeatures.py:687)], kws=(), vararg=None) ['$212load_global.27', '$216call_function.29', 'resid_array']
    $218call_method.30 = call $210load_method.26($216call_function.29, func=$210load_method.26, args=[Var($216call_function.29, tsfeatures.py:690)], kws=(), vararg=None) ['$210load_method.26', '$216call_function.29', '$218call_method.30']
    resid_array[$218call_method.30] = $204load_attr.23 ['$204load_attr.23', '$218call_method.30', 'resid_array']
    $222load_global.31 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$222load_global.31']
    $224load_method.32 = getattr(value=$222load_global.31, attr=var) ['$222load_global.31', '$224load_method.32']
    $226load_global.33 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$226load_global.33']
    $228load_attr.34 = getattr(value=$226load_global.33, attr=nanvar) ['$226load_global.33', '$228load_attr.34']
    $const232.36 = const(int, 0)             ['$const232.36']
    $236call_function_kw.38 = call $228load_attr.34(resid_array, func=$228load_attr.34, args=[Var(resid_array, tsfeatures.py:687)], kws=[('axis', Var($const232.36, tsfeatures.py:691))], vararg=None) ['$228load_attr.34', '$236call_function_kw.38', '$const232.36', 'resid_array']
    $238call_method.39 = call $224load_method.32($236call_function_kw.38, func=$224load_method.32, args=[Var($236call_function_kw.38, tsfeatures.py:691)], kws=(), vararg=None) ['$224load_method.32', '$236call_function_kw.38', '$238call_method.39']
    $const242.41 = const(str, spikiness)     ['$const242.41']
    stl_features[$const242.41] = $238call_method.39 ['$238call_method.39', '$const242.41', 'stl_features']
    jump 246                                 []
label 246:
    $const248.1 = const(NoneType, None)      ['$const248.1']
    $250compare_op.2 = extra_args is not $const248.1 ['$250compare_op.2', '$const248.1', 'extra_args']
    bool252 = global(bool: <class 'bool'>)   ['bool252']
    $252pred = call bool252($250compare_op.2, func=bool252, args=(Var($250compare_op.2, tsfeatures.py:694),), kws=(), vararg=None) ['$250compare_op.2', '$252pred', 'bool252']
    branch $252pred, 256, 294                ['$252pred']
label 256:
    $258load_method.1 = getattr(value=extra_args, attr=get) ['$258load_method.1', 'extra_args']
    $const260.2 = const(str, peak)           ['$const260.2']
    $264call_method.4 = call $258load_method.1($const260.2, default_status, func=$258load_method.1, args=[Var($const260.2, tsfeatures.py:694), Var(default_status, tsfeatures.py:668)], kws=(), vararg=None) ['$258load_method.1', '$264call_method.4', '$const260.2', 'default_status']
    bool266 = global(bool: <class 'bool'>)   ['bool266']
    $266pred = call bool266($264call_method.4, func=bool266, args=(Var($264call_method.4, tsfeatures.py:694),), kws=(), vararg=None) ['$264call_method.4', '$266pred', 'bool266']
    branch $266pred, 270, 294                ['$266pred']
label 270:
    $270load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$270load_global.0']
    $272load_method.1 = getattr(value=$270load_global.0, attr=argmax) ['$270load_global.0', '$272load_method.1']
    $276load_attr.3 = getattr(value=res, attr=seasonal) ['$276load_attr.3', 'res']
    $const278.4 = const(NoneType, None)      ['$const278.4']
    $282build_slice.6 = global(slice: <class 'slice'>) ['$282build_slice.6']
    $282build_slice.7 = call $282build_slice.6($const278.4, period, func=$282build_slice.6, args=(Var($const278.4, tsfeatures.py:695), Var(period, tsfeatures.py:668)), kws=(), vararg=None) ['$282build_slice.6', '$282build_slice.7', '$const278.4', 'period']
    $284binary_subscr.8 = getitem(value=$276load_attr.3, index=$282build_slice.7, fn=<built-in function getitem>) ['$276load_attr.3', '$282build_slice.7', '$284binary_subscr.8']
    $286call_method.9 = call $272load_method.1($284binary_subscr.8, func=$272load_method.1, args=[Var($284binary_subscr.8, tsfeatures.py:695)], kws=(), vararg=None) ['$272load_method.1', '$284binary_subscr.8', '$286call_method.9']
    $const290.11 = const(str, peak)          ['$const290.11']
    stl_features[$const290.11] = $286call_method.9 ['$286call_method.9', '$const290.11', 'stl_features']
    jump 294                                 []
label 294:
    $const296.1 = const(NoneType, None)      ['$const296.1']
    $298compare_op.2 = extra_args is not $const296.1 ['$298compare_op.2', '$const296.1', 'extra_args']
    bool300 = global(bool: <class 'bool'>)   ['bool300']
    $300pred = call bool300($298compare_op.2, func=bool300, args=(Var($298compare_op.2, tsfeatures.py:698),), kws=(), vararg=None) ['$298compare_op.2', '$300pred', 'bool300']
    branch $300pred, 304, 342                ['$300pred']
label 304:
    $306load_method.1 = getattr(value=extra_args, attr=get) ['$306load_method.1', 'extra_args']
    $const308.2 = const(str, trough)         ['$const308.2']
    $312call_method.4 = call $306load_method.1($const308.2, default_status, func=$306load_method.1, args=[Var($const308.2, tsfeatures.py:698), Var(default_status, tsfeatures.py:668)], kws=(), vararg=None) ['$306load_method.1', '$312call_method.4', '$const308.2', 'default_status']
    bool314 = global(bool: <class 'bool'>)   ['bool314']
    $314pred = call bool314($312call_method.4, func=bool314, args=(Var($312call_method.4, tsfeatures.py:698),), kws=(), vararg=None) ['$312call_method.4', '$314pred', 'bool314']
    branch $314pred, 318, 342                ['$314pred']
label 318:
    $318load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$318load_global.0']
    $320load_method.1 = getattr(value=$318load_global.0, attr=argmin) ['$318load_global.0', '$320load_method.1']
    $324load_attr.3 = getattr(value=res, attr=seasonal) ['$324load_attr.3', 'res']
    $const326.4 = const(NoneType, None)      ['$const326.4']
    $330build_slice.6 = global(slice: <class 'slice'>) ['$330build_slice.6']
    $330build_slice.7 = call $330build_slice.6($const326.4, period, func=$330build_slice.6, args=(Var($const326.4, tsfeatures.py:699), Var(period, tsfeatures.py:668)), kws=(), vararg=None) ['$330build_slice.6', '$330build_slice.7', '$const326.4', 'period']
    $332binary_subscr.8 = getitem(value=$324load_attr.3, index=$330build_slice.7, fn=<built-in function getitem>) ['$324load_attr.3', '$330build_slice.7', '$332binary_subscr.8']
    $334call_method.9 = call $320load_method.1($332binary_subscr.8, func=$320load_method.1, args=[Var($332binary_subscr.8, tsfeatures.py:699)], kws=(), vararg=None) ['$320load_method.1', '$332binary_subscr.8', '$334call_method.9']
    $const338.11 = const(str, trough)        ['$const338.11']
    stl_features[$const338.11] = $334call_method.9 ['$334call_method.9', '$const338.11', 'stl_features']
    jump 342                                 []
label 342:
    $344return_value.1 = cast(value=stl_features) ['$344return_value.1', 'stl_features']
    return $344return_value.1                ['$344return_value.1']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=731)
           2	LOAD_GLOBAL(arg=0, lineno=731)
           4	LOAD_ATTR(arg=1, lineno=731)
           6	LOAD_GLOBAL(arg=0, lineno=731)
           8	LOAD_ATTR(arg=1, lineno=731)
          10	LOAD_CONST(arg=1, lineno=731)
          12	BUILD_CONST_KEY_MAP(arg=2, lineno=731)
          14	STORE_FAST(arg=4, lineno=731)
          16	LOAD_GLOBAL(arg=2, lineno=732)
          18	LOAD_FAST(arg=0, lineno=732)
          20	CALL_FUNCTION(arg=1, lineno=732)
          22	LOAD_FAST(arg=1, lineno=732)
          24	LOAD_CONST(arg=2, lineno=732)
          26	BINARY_ADD(arg=None, lineno=732)
          28	COMPARE_OP(arg=0, lineno=732)
          30	POP_JUMP_IF_FALSE(arg=50, lineno=732)
          32	LOAD_CONST(arg=3, lineno=733)
          34	STORE_FAST(arg=5, lineno=733)
          36	LOAD_GLOBAL(arg=3, lineno=734)
          38	LOAD_METHOD(arg=4, lineno=734)
          40	LOAD_FAST(arg=5, lineno=734)
          42	CALL_METHOD(arg=1, lineno=734)
          44	POP_TOP(arg=None, lineno=734)
          46	LOAD_FAST(arg=4, lineno=735)
          48	RETURN_VALUE(arg=None, lineno=735)
>         50	LOAD_GLOBAL(arg=0, lineno=737)
          52	LOAD_METHOD(arg=5, lineno=737)
          54	LOAD_GLOBAL(arg=2, lineno=737)
          56	LOAD_FAST(arg=0, lineno=737)
          58	CALL_FUNCTION(arg=1, lineno=737)
          60	CALL_METHOD(arg=1, lineno=737)
          62	LOAD_CONST(arg=4, lineno=737)
          64	LOAD_CONST(arg=4, lineno=737)
          66	LOAD_CONST(arg=4, lineno=737)
          68	BUILD_SLICE(arg=2, lineno=737)
          70	BUILD_TUPLE(arg=2, lineno=737)
          72	BINARY_SUBSCR(arg=None, lineno=737)
          74	LOAD_GLOBAL(arg=0, lineno=737)
          76	LOAD_METHOD(arg=5, lineno=737)
          78	LOAD_FAST(arg=1, lineno=737)
          80	CALL_METHOD(arg=1, lineno=737)
          82	LOAD_CONST(arg=4, lineno=737)
          84	LOAD_CONST(arg=4, lineno=737)
          86	BUILD_SLICE(arg=2, lineno=737)
          88	LOAD_CONST(arg=4, lineno=737)
          90	BUILD_TUPLE(arg=2, lineno=737)
          92	BINARY_SUBSCR(arg=None, lineno=737)
          94	BINARY_ADD(arg=None, lineno=737)
          96	LOAD_CONST(arg=4, lineno=737)
          98	LOAD_CONST(arg=4, lineno=737)
         100	BUILD_SLICE(arg=2, lineno=737)
         102	LOAD_CONST(arg=4, lineno=737)
         104	LOAD_GLOBAL(arg=2, lineno=738)
         106	LOAD_FAST(arg=0, lineno=738)
         108	CALL_FUNCTION(arg=1, lineno=738)
         110	LOAD_FAST(arg=1, lineno=738)
         112	BINARY_SUBTRACT(arg=None, lineno=738)
         114	LOAD_CONST(arg=5, lineno=738)
         116	BINARY_ADD(arg=None, lineno=738)
         118	BUILD_SLICE(arg=2, lineno=737)
         120	BUILD_TUPLE(arg=2, lineno=737)
         122	BINARY_SUBSCR(arg=None, lineno=737)
         124	STORE_FAST(arg=6, lineno=737)
         126	LOAD_GLOBAL(arg=0, lineno=740)
         128	LOAD_ATTR(arg=6, lineno=740)
         130	LOAD_FAST(arg=0, lineno=740)
         132	LOAD_FAST(arg=6, lineno=740)
         134	BINARY_SUBSCR(arg=None, lineno=740)
         136	LOAD_CONST(arg=6, lineno=740)
         138	LOAD_CONST(arg=7, lineno=740)
         140	CALL_FUNCTION_KW(arg=2, lineno=740)
         142	STORE_FAST(arg=7, lineno=740)
         144	LOAD_GLOBAL(arg=0, lineno=741)
         146	LOAD_METHOD(arg=7, lineno=741)
         148	LOAD_FAST(arg=7, lineno=741)
         150	LOAD_CONST(arg=4, lineno=741)
         152	LOAD_CONST(arg=8, lineno=741)
         154	BUILD_SLICE(arg=2, lineno=741)
         156	BINARY_SUBSCR(arg=None, lineno=741)
         158	LOAD_FAST(arg=7, lineno=741)
         160	LOAD_CONST(arg=5, lineno=741)
         162	LOAD_CONST(arg=4, lineno=741)
         164	BUILD_SLICE(arg=2, lineno=741)
         166	BINARY_SUBSCR(arg=None, lineno=741)
         168	BINARY_SUBTRACT(arg=None, lineno=741)
         170	CALL_METHOD(arg=1, lineno=741)
         172	STORE_FAST(arg=8, lineno=741)
         174	LOAD_FAST(arg=2, lineno=743)
         176	LOAD_CONST(arg=4, lineno=743)
         178	COMPARE_OP(arg=9, lineno=743)
         180	POP_JUMP_IF_FALSE(arg=208, lineno=743)
         182	LOAD_FAST(arg=2, lineno=743)
         184	LOAD_METHOD(arg=8, lineno=743)
         186	LOAD_CONST(arg=9, lineno=743)
         188	LOAD_FAST(arg=3, lineno=743)
         190	CALL_METHOD(arg=2, lineno=743)
         192	POP_JUMP_IF_FALSE(arg=208, lineno=743)
         194	LOAD_GLOBAL(arg=0, lineno=744)
         196	LOAD_METHOD(arg=9, lineno=744)
         198	LOAD_FAST(arg=8, lineno=744)
         200	CALL_METHOD(arg=1, lineno=744)
         202	LOAD_FAST(arg=4, lineno=744)
         204	LOAD_CONST(arg=9, lineno=744)
         206	STORE_SUBSCR(arg=None, lineno=744)
>        208	LOAD_FAST(arg=2, lineno=745)
         210	LOAD_CONST(arg=4, lineno=745)
         212	COMPARE_OP(arg=9, lineno=745)
         214	POP_JUMP_IF_FALSE(arg=246, lineno=745)
         216	LOAD_FAST(arg=2, lineno=745)
         218	LOAD_METHOD(arg=8, lineno=745)
         220	LOAD_CONST(arg=10, lineno=745)
         222	LOAD_FAST(arg=3, lineno=745)
         224	CALL_METHOD(arg=2, lineno=745)
         226	POP_JUMP_IF_FALSE(arg=246, lineno=745)
         228	LOAD_FAST(arg=8, lineno=746)
         230	LOAD_GLOBAL(arg=0, lineno=746)
         232	LOAD_METHOD(arg=9, lineno=746)
         234	LOAD_FAST(arg=8, lineno=746)
         236	CALL_METHOD(arg=1, lineno=746)
         238	BINARY_SUBSCR(arg=None, lineno=746)
         240	LOAD_FAST(arg=4, lineno=746)
         242	LOAD_CONST(arg=10, lineno=746)
         244	STORE_SUBSCR(arg=None, lineno=746)
>        246	LOAD_FAST(arg=4, lineno=747)
         248	RETURN_VALUE(arg=None, lineno=747)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=731)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=731)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=731)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=731)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=731)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=731)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=BUILD_CONST_KEY_MAP(arg=2, lineno=731)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$const10.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=STORE_FAST(arg=4, lineno=731)
DEBUG:numba.core.byteflow:stack ['$12build_const_key_map.7']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=732)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=732)
DEBUG:numba.core.byteflow:stack ['$16load_global.8']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=732)
DEBUG:numba.core.byteflow:stack ['$16load_global.8', '$x18.9']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=732)
DEBUG:numba.core.byteflow:stack ['$20call_function.10']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=732)
DEBUG:numba.core.byteflow:stack ['$20call_function.10', '$window_size22.11']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_ADD(arg=None, lineno=732)
DEBUG:numba.core.byteflow:stack ['$20call_function.10', '$window_size22.11', '$const24.12']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=COMPARE_OP(arg=0, lineno=732)
DEBUG:numba.core.byteflow:stack ['$20call_function.10', '$26binary_add.13']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=50, lineno=732)
DEBUG:numba.core.byteflow:stack ['$28compare_op.14']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=733)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=5, lineno=733)
DEBUG:numba.core.byteflow:stack ['$const32.0']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_GLOBAL(arg=3, lineno=734)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_METHOD(arg=4, lineno=734)
DEBUG:numba.core.byteflow:stack ['$36load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=5, lineno=734)
DEBUG:numba.core.byteflow:stack ['$38load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=CALL_METHOD(arg=1, lineno=734)
DEBUG:numba.core.byteflow:stack ['$38load_method.2', '$msg40.3']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=POP_TOP(arg=None, lineno=734)
DEBUG:numba.core.byteflow:stack ['$42call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=4, lineno=735)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=735)
DEBUG:numba.core.byteflow:stack ['$level_shift_features46.5']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=50 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=737)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_METHOD(arg=5, lineno=737)
DEBUG:numba.core.byteflow:stack ['$50load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=737)
DEBUG:numba.core.byteflow:stack ['$52load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=0, lineno=737)
DEBUG:numba.core.byteflow:stack ['$52load_method.1', '$54load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=CALL_FUNCTION(arg=1, lineno=737)
DEBUG:numba.core.byteflow:stack ['$52load_method.1', '$54load_global.2', '$x56.3']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=CALL_METHOD(arg=1, lineno=737)
DEBUG:numba.core.byteflow:stack ['$52load_method.1', '$58call_function.4']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_CONST(arg=4, lineno=737)
DEBUG:numba.core.byteflow:stack ['$60call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_CONST(arg=4, lineno=737)
DEBUG:numba.core.byteflow:stack ['$60call_method.5', '$const62.6']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_CONST(arg=4, lineno=737)
DEBUG:numba.core.byteflow:stack ['$60call_method.5', '$const62.6', '$const64.7']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=BUILD_SLICE(arg=2, lineno=737)
DEBUG:numba.core.byteflow:stack ['$60call_method.5', '$const62.6', '$const64.7', '$const66.8']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BUILD_TUPLE(arg=2, lineno=737)
DEBUG:numba.core.byteflow:stack ['$60call_method.5', '$const62.6', '$68build_slice.10']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=737)
DEBUG:numba.core.byteflow:stack ['$60call_method.5', '$70build_tuple.11']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_GLOBAL(arg=0, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_METHOD(arg=5, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12', '$74load_global.13']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12', '$76load_method.14']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=CALL_METHOD(arg=1, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12', '$76load_method.14', '$window_size78.15']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_CONST(arg=4, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12', '$80call_method.16']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_CONST(arg=4, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12', '$80call_method.16', '$const82.17']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=BUILD_SLICE(arg=2, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12', '$80call_method.16', '$const82.17', '$const84.18']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=4, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12', '$80call_method.16', '$86build_slice.20']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=BUILD_TUPLE(arg=2, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12', '$80call_method.16', '$86build_slice.20', '$const88.21']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=BINARY_SUBSCR(arg=None, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12', '$80call_method.16', '$90build_tuple.22']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=BINARY_ADD(arg=None, lineno=737)
DEBUG:numba.core.byteflow:stack ['$72binary_subscr.12', '$92binary_subscr.23']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=LOAD_CONST(arg=4, lineno=737)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_CONST(arg=4, lineno=737)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$const96.25']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=BUILD_SLICE(arg=2, lineno=737)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$const96.25', '$const98.26']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_CONST(arg=4, lineno=737)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$100build_slice.28']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_GLOBAL(arg=2, lineno=738)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$100build_slice.28', '$const102.29']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=0, lineno=738)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$100build_slice.28', '$const102.29', '$104load_global.30']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=CALL_FUNCTION(arg=1, lineno=738)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$100build_slice.28', '$const102.29', '$104load_global.30', '$x106.31']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=738)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$100build_slice.28', '$const102.29', '$108call_function.32']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=BINARY_SUBTRACT(arg=None, lineno=738)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$100build_slice.28', '$const102.29', '$108call_function.32', '$window_size110.33']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_CONST(arg=5, lineno=738)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$100build_slice.28', '$const102.29', '$112binary_subtract.34']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=BINARY_ADD(arg=None, lineno=738)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$100build_slice.28', '$const102.29', '$112binary_subtract.34', '$const114.35']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=BUILD_SLICE(arg=2, lineno=737)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$100build_slice.28', '$const102.29', '$116binary_add.36']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=BUILD_TUPLE(arg=2, lineno=737)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$100build_slice.28', '$118build_slice.38']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=BINARY_SUBSCR(arg=None, lineno=737)
DEBUG:numba.core.byteflow:stack ['$94binary_add.24', '$120build_tuple.39']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=STORE_FAST(arg=6, lineno=737)
DEBUG:numba.core.byteflow:stack ['$122binary_subscr.40']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=LOAD_GLOBAL(arg=0, lineno=740)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=128, inst=LOAD_ATTR(arg=6, lineno=740)
DEBUG:numba.core.byteflow:stack ['$126load_global.41']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_FAST(arg=0, lineno=740)
DEBUG:numba.core.byteflow:stack ['$128load_attr.42']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_FAST(arg=6, lineno=740)
DEBUG:numba.core.byteflow:stack ['$128load_attr.42', '$x130.43']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=BINARY_SUBSCR(arg=None, lineno=740)
DEBUG:numba.core.byteflow:stack ['$128load_attr.42', '$x130.43', '$sliding_idx132.44']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=LOAD_CONST(arg=6, lineno=740)
DEBUG:numba.core.byteflow:stack ['$128load_attr.42', '$134binary_subscr.45']
DEBUG:numba.core.byteflow:dispatch pc=138, inst=LOAD_CONST(arg=7, lineno=740)
DEBUG:numba.core.byteflow:stack ['$128load_attr.42', '$134binary_subscr.45', '$const136.46']
DEBUG:numba.core.byteflow:dispatch pc=140, inst=CALL_FUNCTION_KW(arg=2, lineno=740)
DEBUG:numba.core.byteflow:stack ['$128load_attr.42', '$134binary_subscr.45', '$const136.46', '$const138.47']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=STORE_FAST(arg=7, lineno=740)
DEBUG:numba.core.byteflow:stack ['$140call_function_kw.48']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=LOAD_GLOBAL(arg=0, lineno=741)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_METHOD(arg=7, lineno=741)
DEBUG:numba.core.byteflow:stack ['$144load_global.49']
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=7, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=LOAD_CONST(arg=4, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$means148.51']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=LOAD_CONST(arg=8, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$means148.51', '$const150.52']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=BUILD_SLICE(arg=2, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$means148.51', '$const150.52', '$const152.53']
DEBUG:numba.core.byteflow:dispatch pc=156, inst=BINARY_SUBSCR(arg=None, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$means148.51', '$154build_slice.55']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=LOAD_FAST(arg=7, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$156binary_subscr.56']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=LOAD_CONST(arg=5, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$156binary_subscr.56', '$means158.57']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$156binary_subscr.56', '$means158.57', '$const160.58']
DEBUG:numba.core.byteflow:dispatch pc=164, inst=BUILD_SLICE(arg=2, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$156binary_subscr.56', '$means158.57', '$const160.58', '$const162.59']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$156binary_subscr.56', '$means158.57', '$164build_slice.61']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=BINARY_SUBTRACT(arg=None, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$156binary_subscr.56', '$166binary_subscr.62']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=CALL_METHOD(arg=1, lineno=741)
DEBUG:numba.core.byteflow:stack ['$146load_method.50', '$168binary_subtract.63']
DEBUG:numba.core.byteflow:dispatch pc=172, inst=STORE_FAST(arg=8, lineno=741)
DEBUG:numba.core.byteflow:stack ['$170call_method.64']
DEBUG:numba.core.byteflow:dispatch pc=174, inst=LOAD_FAST(arg=2, lineno=743)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=176, inst=LOAD_CONST(arg=4, lineno=743)
DEBUG:numba.core.byteflow:stack ['$extra_args174.65']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=COMPARE_OP(arg=9, lineno=743)
DEBUG:numba.core.byteflow:stack ['$extra_args174.65', '$const176.66']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=POP_JUMP_IF_FALSE(arg=208, lineno=743)
DEBUG:numba.core.byteflow:stack ['$178compare_op.67']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=182, stack=(), blockstack=(), npush=0), Edge(pc=208, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=208 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=182, inst=LOAD_FAST(arg=2, lineno=743)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=184, inst=LOAD_METHOD(arg=8, lineno=743)
DEBUG:numba.core.byteflow:stack ['$extra_args182.0']
DEBUG:numba.core.byteflow:dispatch pc=186, inst=LOAD_CONST(arg=9, lineno=743)
DEBUG:numba.core.byteflow:stack ['$184load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=743)
DEBUG:numba.core.byteflow:stack ['$184load_method.1', '$const186.2']
DEBUG:numba.core.byteflow:dispatch pc=190, inst=CALL_METHOD(arg=2, lineno=743)
DEBUG:numba.core.byteflow:stack ['$184load_method.1', '$const186.2', '$default_status188.3']
DEBUG:numba.core.byteflow:dispatch pc=192, inst=POP_JUMP_IF_FALSE(arg=208, lineno=743)
DEBUG:numba.core.byteflow:stack ['$190call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=194, stack=(), blockstack=(), npush=0), Edge(pc=208, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=208 nstack_initial=0), State(pc_initial=194 nstack_initial=0), State(pc_initial=208 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=208, inst=LOAD_FAST(arg=2, lineno=745)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=210, inst=LOAD_CONST(arg=4, lineno=745)
DEBUG:numba.core.byteflow:stack ['$extra_args208.0']
DEBUG:numba.core.byteflow:dispatch pc=212, inst=COMPARE_OP(arg=9, lineno=745)
DEBUG:numba.core.byteflow:stack ['$extra_args208.0', '$const210.1']
DEBUG:numba.core.byteflow:dispatch pc=214, inst=POP_JUMP_IF_FALSE(arg=246, lineno=745)
DEBUG:numba.core.byteflow:stack ['$212compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=216, stack=(), blockstack=(), npush=0), Edge(pc=246, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=194 nstack_initial=0), State(pc_initial=208 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=194, inst=LOAD_GLOBAL(arg=0, lineno=744)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=196, inst=LOAD_METHOD(arg=9, lineno=744)
DEBUG:numba.core.byteflow:stack ['$194load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=198, inst=LOAD_FAST(arg=8, lineno=744)
DEBUG:numba.core.byteflow:stack ['$196load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=200, inst=CALL_METHOD(arg=1, lineno=744)
DEBUG:numba.core.byteflow:stack ['$196load_method.1', '$mean_diff198.2']
DEBUG:numba.core.byteflow:dispatch pc=202, inst=LOAD_FAST(arg=4, lineno=744)
DEBUG:numba.core.byteflow:stack ['$200call_method.3']
DEBUG:numba.core.byteflow:dispatch pc=204, inst=LOAD_CONST(arg=9, lineno=744)
DEBUG:numba.core.byteflow:stack ['$200call_method.3', '$level_shift_features202.4']
DEBUG:numba.core.byteflow:dispatch pc=206, inst=STORE_SUBSCR(arg=None, lineno=744)
DEBUG:numba.core.byteflow:stack ['$200call_method.3', '$level_shift_features202.4', '$const204.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=208, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=208 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=208 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=216 nstack_initial=0), State(pc_initial=246 nstack_initial=0), State(pc_initial=208 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=216, inst=LOAD_FAST(arg=2, lineno=745)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=218, inst=LOAD_METHOD(arg=8, lineno=745)
DEBUG:numba.core.byteflow:stack ['$extra_args216.0']
DEBUG:numba.core.byteflow:dispatch pc=220, inst=LOAD_CONST(arg=10, lineno=745)
DEBUG:numba.core.byteflow:stack ['$218load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=222, inst=LOAD_FAST(arg=3, lineno=745)
DEBUG:numba.core.byteflow:stack ['$218load_method.1', '$const220.2']
DEBUG:numba.core.byteflow:dispatch pc=224, inst=CALL_METHOD(arg=2, lineno=745)
DEBUG:numba.core.byteflow:stack ['$218load_method.1', '$const220.2', '$default_status222.3']
DEBUG:numba.core.byteflow:dispatch pc=226, inst=POP_JUMP_IF_FALSE(arg=246, lineno=745)
DEBUG:numba.core.byteflow:stack ['$224call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=228, stack=(), blockstack=(), npush=0), Edge(pc=246, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=246 nstack_initial=0), State(pc_initial=208 nstack_initial=0), State(pc_initial=228 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=246, inst=LOAD_FAST(arg=4, lineno=747)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=248, inst=RETURN_VALUE(arg=None, lineno=747)
DEBUG:numba.core.byteflow:stack ['$level_shift_features246.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=208 nstack_initial=0), State(pc_initial=228 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=228 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=228, inst=LOAD_FAST(arg=8, lineno=746)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=230, inst=LOAD_GLOBAL(arg=0, lineno=746)
DEBUG:numba.core.byteflow:stack ['$mean_diff228.0']
DEBUG:numba.core.byteflow:dispatch pc=232, inst=LOAD_METHOD(arg=9, lineno=746)
DEBUG:numba.core.byteflow:stack ['$mean_diff228.0', '$230load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=234, inst=LOAD_FAST(arg=8, lineno=746)
DEBUG:numba.core.byteflow:stack ['$mean_diff228.0', '$232load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=236, inst=CALL_METHOD(arg=1, lineno=746)
DEBUG:numba.core.byteflow:stack ['$mean_diff228.0', '$232load_method.2', '$mean_diff234.3']
DEBUG:numba.core.byteflow:dispatch pc=238, inst=BINARY_SUBSCR(arg=None, lineno=746)
DEBUG:numba.core.byteflow:stack ['$mean_diff228.0', '$236call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=240, inst=LOAD_FAST(arg=4, lineno=746)
DEBUG:numba.core.byteflow:stack ['$238binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=242, inst=LOAD_CONST(arg=10, lineno=746)
DEBUG:numba.core.byteflow:stack ['$238binary_subscr.5', '$level_shift_features240.6']
DEBUG:numba.core.byteflow:dispatch pc=244, inst=STORE_SUBSCR(arg=None, lineno=746)
DEBUG:numba.core.byteflow:stack ['$238binary_subscr.5', '$level_shift_features240.6', '$const242.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=246, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=246 nstack_initial=0), State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=246 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=194 nstack_initial=0): set(),
             State(pc_initial=208 nstack_initial=0): set(),
             State(pc_initial=216 nstack_initial=0): set(),
             State(pc_initial=228 nstack_initial=0): set(),
             State(pc_initial=246 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_attr.3'}), (10, {'res': '$const10.4'}), (12, {'keys': '$const10.4', 'keytmps': ['$12build_const_key_map.5', '$12build_const_key_map.6'], 'values': ['$4load_attr.1', '$8load_attr.3'], 'res': '$12build_const_key_map.7'}), (14, {'value': '$12build_const_key_map.7'}), (16, {'res': '$16load_global.8'}), (18, {'res': '$x18.9'}), (20, {'func': '$16load_global.8', 'args': ['$x18.9'], 'res': '$20call_function.10'}), (22, {'res': '$window_size22.11'}), (24, {'res': '$const24.12'}), (26, {'lhs': '$window_size22.11', 'rhs': '$const24.12', 'res': '$26binary_add.13'}), (28, {'lhs': '$20call_function.10', 'rhs': '$26binary_add.13', 'res': '$28compare_op.14'}), (30, {'pred': '$28compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 50: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$const32.0'}), (34, {'value': '$const32.0'}), (36, {'res': '$36load_global.1'}), (38, {'item': '$36load_global.1', 'res': '$38load_method.2'}), (40, {'res': '$msg40.3'}), (42, {'func': '$38load_method.2', 'args': ['$msg40.3'], 'res': '$42call_method.4'}), (46, {'res': '$level_shift_features46.5'}), (48, {'retval': '$level_shift_features46.5', 'castval': '$48return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.0'}), (52, {'item': '$50load_global.0', 'res': '$52load_method.1'}), (54, {'res': '$54load_global.2'}), (56, {'res': '$x56.3'}), (58, {'func': '$54load_global.2', 'args': ['$x56.3'], 'res': '$58call_function.4'}), (60, {'func': '$52load_method.1', 'args': ['$58call_function.4'], 'res': '$60call_method.5'}), (62, {'res': '$const62.6'}), (64, {'res': '$const64.7'}), (66, {'res': '$const66.8'}), (68, {'start': '$const64.7', 'stop': '$const66.8', 'step': None, 'res': '$68build_slice.10', 'slicevar': '$68build_slice.9'}), (70, {'items': ['$const62.6', '$68build_slice.10'], 'res': '$70build_tuple.11'}), (72, {'index': '$70build_tuple.11', 'target': '$60call_method.5', 'res': '$72binary_subscr.12'}), (74, {'res': '$74load_global.13'}), (76, {'item': '$74load_global.13', 'res': '$76load_method.14'}), (78, {'res': '$window_size78.15'}), (80, {'func': '$76load_method.14', 'args': ['$window_size78.15'], 'res': '$80call_method.16'}), (82, {'res': '$const82.17'}), (84, {'res': '$const84.18'}), (86, {'start': '$const82.17', 'stop': '$const84.18', 'step': None, 'res': '$86build_slice.20', 'slicevar': '$86build_slice.19'}), (88, {'res': '$const88.21'}), (90, {'items': ['$86build_slice.20', '$const88.21'], 'res': '$90build_tuple.22'}), (92, {'index': '$90build_tuple.22', 'target': '$80call_method.16', 'res': '$92binary_subscr.23'}), (94, {'lhs': '$72binary_subscr.12', 'rhs': '$92binary_subscr.23', 'res': '$94binary_add.24'}), (96, {'res': '$const96.25'}), (98, {'res': '$const98.26'}), (100, {'start': '$const96.25', 'stop': '$const98.26', 'step': None, 'res': '$100build_slice.28', 'slicevar': '$100build_slice.27'}), (102, {'res': '$const102.29'}), (104, {'res': '$104load_global.30'}), (106, {'res': '$x106.31'}), (108, {'func': '$104load_global.30', 'args': ['$x106.31'], 'res': '$108call_function.32'}), (110, {'res': '$window_size110.33'}), (112, {'lhs': '$108call_function.32', 'rhs': '$window_size110.33', 'res': '$112binary_subtract.34'}), (114, {'res': '$const114.35'}), (116, {'lhs': '$112binary_subtract.34', 'rhs': '$const114.35', 'res': '$116binary_add.36'}), (118, {'start': '$const102.29', 'stop': '$116binary_add.36', 'step': None, 'res': '$118build_slice.38', 'slicevar': '$118build_slice.37'}), (120, {'items': ['$100build_slice.28', '$118build_slice.38'], 'res': '$120build_tuple.39'}), (122, {'index': '$120build_tuple.39', 'target': '$94binary_add.24', 'res': '$122binary_subscr.40'}), (124, {'value': '$122binary_subscr.40'}), (126, {'res': '$126load_global.41'}), (128, {'item': '$126load_global.41', 'res': '$128load_attr.42'}), (130, {'res': '$x130.43'}), (132, {'res': '$sliding_idx132.44'}), (134, {'index': '$sliding_idx132.44', 'target': '$x130.43', 'res': '$134binary_subscr.45'}), (136, {'res': '$const136.46'}), (138, {'res': '$const138.47'}), (140, {'func': '$128load_attr.42', 'args': ['$134binary_subscr.45', '$const136.46'], 'names': '$const138.47', 'res': '$140call_function_kw.48'}), (142, {'value': '$140call_function_kw.48'}), (144, {'res': '$144load_global.49'}), (146, {'item': '$144load_global.49', 'res': '$146load_method.50'}), (148, {'res': '$means148.51'}), (150, {'res': '$const150.52'}), (152, {'res': '$const152.53'}), (154, {'start': '$const150.52', 'stop': '$const152.53', 'step': None, 'res': '$154build_slice.55', 'slicevar': '$154build_slice.54'}), (156, {'index': '$154build_slice.55', 'target': '$means148.51', 'res': '$156binary_subscr.56'}), (158, {'res': '$means158.57'}), (160, {'res': '$const160.58'}), (162, {'res': '$const162.59'}), (164, {'start': '$const160.58', 'stop': '$const162.59', 'step': None, 'res': '$164build_slice.61', 'slicevar': '$164build_slice.60'}), (166, {'index': '$164build_slice.61', 'target': '$means158.57', 'res': '$166binary_subscr.62'}), (168, {'lhs': '$156binary_subscr.56', 'rhs': '$166binary_subscr.62', 'res': '$168binary_subtract.63'}), (170, {'func': '$146load_method.50', 'args': ['$168binary_subtract.63'], 'res': '$170call_method.64'}), (172, {'value': '$170call_method.64'}), (174, {'res': '$extra_args174.65'}), (176, {'res': '$const176.66'}), (178, {'lhs': '$extra_args174.65', 'rhs': '$const176.66', 'res': '$178compare_op.67'}), (180, {'pred': '$178compare_op.67'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={182: (), 208: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$extra_args182.0'}), (184, {'item': '$extra_args182.0', 'res': '$184load_method.1'}), (186, {'res': '$const186.2'}), (188, {'res': '$default_status188.3'}), (190, {'func': '$184load_method.1', 'args': ['$const186.2', '$default_status188.3'], 'res': '$190call_method.4'}), (192, {'pred': '$190call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={194: (), 208: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=194 nstack_initial=0):
AdaptBlockInfo(insts=((194, {'res': '$194load_global.0'}), (196, {'item': '$194load_global.0', 'res': '$196load_method.1'}), (198, {'res': '$mean_diff198.2'}), (200, {'func': '$196load_method.1', 'args': ['$mean_diff198.2'], 'res': '$200call_method.3'}), (202, {'res': '$level_shift_features202.4'}), (204, {'res': '$const204.5'}), (206, {'target': '$level_shift_features202.4', 'index': '$const204.5', 'value': '$200call_method.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={208: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=208 nstack_initial=0):
AdaptBlockInfo(insts=((208, {'res': '$extra_args208.0'}), (210, {'res': '$const210.1'}), (212, {'lhs': '$extra_args208.0', 'rhs': '$const210.1', 'res': '$212compare_op.2'}), (214, {'pred': '$212compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={216: (), 246: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=216 nstack_initial=0):
AdaptBlockInfo(insts=((216, {'res': '$extra_args216.0'}), (218, {'item': '$extra_args216.0', 'res': '$218load_method.1'}), (220, {'res': '$const220.2'}), (222, {'res': '$default_status222.3'}), (224, {'func': '$218load_method.1', 'args': ['$const220.2', '$default_status222.3'], 'res': '$224call_method.4'}), (226, {'pred': '$224call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={228: (), 246: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=228 nstack_initial=0):
AdaptBlockInfo(insts=((228, {'res': '$mean_diff228.0'}), (230, {'res': '$230load_global.1'}), (232, {'item': '$230load_global.1', 'res': '$232load_method.2'}), (234, {'res': '$mean_diff234.3'}), (236, {'func': '$232load_method.2', 'args': ['$mean_diff234.3'], 'res': '$236call_method.4'}), (238, {'index': '$236call_method.4', 'target': '$mean_diff228.0', 'res': '$238binary_subscr.5'}), (240, {'res': '$level_shift_features240.6'}), (242, {'res': '$const242.7'}), (244, {'target': '$level_shift_features240.6', 'index': '$const242.7', 'value': '$238binary_subscr.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={246: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=246 nstack_initial=0):
AdaptBlockInfo(insts=((246, {'res': '$level_shift_features246.0'}), (248, {'retval': '$level_shift_features246.0', 'castval': '$248return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    window_size = arg(1, name=window_size)   ['window_size']
    extra_args = arg(2, name=extra_args)     ['extra_args']
    default_status = arg(3, name=default_status) ['default_status']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=nan) ['$2load_global.0', '$4load_attr.1']
    $6load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.2']
    $8load_attr.3 = getattr(value=$6load_global.2, attr=nan) ['$6load_global.2', '$8load_attr.3']
    $12build_const_key_map.5 = const(str, level_shift_idx) ['$12build_const_key_map.5']
    $12build_const_key_map.6 = const(str, level_shift_size) ['$12build_const_key_map.6']
    level_shift_features = build_map(items=[(Var($12build_const_key_map.5, tsfeatures.py:731), Var($4load_attr.1, tsfeatures.py:731)), (Var($12build_const_key_map.6, tsfeatures.py:731), Var($8load_attr.3, tsfeatures.py:731))], size=2, literal_value={'level_shift_idx': _UNKNOWN_VALUE($4load_attr.1), 'level_shift_size': _UNKNOWN_VALUE($8load_attr.3)}, value_indexes={'level_shift_idx': 0, 'level_shift_size': 1}) ['$12build_const_key_map.5', '$12build_const_key_map.6', '$4load_attr.1', '$8load_attr.3', 'level_shift_features']
    $16load_global.8 = global(len: <built-in function len>) ['$16load_global.8']
    $20call_function.10 = call $16load_global.8(x, func=$16load_global.8, args=[Var(x, tsfeatures.py:731)], kws=(), vararg=None) ['$16load_global.8', '$20call_function.10', 'x']
    $const24.12 = const(int, 2)              ['$const24.12']
    $26binary_add.13 = window_size + $const24.12 ['$26binary_add.13', '$const24.12', 'window_size']
    $28compare_op.14 = $20call_function.10 < $26binary_add.13 ['$20call_function.10', '$26binary_add.13', '$28compare_op.14']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28compare_op.14, func=bool30, args=(Var($28compare_op.14, tsfeatures.py:732),), kws=(), vararg=None) ['$28compare_op.14', '$30pred', 'bool30']
    branch $30pred, 32, 50                   ['$30pred']
label 32:
    msg = const(str, Length of time series is shorter than window_size, unable to calculate level shift features!) ['msg']
    $36load_global.1 = global(logging: <module 'logging' from '/usr/lib/python3.8/logging/__init__.py'>) ['$36load_global.1']
    $38load_method.2 = getattr(value=$36load_global.1, attr=error) ['$36load_global.1', '$38load_method.2']
    $42call_method.4 = call $38load_method.2(msg, func=$38load_method.2, args=[Var(msg, tsfeatures.py:733)], kws=(), vararg=None) ['$38load_method.2', '$42call_method.4', 'msg']
    $48return_value.6 = cast(value=level_shift_features) ['$48return_value.6', 'level_shift_features']
    return $48return_value.6                 ['$48return_value.6']
label 50:
    $50load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$50load_global.0']
    $52load_method.1 = getattr(value=$50load_global.0, attr=arange) ['$50load_global.0', '$52load_method.1']
    $54load_global.2 = global(len: <built-in function len>) ['$54load_global.2']
    $58call_function.4 = call $54load_global.2(x, func=$54load_global.2, args=[Var(x, tsfeatures.py:731)], kws=(), vararg=None) ['$54load_global.2', '$58call_function.4', 'x']
    $60call_method.5 = call $52load_method.1($58call_function.4, func=$52load_method.1, args=[Var($58call_function.4, tsfeatures.py:737)], kws=(), vararg=None) ['$52load_method.1', '$58call_function.4', '$60call_method.5']
    $const62.6 = const(NoneType, None)       ['$const62.6']
    $const64.7 = const(NoneType, None)       ['$const64.7']
    $const66.8 = const(NoneType, None)       ['$const66.8']
    $68build_slice.9 = global(slice: <class 'slice'>) ['$68build_slice.9']
    $68build_slice.10 = call $68build_slice.9($const64.7, $const66.8, func=$68build_slice.9, args=(Var($const64.7, tsfeatures.py:737), Var($const66.8, tsfeatures.py:737)), kws=(), vararg=None) ['$68build_slice.10', '$68build_slice.9', '$const64.7', '$const66.8']
    $70build_tuple.11 = build_tuple(items=[Var($const62.6, tsfeatures.py:737), Var($68build_slice.10, tsfeatures.py:737)]) ['$68build_slice.10', '$70build_tuple.11', '$const62.6']
    $72binary_subscr.12 = getitem(value=$60call_method.5, index=$70build_tuple.11, fn=<built-in function getitem>) ['$60call_method.5', '$70build_tuple.11', '$72binary_subscr.12']
    $74load_global.13 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$74load_global.13']
    $76load_method.14 = getattr(value=$74load_global.13, attr=arange) ['$74load_global.13', '$76load_method.14']
    $80call_method.16 = call $76load_method.14(window_size, func=$76load_method.14, args=[Var(window_size, tsfeatures.py:731)], kws=(), vararg=None) ['$76load_method.14', '$80call_method.16', 'window_size']
    $const82.17 = const(NoneType, None)      ['$const82.17']
    $const84.18 = const(NoneType, None)      ['$const84.18']
    $86build_slice.19 = global(slice: <class 'slice'>) ['$86build_slice.19']
    $86build_slice.20 = call $86build_slice.19($const82.17, $const84.18, func=$86build_slice.19, args=(Var($const82.17, tsfeatures.py:737), Var($const84.18, tsfeatures.py:737)), kws=(), vararg=None) ['$86build_slice.19', '$86build_slice.20', '$const82.17', '$const84.18']
    $const88.21 = const(NoneType, None)      ['$const88.21']
    $90build_tuple.22 = build_tuple(items=[Var($86build_slice.20, tsfeatures.py:737), Var($const88.21, tsfeatures.py:737)]) ['$86build_slice.20', '$90build_tuple.22', '$const88.21']
    $92binary_subscr.23 = getitem(value=$80call_method.16, index=$90build_tuple.22, fn=<built-in function getitem>) ['$80call_method.16', '$90build_tuple.22', '$92binary_subscr.23']
    $94binary_add.24 = $72binary_subscr.12 + $92binary_subscr.23 ['$72binary_subscr.12', '$92binary_subscr.23', '$94binary_add.24']
    $const96.25 = const(NoneType, None)      ['$const96.25']
    $const98.26 = const(NoneType, None)      ['$const98.26']
    $100build_slice.27 = global(slice: <class 'slice'>) ['$100build_slice.27']
    $100build_slice.28 = call $100build_slice.27($const96.25, $const98.26, func=$100build_slice.27, args=(Var($const96.25, tsfeatures.py:737), Var($const98.26, tsfeatures.py:737)), kws=(), vararg=None) ['$100build_slice.27', '$100build_slice.28', '$const96.25', '$const98.26']
    $const102.29 = const(NoneType, None)     ['$const102.29']
    $104load_global.30 = global(len: <built-in function len>) ['$104load_global.30']
    $108call_function.32 = call $104load_global.30(x, func=$104load_global.30, args=[Var(x, tsfeatures.py:731)], kws=(), vararg=None) ['$104load_global.30', '$108call_function.32', 'x']
    $112binary_subtract.34 = $108call_function.32 - window_size ['$108call_function.32', '$112binary_subtract.34', 'window_size']
    $const114.35 = const(int, 1)             ['$const114.35']
    $116binary_add.36 = $112binary_subtract.34 + $const114.35 ['$112binary_subtract.34', '$116binary_add.36', '$const114.35']
    $118build_slice.37 = global(slice: <class 'slice'>) ['$118build_slice.37']
    $118build_slice.38 = call $118build_slice.37($const102.29, $116binary_add.36, func=$118build_slice.37, args=(Var($const102.29, tsfeatures.py:737), Var($116binary_add.36, tsfeatures.py:738)), kws=(), vararg=None) ['$116binary_add.36', '$118build_slice.37', '$118build_slice.38', '$const102.29']
    $120build_tuple.39 = build_tuple(items=[Var($100build_slice.28, tsfeatures.py:737), Var($118build_slice.38, tsfeatures.py:737)]) ['$100build_slice.28', '$118build_slice.38', '$120build_tuple.39']
    sliding_idx = getitem(value=$94binary_add.24, index=$120build_tuple.39, fn=<built-in function getitem>) ['$120build_tuple.39', '$94binary_add.24', 'sliding_idx']
    $126load_global.41 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$126load_global.41']
    $128load_attr.42 = getattr(value=$126load_global.41, attr=mean) ['$126load_global.41', '$128load_attr.42']
    $134binary_subscr.45 = getitem(value=x, index=sliding_idx, fn=<built-in function getitem>) ['$134binary_subscr.45', 'sliding_idx', 'x']
    $const136.46 = const(int, 0)             ['$const136.46']
    means = call $128load_attr.42($134binary_subscr.45, func=$128load_attr.42, args=[Var($134binary_subscr.45, tsfeatures.py:740)], kws=[('axis', Var($const136.46, tsfeatures.py:740))], vararg=None) ['$128load_attr.42', '$134binary_subscr.45', '$const136.46', 'means']
    $144load_global.49 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$144load_global.49']
    $146load_method.50 = getattr(value=$144load_global.49, attr=abs) ['$144load_global.49', '$146load_method.50']
    $const150.52 = const(NoneType, None)     ['$const150.52']
    $const152.53 = const(int, -1)            ['$const152.53']
    $154build_slice.54 = global(slice: <class 'slice'>) ['$154build_slice.54']
    $154build_slice.55 = call $154build_slice.54($const150.52, $const152.53, func=$154build_slice.54, args=(Var($const150.52, tsfeatures.py:741), Var($const152.53, tsfeatures.py:741)), kws=(), vararg=None) ['$154build_slice.54', '$154build_slice.55', '$const150.52', '$const152.53']
    $156binary_subscr.56 = getitem(value=means, index=$154build_slice.55, fn=<built-in function getitem>) ['$154build_slice.55', '$156binary_subscr.56', 'means']
    $const160.58 = const(int, 1)             ['$const160.58']
    $const162.59 = const(NoneType, None)     ['$const162.59']
    $164build_slice.60 = global(slice: <class 'slice'>) ['$164build_slice.60']
    $164build_slice.61 = call $164build_slice.60($const160.58, $const162.59, func=$164build_slice.60, args=(Var($const160.58, tsfeatures.py:741), Var($const162.59, tsfeatures.py:741)), kws=(), vararg=None) ['$164build_slice.60', '$164build_slice.61', '$const160.58', '$const162.59']
    $166binary_subscr.62 = getitem(value=means, index=$164build_slice.61, fn=<built-in function getitem>) ['$164build_slice.61', '$166binary_subscr.62', 'means']
    $168binary_subtract.63 = $156binary_subscr.56 - $166binary_subscr.62 ['$156binary_subscr.56', '$166binary_subscr.62', '$168binary_subtract.63']
    mean_diff = call $146load_method.50($168binary_subtract.63, func=$146load_method.50, args=[Var($168binary_subtract.63, tsfeatures.py:741)], kws=(), vararg=None) ['$146load_method.50', '$168binary_subtract.63', 'mean_diff']
    $const176.66 = const(NoneType, None)     ['$const176.66']
    $178compare_op.67 = extra_args is not $const176.66 ['$178compare_op.67', '$const176.66', 'extra_args']
    bool180 = global(bool: <class 'bool'>)   ['bool180']
    $180pred = call bool180($178compare_op.67, func=bool180, args=(Var($178compare_op.67, tsfeatures.py:743),), kws=(), vararg=None) ['$178compare_op.67', '$180pred', 'bool180']
    branch $180pred, 182, 208                ['$180pred']
label 182:
    $184load_method.1 = getattr(value=extra_args, attr=get) ['$184load_method.1', 'extra_args']
    $const186.2 = const(str, level_shift_idx) ['$const186.2']
    $190call_method.4 = call $184load_method.1($const186.2, default_status, func=$184load_method.1, args=[Var($const186.2, tsfeatures.py:743), Var(default_status, tsfeatures.py:731)], kws=(), vararg=None) ['$184load_method.1', '$190call_method.4', '$const186.2', 'default_status']
    bool192 = global(bool: <class 'bool'>)   ['bool192']
    $192pred = call bool192($190call_method.4, func=bool192, args=(Var($190call_method.4, tsfeatures.py:743),), kws=(), vararg=None) ['$190call_method.4', '$192pred', 'bool192']
    branch $192pred, 194, 208                ['$192pred']
label 194:
    $194load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$194load_global.0']
    $196load_method.1 = getattr(value=$194load_global.0, attr=argmax) ['$194load_global.0', '$196load_method.1']
    $200call_method.3 = call $196load_method.1(mean_diff, func=$196load_method.1, args=[Var(mean_diff, tsfeatures.py:741)], kws=(), vararg=None) ['$196load_method.1', '$200call_method.3', 'mean_diff']
    $const204.5 = const(str, level_shift_idx) ['$const204.5']
    level_shift_features[$const204.5] = $200call_method.3 ['$200call_method.3', '$const204.5', 'level_shift_features']
    jump 208                                 []
label 208:
    $const210.1 = const(NoneType, None)      ['$const210.1']
    $212compare_op.2 = extra_args is not $const210.1 ['$212compare_op.2', '$const210.1', 'extra_args']
    bool214 = global(bool: <class 'bool'>)   ['bool214']
    $214pred = call bool214($212compare_op.2, func=bool214, args=(Var($212compare_op.2, tsfeatures.py:745),), kws=(), vararg=None) ['$212compare_op.2', '$214pred', 'bool214']
    branch $214pred, 216, 246                ['$214pred']
label 216:
    $218load_method.1 = getattr(value=extra_args, attr=get) ['$218load_method.1', 'extra_args']
    $const220.2 = const(str, level_shift_size) ['$const220.2']
    $224call_method.4 = call $218load_method.1($const220.2, default_status, func=$218load_method.1, args=[Var($const220.2, tsfeatures.py:745), Var(default_status, tsfeatures.py:731)], kws=(), vararg=None) ['$218load_method.1', '$224call_method.4', '$const220.2', 'default_status']
    bool226 = global(bool: <class 'bool'>)   ['bool226']
    $226pred = call bool226($224call_method.4, func=bool226, args=(Var($224call_method.4, tsfeatures.py:745),), kws=(), vararg=None) ['$224call_method.4', '$226pred', 'bool226']
    branch $226pred, 228, 246                ['$226pred']
label 228:
    $230load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$230load_global.1']
    $232load_method.2 = getattr(value=$230load_global.1, attr=argmax) ['$230load_global.1', '$232load_method.2']
    $236call_method.4 = call $232load_method.2(mean_diff, func=$232load_method.2, args=[Var(mean_diff, tsfeatures.py:741)], kws=(), vararg=None) ['$232load_method.2', '$236call_method.4', 'mean_diff']
    $238binary_subscr.5 = getitem(value=mean_diff, index=$236call_method.4, fn=<built-in function getitem>) ['$236call_method.4', '$238binary_subscr.5', 'mean_diff']
    $const242.7 = const(str, level_shift_size) ['$const242.7']
    level_shift_features[$const242.7] = $238binary_subscr.5 ['$238binary_subscr.5', '$const242.7', 'level_shift_features']
    jump 246                                 []
label 246:
    $248return_value.1 = cast(value=level_shift_features) ['$248return_value.1', 'level_shift_features']
    return $248return_value.1                ['$248return_value.1']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=968)
           2	LOAD_GLOBAL(arg=0, lineno=968)
           4	LOAD_ATTR(arg=1, lineno=968)
           6	LOAD_GLOBAL(arg=0, lineno=969)
           8	LOAD_ATTR(arg=1, lineno=969)
          10	LOAD_GLOBAL(arg=0, lineno=970)
          12	LOAD_ATTR(arg=1, lineno=970)
          14	LOAD_GLOBAL(arg=0, lineno=971)
          16	LOAD_ATTR(arg=1, lineno=971)
          18	LOAD_GLOBAL(arg=0, lineno=972)
          20	LOAD_ATTR(arg=1, lineno=972)
          22	LOAD_GLOBAL(arg=0, lineno=973)
          24	LOAD_ATTR(arg=1, lineno=973)
          26	LOAD_GLOBAL(arg=0, lineno=974)
          28	LOAD_ATTR(arg=1, lineno=974)
          30	LOAD_GLOBAL(arg=0, lineno=975)
          32	LOAD_ATTR(arg=1, lineno=975)
          34	LOAD_GLOBAL(arg=0, lineno=976)
          36	LOAD_ATTR(arg=1, lineno=976)
          38	LOAD_GLOBAL(arg=0, lineno=977)
          40	LOAD_ATTR(arg=1, lineno=977)
          42	LOAD_GLOBAL(arg=0, lineno=978)
          44	LOAD_ATTR(arg=1, lineno=978)
          46	LOAD_CONST(arg=1, lineno=967)
          48	BUILD_CONST_KEY_MAP(arg=11, lineno=967)
          50	STORE_FAST(arg=5, lineno=967)
          52	LOAD_GLOBAL(arg=2, lineno=980)
          54	LOAD_DEREF(arg=1, lineno=980)
          56	CALL_FUNCTION(arg=1, lineno=980)
          58	LOAD_CONST(arg=2, lineno=980)
          60	COMPARE_OP(arg=0, lineno=980)
          62	POP_JUMP_IF_TRUE(arg=94, lineno=980)
          64	LOAD_GLOBAL(arg=2, lineno=980)
          66	LOAD_DEREF(arg=1, lineno=980)
          68	CALL_FUNCTION(arg=1, lineno=980)
          70	LOAD_FAST(arg=2, lineno=980)
          72	COMPARE_OP(arg=0, lineno=980)
          74	POP_JUMP_IF_TRUE(arg=94, lineno=980)
          76	LOAD_GLOBAL(arg=2, lineno=980)
          78	LOAD_GLOBAL(arg=0, lineno=980)
          80	LOAD_METHOD(arg=3, lineno=980)
          82	LOAD_DEREF(arg=1, lineno=980)
          84	CALL_METHOD(arg=1, lineno=980)
          86	CALL_FUNCTION(arg=1, lineno=980)
          88	LOAD_CONST(arg=3, lineno=980)
          90	COMPARE_OP(arg=2, lineno=980)
          92	POP_JUMP_IF_FALSE(arg=112, lineno=980)
>         94	LOAD_CONST(arg=4, lineno=981)
          96	STORE_FAST(arg=6, lineno=981)
          98	LOAD_GLOBAL(arg=4, lineno=982)
         100	LOAD_METHOD(arg=5, lineno=982)
         102	LOAD_FAST(arg=6, lineno=982)
         104	CALL_METHOD(arg=1, lineno=982)
         106	POP_TOP(arg=None, lineno=982)
         108	LOAD_FAST(arg=5, lineno=983)
         110	RETURN_VALUE(arg=None, lineno=983)
>        112	LOAD_GLOBAL(arg=6, lineno=985)
         114	LOAD_FAST(arg=1, lineno=985)
         116	LOAD_GLOBAL(arg=2, lineno=985)
         118	LOAD_DEREF(arg=1, lineno=985)
         120	CALL_FUNCTION(arg=1, lineno=985)
         122	LOAD_CONST(arg=5, lineno=985)
         124	BINARY_SUBTRACT(arg=None, lineno=985)
         126	CALL_FUNCTION(arg=2, lineno=985)
         128	STORE_FAST(arg=7, lineno=985)
         130	LOAD_CLOSURE(arg=1, lineno=987)
         132	BUILD_TUPLE(arg=1, lineno=987)
         134	LOAD_CONST(arg=6, lineno=987)
         136	LOAD_CONST(arg=7, lineno=987)
         138	MAKE_FUNCTION(arg=8, lineno=987)
         140	LOAD_GLOBAL(arg=7, lineno=987)
         142	LOAD_CONST(arg=3, lineno=987)
         144	LOAD_GLOBAL(arg=2, lineno=987)
         146	LOAD_DEREF(arg=1, lineno=987)
         148	CALL_FUNCTION(arg=1, lineno=987)
         150	CALL_FUNCTION(arg=2, lineno=987)
         152	GET_ITER(arg=None, lineno=987)
         154	CALL_FUNCTION(arg=1, lineno=987)
         156	STORE_DEREF(arg=0, lineno=987)
         158	LOAD_CLOSURE(arg=0, lineno=988)
         160	BUILD_TUPLE(arg=1, lineno=988)
         162	LOAD_CONST(arg=8, lineno=988)
         164	LOAD_CONST(arg=7, lineno=988)
         166	MAKE_FUNCTION(arg=8, lineno=988)
         168	LOAD_GLOBAL(arg=7, lineno=988)
         170	LOAD_CONST(arg=3, lineno=988)
         172	LOAD_GLOBAL(arg=2, lineno=988)
         174	LOAD_DEREF(arg=0, lineno=988)
         176	CALL_FUNCTION(arg=1, lineno=988)
         178	CALL_FUNCTION(arg=2, lineno=988)
         180	GET_ITER(arg=None, lineno=988)
         182	CALL_FUNCTION(arg=1, lineno=988)
         184	STORE_FAST(arg=8, lineno=988)
         186	LOAD_GLOBAL(arg=8, lineno=990)
         188	LOAD_DEREF(arg=1, lineno=990)
         190	LOAD_CONST(arg=9, lineno=990)
         192	LOAD_CONST(arg=10, lineno=990)
         194	LOAD_FAST(arg=2, lineno=990)
         196	LOAD_CONST(arg=11, lineno=990)
         198	CALL_FUNCTION_KW(arg=4, lineno=990)
         200	LOAD_CONST(arg=3, lineno=990)
         202	LOAD_CONST(arg=12, lineno=990)
         204	BUILD_SLICE(arg=2, lineno=990)
         206	BINARY_SUBSCR(arg=None, lineno=990)
         208	STORE_FAST(arg=9, lineno=990)
         210	LOAD_GLOBAL(arg=8, lineno=991)
         212	LOAD_DEREF(arg=0, lineno=991)
         214	LOAD_CONST(arg=9, lineno=991)
         216	LOAD_CONST(arg=10, lineno=991)
         218	LOAD_FAST(arg=7, lineno=991)
         220	LOAD_CONST(arg=11, lineno=991)
         222	CALL_FUNCTION_KW(arg=4, lineno=991)
         224	LOAD_CONST(arg=3, lineno=991)
         226	LOAD_CONST(arg=12, lineno=991)
         228	BUILD_SLICE(arg=2, lineno=991)
         230	BINARY_SUBSCR(arg=None, lineno=991)
         232	STORE_FAST(arg=10, lineno=991)
         234	LOAD_GLOBAL(arg=8, lineno=992)
         236	LOAD_FAST(arg=8, lineno=992)
         238	LOAD_CONST(arg=9, lineno=992)
         240	LOAD_CONST(arg=10, lineno=992)
         242	LOAD_FAST(arg=7, lineno=992)
         244	LOAD_CONST(arg=11, lineno=992)
         246	CALL_FUNCTION_KW(arg=4, lineno=992)
         248	LOAD_CONST(arg=3, lineno=992)
         250	LOAD_CONST(arg=12, lineno=992)
         252	BUILD_SLICE(arg=2, lineno=992)
         254	BINARY_SUBSCR(arg=None, lineno=992)
         256	STORE_FAST(arg=11, lineno=992)
         258	LOAD_GLOBAL(arg=9, lineno=994)
         260	LOAD_DEREF(arg=1, lineno=994)
         262	LOAD_FAST(arg=2, lineno=994)
         264	LOAD_CONST(arg=13, lineno=994)
         266	CALL_FUNCTION_KW(arg=2, lineno=994)
         268	LOAD_CONST(arg=3, lineno=994)
         270	LOAD_CONST(arg=12, lineno=994)
         272	BUILD_SLICE(arg=2, lineno=994)
         274	BINARY_SUBSCR(arg=None, lineno=994)
         276	STORE_FAST(arg=12, lineno=994)
         278	LOAD_GLOBAL(arg=9, lineno=995)
         280	LOAD_DEREF(arg=0, lineno=995)
         282	LOAD_FAST(arg=7, lineno=995)
         284	LOAD_CONST(arg=13, lineno=995)
         286	CALL_FUNCTION_KW(arg=2, lineno=995)
         288	LOAD_CONST(arg=3, lineno=995)
         290	LOAD_CONST(arg=12, lineno=995)
         292	BUILD_SLICE(arg=2, lineno=995)
         294	BINARY_SUBSCR(arg=None, lineno=995)
         296	STORE_FAST(arg=13, lineno=995)
         298	LOAD_GLOBAL(arg=9, lineno=996)
         300	LOAD_FAST(arg=8, lineno=996)
         302	LOAD_FAST(arg=7, lineno=996)
         304	LOAD_CONST(arg=13, lineno=996)
         306	CALL_FUNCTION_KW(arg=2, lineno=996)
         308	LOAD_CONST(arg=3, lineno=996)
         310	LOAD_CONST(arg=12, lineno=996)
         312	BUILD_SLICE(arg=2, lineno=996)
         314	BINARY_SUBSCR(arg=None, lineno=996)
         316	STORE_FAST(arg=14, lineno=996)
         318	LOAD_GLOBAL(arg=10, lineno=1007)
         320	LOAD_METHOD(arg=11, lineno=1007)
         322	LOAD_FAST(arg=3, lineno=1008)
         324	LOAD_FAST(arg=4, lineno=1009)
         326	LOAD_FAST(arg=9, lineno=1010)
         328	LOAD_FAST(arg=10, lineno=1011)
         330	LOAD_FAST(arg=11, lineno=1012)
         332	CALL_METHOD(arg=5, lineno=1007)
         334	UNPACK_SEQUENCE(arg=7, lineno=999)
         336	LOAD_FAST(arg=5, lineno=1000)
         338	LOAD_CONST(arg=14, lineno=1000)
         340	STORE_SUBSCR(arg=None, lineno=1000)
         342	LOAD_FAST(arg=5, lineno=1001)
         344	LOAD_CONST(arg=15, lineno=1001)
         346	STORE_SUBSCR(arg=None, lineno=1001)
         348	LOAD_FAST(arg=5, lineno=1002)
         350	LOAD_CONST(arg=16, lineno=1002)
         352	STORE_SUBSCR(arg=None, lineno=1002)
         354	LOAD_FAST(arg=5, lineno=1003)
         356	LOAD_CONST(arg=17, lineno=1003)
         358	STORE_SUBSCR(arg=None, lineno=1003)
         360	LOAD_FAST(arg=5, lineno=1004)
         362	LOAD_CONST(arg=18, lineno=1004)
         364	STORE_SUBSCR(arg=None, lineno=1004)
         366	LOAD_FAST(arg=5, lineno=1005)
         368	LOAD_CONST(arg=19, lineno=1005)
         370	STORE_SUBSCR(arg=None, lineno=1005)
         372	LOAD_FAST(arg=5, lineno=1006)
         374	LOAD_CONST(arg=20, lineno=1006)
         376	STORE_SUBSCR(arg=None, lineno=1006)
         378	LOAD_GLOBAL(arg=10, lineno=1021)
         380	LOAD_METHOD(arg=12, lineno=1021)
         382	LOAD_FAST(arg=3, lineno=1022)
         384	LOAD_FAST(arg=4, lineno=1023)
         386	LOAD_FAST(arg=12, lineno=1024)
         388	LOAD_FAST(arg=13, lineno=1025)
         390	LOAD_FAST(arg=14, lineno=1026)
         392	CALL_METHOD(arg=5, lineno=1021)
         394	UNPACK_SEQUENCE(arg=4, lineno=1016)
         396	LOAD_FAST(arg=5, lineno=1017)
         398	LOAD_CONST(arg=21, lineno=1017)
         400	STORE_SUBSCR(arg=None, lineno=1017)
         402	LOAD_FAST(arg=5, lineno=1018)
         404	LOAD_CONST(arg=22, lineno=1018)
         406	STORE_SUBSCR(arg=None, lineno=1018)
         408	LOAD_FAST(arg=5, lineno=1019)
         410	LOAD_CONST(arg=23, lineno=1019)
         412	STORE_SUBSCR(arg=None, lineno=1019)
         414	LOAD_FAST(arg=5, lineno=1020)
         416	LOAD_CONST(arg=24, lineno=1020)
         418	STORE_SUBSCR(arg=None, lineno=1020)
         420	LOAD_FAST(arg=5, lineno=1029)
         422	RETURN_VALUE(arg=None, lineno=1029)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=968)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=968)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=968)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=969)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=969)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=970)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=970)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=971)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=971)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$14load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=972)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=972)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$18load_global.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_GLOBAL(arg=0, lineno=973)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_ATTR(arg=1, lineno=973)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$22load_global.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=974)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_ATTR(arg=1, lineno=974)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$26load_global.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=975)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_ATTR(arg=1, lineno=975)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$30load_global.14']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_GLOBAL(arg=0, lineno=976)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$32load_attr.15']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_ATTR(arg=1, lineno=976)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$32load_attr.15', '$34load_global.16']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_GLOBAL(arg=0, lineno=977)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$32load_attr.15', '$36load_attr.17']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_ATTR(arg=1, lineno=977)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$32load_attr.15', '$36load_attr.17', '$38load_global.18']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=978)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$32load_attr.15', '$36load_attr.17', '$40load_attr.19']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=978)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$32load_attr.15', '$36load_attr.17', '$40load_attr.19', '$42load_global.20']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=967)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$32load_attr.15', '$36load_attr.17', '$40load_attr.19', '$44load_attr.21']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=BUILD_CONST_KEY_MAP(arg=11, lineno=967)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$32load_attr.15', '$36load_attr.17', '$40load_attr.19', '$44load_attr.21', '$const46.22']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_FAST(arg=5, lineno=967)
DEBUG:numba.core.byteflow:stack ['$48build_const_key_map.34']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_GLOBAL(arg=2, lineno=980)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_DEREF(arg=1, lineno=980)
DEBUG:numba.core.byteflow:stack ['$52load_global.35']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=CALL_FUNCTION(arg=1, lineno=980)
DEBUG:numba.core.byteflow:stack ['$52load_global.35', '$54load_deref.36']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=980)
DEBUG:numba.core.byteflow:stack ['$56call_function.37']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=COMPARE_OP(arg=0, lineno=980)
DEBUG:numba.core.byteflow:stack ['$56call_function.37', '$const58.38']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=POP_JUMP_IF_TRUE(arg=94, lineno=980)
DEBUG:numba.core.byteflow:stack ['$60compare_op.39']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=94, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=94 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_GLOBAL(arg=2, lineno=980)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_DEREF(arg=1, lineno=980)
DEBUG:numba.core.byteflow:stack ['$64load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=CALL_FUNCTION(arg=1, lineno=980)
DEBUG:numba.core.byteflow:stack ['$64load_global.0', '$66load_deref.1']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_FAST(arg=2, lineno=980)
DEBUG:numba.core.byteflow:stack ['$68call_function.2']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=COMPARE_OP(arg=0, lineno=980)
DEBUG:numba.core.byteflow:stack ['$68call_function.2', '$period70.3']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=POP_JUMP_IF_TRUE(arg=94, lineno=980)
DEBUG:numba.core.byteflow:stack ['$72compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=76, stack=(), blockstack=(), npush=0), Edge(pc=94, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=94 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_CONST(arg=4, lineno=981)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=96, inst=STORE_FAST(arg=6, lineno=981)
DEBUG:numba.core.byteflow:stack ['$const94.0']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_GLOBAL(arg=4, lineno=982)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_METHOD(arg=5, lineno=982)
DEBUG:numba.core.byteflow:stack ['$98load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=982)
DEBUG:numba.core.byteflow:stack ['$100load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=CALL_METHOD(arg=1, lineno=982)
DEBUG:numba.core.byteflow:stack ['$100load_method.2', '$msg102.3']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=POP_TOP(arg=None, lineno=982)
DEBUG:numba.core.byteflow:stack ['$104call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=LOAD_FAST(arg=5, lineno=983)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=110, inst=RETURN_VALUE(arg=None, lineno=983)
DEBUG:numba.core.byteflow:stack ['$acfpacf_features108.5']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=94 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_GLOBAL(arg=2, lineno=980)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_GLOBAL(arg=0, lineno=980)
DEBUG:numba.core.byteflow:stack ['$76load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_METHOD(arg=3, lineno=980)
DEBUG:numba.core.byteflow:stack ['$76load_global.0', '$78load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_DEREF(arg=1, lineno=980)
DEBUG:numba.core.byteflow:stack ['$76load_global.0', '$80load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=980)
DEBUG:numba.core.byteflow:stack ['$76load_global.0', '$80load_method.2', '$82load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=CALL_FUNCTION(arg=1, lineno=980)
DEBUG:numba.core.byteflow:stack ['$76load_global.0', '$84call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=3, lineno=980)
DEBUG:numba.core.byteflow:stack ['$86call_function.5']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=COMPARE_OP(arg=2, lineno=980)
DEBUG:numba.core.byteflow:stack ['$86call_function.5', '$const88.6']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=112, lineno=980)
DEBUG:numba.core.byteflow:stack ['$90compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=112, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=112 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_GLOBAL(arg=6, lineno=985)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_FAST(arg=1, lineno=985)
DEBUG:numba.core.byteflow:stack ['$112load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_GLOBAL(arg=2, lineno=985)
DEBUG:numba.core.byteflow:stack ['$112load_global.0', '$acfpacf_lag114.1']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=LOAD_DEREF(arg=1, lineno=985)
DEBUG:numba.core.byteflow:stack ['$112load_global.0', '$acfpacf_lag114.1', '$116load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=CALL_FUNCTION(arg=1, lineno=985)
DEBUG:numba.core.byteflow:stack ['$112load_global.0', '$acfpacf_lag114.1', '$116load_global.2', '$118load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_CONST(arg=5, lineno=985)
DEBUG:numba.core.byteflow:stack ['$112load_global.0', '$acfpacf_lag114.1', '$120call_function.4']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=BINARY_SUBTRACT(arg=None, lineno=985)
DEBUG:numba.core.byteflow:stack ['$112load_global.0', '$acfpacf_lag114.1', '$120call_function.4', '$const122.5']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=CALL_FUNCTION(arg=2, lineno=985)
DEBUG:numba.core.byteflow:stack ['$112load_global.0', '$acfpacf_lag114.1', '$124binary_subtract.6']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=STORE_FAST(arg=7, lineno=985)
DEBUG:numba.core.byteflow:stack ['$126call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_CLOSURE(arg=1, lineno=987)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=132, inst=BUILD_TUPLE(arg=1, lineno=987)
DEBUG:numba.core.byteflow:stack ['$130load_closure.8']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=LOAD_CONST(arg=6, lineno=987)
DEBUG:numba.core.byteflow:stack ['$132build_tuple.9']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=LOAD_CONST(arg=7, lineno=987)
DEBUG:numba.core.byteflow:stack ['$132build_tuple.9', '$const134.10']
DEBUG:numba.core.byteflow:dispatch pc=138, inst=MAKE_FUNCTION(arg=8, lineno=987)
DEBUG:numba.core.byteflow:stack ['$132build_tuple.9', '$const134.10', '$const136.11']
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_GLOBAL(arg=7, lineno=987)
DEBUG:numba.core.byteflow:stack ['$138make_function.12']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=987)
DEBUG:numba.core.byteflow:stack ['$138make_function.12', '$140load_global.13']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=LOAD_GLOBAL(arg=2, lineno=987)
DEBUG:numba.core.byteflow:stack ['$138make_function.12', '$140load_global.13', '$const142.14']
DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_DEREF(arg=1, lineno=987)
DEBUG:numba.core.byteflow:stack ['$138make_function.12', '$140load_global.13', '$const142.14', '$144load_global.15']
DEBUG:numba.core.byteflow:dispatch pc=148, inst=CALL_FUNCTION(arg=1, lineno=987)
DEBUG:numba.core.byteflow:stack ['$138make_function.12', '$140load_global.13', '$const142.14', '$144load_global.15', '$146load_deref.16']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=CALL_FUNCTION(arg=2, lineno=987)
DEBUG:numba.core.byteflow:stack ['$138make_function.12', '$140load_global.13', '$const142.14', '$148call_function.17']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=GET_ITER(arg=None, lineno=987)
DEBUG:numba.core.byteflow:stack ['$138make_function.12', '$150call_function.18']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=CALL_FUNCTION(arg=1, lineno=987)
DEBUG:numba.core.byteflow:stack ['$138make_function.12', '$152get_iter.19']
DEBUG:numba.core.byteflow:dispatch pc=156, inst=STORE_DEREF(arg=0, lineno=987)
DEBUG:numba.core.byteflow:stack ['$154call_function.20']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=LOAD_CLOSURE(arg=0, lineno=988)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=160, inst=BUILD_TUPLE(arg=1, lineno=988)
DEBUG:numba.core.byteflow:stack ['$158load_closure.21']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_CONST(arg=8, lineno=988)
DEBUG:numba.core.byteflow:stack ['$160build_tuple.22']
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_CONST(arg=7, lineno=988)
DEBUG:numba.core.byteflow:stack ['$160build_tuple.22', '$const162.23']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=MAKE_FUNCTION(arg=8, lineno=988)
DEBUG:numba.core.byteflow:stack ['$160build_tuple.22', '$const162.23', '$const164.24']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=LOAD_GLOBAL(arg=7, lineno=988)
DEBUG:numba.core.byteflow:stack ['$166make_function.25']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=LOAD_CONST(arg=3, lineno=988)
DEBUG:numba.core.byteflow:stack ['$166make_function.25', '$168load_global.26']
DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_GLOBAL(arg=2, lineno=988)
DEBUG:numba.core.byteflow:stack ['$166make_function.25', '$168load_global.26', '$const170.27']
DEBUG:numba.core.byteflow:dispatch pc=174, inst=LOAD_DEREF(arg=0, lineno=988)
DEBUG:numba.core.byteflow:stack ['$166make_function.25', '$168load_global.26', '$const170.27', '$172load_global.28']
DEBUG:numba.core.byteflow:dispatch pc=176, inst=CALL_FUNCTION(arg=1, lineno=988)
DEBUG:numba.core.byteflow:stack ['$166make_function.25', '$168load_global.26', '$const170.27', '$172load_global.28', '$174load_deref.29']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=CALL_FUNCTION(arg=2, lineno=988)
DEBUG:numba.core.byteflow:stack ['$166make_function.25', '$168load_global.26', '$const170.27', '$176call_function.30']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=GET_ITER(arg=None, lineno=988)
DEBUG:numba.core.byteflow:stack ['$166make_function.25', '$178call_function.31']
DEBUG:numba.core.byteflow:dispatch pc=182, inst=CALL_FUNCTION(arg=1, lineno=988)
DEBUG:numba.core.byteflow:stack ['$166make_function.25', '$180get_iter.32']
DEBUG:numba.core.byteflow:dispatch pc=184, inst=STORE_FAST(arg=8, lineno=988)
DEBUG:numba.core.byteflow:stack ['$182call_function.33']
DEBUG:numba.core.byteflow:dispatch pc=186, inst=LOAD_GLOBAL(arg=8, lineno=990)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=188, inst=LOAD_DEREF(arg=1, lineno=990)
DEBUG:numba.core.byteflow:stack ['$186load_global.34']
DEBUG:numba.core.byteflow:dispatch pc=190, inst=LOAD_CONST(arg=9, lineno=990)
DEBUG:numba.core.byteflow:stack ['$186load_global.34', '$188load_deref.35']
DEBUG:numba.core.byteflow:dispatch pc=192, inst=LOAD_CONST(arg=10, lineno=990)
DEBUG:numba.core.byteflow:stack ['$186load_global.34', '$188load_deref.35', '$const190.36']
DEBUG:numba.core.byteflow:dispatch pc=194, inst=LOAD_FAST(arg=2, lineno=990)
DEBUG:numba.core.byteflow:stack ['$186load_global.34', '$188load_deref.35', '$const190.36', '$const192.37']
DEBUG:numba.core.byteflow:dispatch pc=196, inst=LOAD_CONST(arg=11, lineno=990)
DEBUG:numba.core.byteflow:stack ['$186load_global.34', '$188load_deref.35', '$const190.36', '$const192.37', '$period194.38']
DEBUG:numba.core.byteflow:dispatch pc=198, inst=CALL_FUNCTION_KW(arg=4, lineno=990)
DEBUG:numba.core.byteflow:stack ['$186load_global.34', '$188load_deref.35', '$const190.36', '$const192.37', '$period194.38', '$const196.39']
DEBUG:numba.core.byteflow:dispatch pc=200, inst=LOAD_CONST(arg=3, lineno=990)
DEBUG:numba.core.byteflow:stack ['$198call_function_kw.40']
DEBUG:numba.core.byteflow:dispatch pc=202, inst=LOAD_CONST(arg=12, lineno=990)
DEBUG:numba.core.byteflow:stack ['$198call_function_kw.40', '$const200.41']
DEBUG:numba.core.byteflow:dispatch pc=204, inst=BUILD_SLICE(arg=2, lineno=990)
DEBUG:numba.core.byteflow:stack ['$198call_function_kw.40', '$const200.41', '$const202.42']
DEBUG:numba.core.byteflow:dispatch pc=206, inst=BINARY_SUBSCR(arg=None, lineno=990)
DEBUG:numba.core.byteflow:stack ['$198call_function_kw.40', '$204build_slice.44']
DEBUG:numba.core.byteflow:dispatch pc=208, inst=STORE_FAST(arg=9, lineno=990)
DEBUG:numba.core.byteflow:stack ['$206binary_subscr.45']
DEBUG:numba.core.byteflow:dispatch pc=210, inst=LOAD_GLOBAL(arg=8, lineno=991)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=212, inst=LOAD_DEREF(arg=0, lineno=991)
DEBUG:numba.core.byteflow:stack ['$210load_global.46']
DEBUG:numba.core.byteflow:dispatch pc=214, inst=LOAD_CONST(arg=9, lineno=991)
DEBUG:numba.core.byteflow:stack ['$210load_global.46', '$212load_deref.47']
DEBUG:numba.core.byteflow:dispatch pc=216, inst=LOAD_CONST(arg=10, lineno=991)
DEBUG:numba.core.byteflow:stack ['$210load_global.46', '$212load_deref.47', '$const214.48']
DEBUG:numba.core.byteflow:dispatch pc=218, inst=LOAD_FAST(arg=7, lineno=991)
DEBUG:numba.core.byteflow:stack ['$210load_global.46', '$212load_deref.47', '$const214.48', '$const216.49']
DEBUG:numba.core.byteflow:dispatch pc=220, inst=LOAD_CONST(arg=11, lineno=991)
DEBUG:numba.core.byteflow:stack ['$210load_global.46', '$212load_deref.47', '$const214.48', '$const216.49', '$nlag218.50']
DEBUG:numba.core.byteflow:dispatch pc=222, inst=CALL_FUNCTION_KW(arg=4, lineno=991)
DEBUG:numba.core.byteflow:stack ['$210load_global.46', '$212load_deref.47', '$const214.48', '$const216.49', '$nlag218.50', '$const220.51']
DEBUG:numba.core.byteflow:dispatch pc=224, inst=LOAD_CONST(arg=3, lineno=991)
DEBUG:numba.core.byteflow:stack ['$222call_function_kw.52']
DEBUG:numba.core.byteflow:dispatch pc=226, inst=LOAD_CONST(arg=12, lineno=991)
DEBUG:numba.core.byteflow:stack ['$222call_function_kw.52', '$const224.53']
DEBUG:numba.core.byteflow:dispatch pc=228, inst=BUILD_SLICE(arg=2, lineno=991)
DEBUG:numba.core.byteflow:stack ['$222call_function_kw.52', '$const224.53', '$const226.54']
DEBUG:numba.core.byteflow:dispatch pc=230, inst=BINARY_SUBSCR(arg=None, lineno=991)
DEBUG:numba.core.byteflow:stack ['$222call_function_kw.52', '$228build_slice.56']
DEBUG:numba.core.byteflow:dispatch pc=232, inst=STORE_FAST(arg=10, lineno=991)
DEBUG:numba.core.byteflow:stack ['$230binary_subscr.57']
DEBUG:numba.core.byteflow:dispatch pc=234, inst=LOAD_GLOBAL(arg=8, lineno=992)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=236, inst=LOAD_FAST(arg=8, lineno=992)
DEBUG:numba.core.byteflow:stack ['$234load_global.58']
DEBUG:numba.core.byteflow:dispatch pc=238, inst=LOAD_CONST(arg=9, lineno=992)
DEBUG:numba.core.byteflow:stack ['$234load_global.58', '$diff2x236.59']
DEBUG:numba.core.byteflow:dispatch pc=240, inst=LOAD_CONST(arg=10, lineno=992)
DEBUG:numba.core.byteflow:stack ['$234load_global.58', '$diff2x236.59', '$const238.60']
DEBUG:numba.core.byteflow:dispatch pc=242, inst=LOAD_FAST(arg=7, lineno=992)
DEBUG:numba.core.byteflow:stack ['$234load_global.58', '$diff2x236.59', '$const238.60', '$const240.61']
DEBUG:numba.core.byteflow:dispatch pc=244, inst=LOAD_CONST(arg=11, lineno=992)
DEBUG:numba.core.byteflow:stack ['$234load_global.58', '$diff2x236.59', '$const238.60', '$const240.61', '$nlag242.62']
DEBUG:numba.core.byteflow:dispatch pc=246, inst=CALL_FUNCTION_KW(arg=4, lineno=992)
DEBUG:numba.core.byteflow:stack ['$234load_global.58', '$diff2x236.59', '$const238.60', '$const240.61', '$nlag242.62', '$const244.63']
DEBUG:numba.core.byteflow:dispatch pc=248, inst=LOAD_CONST(arg=3, lineno=992)
DEBUG:numba.core.byteflow:stack ['$246call_function_kw.64']
DEBUG:numba.core.byteflow:dispatch pc=250, inst=LOAD_CONST(arg=12, lineno=992)
DEBUG:numba.core.byteflow:stack ['$246call_function_kw.64', '$const248.65']
DEBUG:numba.core.byteflow:dispatch pc=252, inst=BUILD_SLICE(arg=2, lineno=992)
DEBUG:numba.core.byteflow:stack ['$246call_function_kw.64', '$const248.65', '$const250.66']
DEBUG:numba.core.byteflow:dispatch pc=254, inst=BINARY_SUBSCR(arg=None, lineno=992)
DEBUG:numba.core.byteflow:stack ['$246call_function_kw.64', '$252build_slice.68']
DEBUG:numba.core.byteflow:dispatch pc=256, inst=STORE_FAST(arg=11, lineno=992)
DEBUG:numba.core.byteflow:stack ['$254binary_subscr.69']
DEBUG:numba.core.byteflow:dispatch pc=258, inst=LOAD_GLOBAL(arg=9, lineno=994)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=260, inst=LOAD_DEREF(arg=1, lineno=994)
DEBUG:numba.core.byteflow:stack ['$258load_global.70']
DEBUG:numba.core.byteflow:dispatch pc=262, inst=LOAD_FAST(arg=2, lineno=994)
DEBUG:numba.core.byteflow:stack ['$258load_global.70', '$260load_deref.71']
DEBUG:numba.core.byteflow:dispatch pc=264, inst=LOAD_CONST(arg=13, lineno=994)
DEBUG:numba.core.byteflow:stack ['$258load_global.70', '$260load_deref.71', '$period262.72']
DEBUG:numba.core.byteflow:dispatch pc=266, inst=CALL_FUNCTION_KW(arg=2, lineno=994)
DEBUG:numba.core.byteflow:stack ['$258load_global.70', '$260load_deref.71', '$period262.72', '$const264.73']
DEBUG:numba.core.byteflow:dispatch pc=268, inst=LOAD_CONST(arg=3, lineno=994)
DEBUG:numba.core.byteflow:stack ['$266call_function_kw.74']
DEBUG:numba.core.byteflow:dispatch pc=270, inst=LOAD_CONST(arg=12, lineno=994)
DEBUG:numba.core.byteflow:stack ['$266call_function_kw.74', '$const268.75']
DEBUG:numba.core.byteflow:dispatch pc=272, inst=BUILD_SLICE(arg=2, lineno=994)
DEBUG:numba.core.byteflow:stack ['$266call_function_kw.74', '$const268.75', '$const270.76']
DEBUG:numba.core.byteflow:dispatch pc=274, inst=BINARY_SUBSCR(arg=None, lineno=994)
DEBUG:numba.core.byteflow:stack ['$266call_function_kw.74', '$272build_slice.78']
DEBUG:numba.core.byteflow:dispatch pc=276, inst=STORE_FAST(arg=12, lineno=994)
DEBUG:numba.core.byteflow:stack ['$274binary_subscr.79']
DEBUG:numba.core.byteflow:dispatch pc=278, inst=LOAD_GLOBAL(arg=9, lineno=995)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=280, inst=LOAD_DEREF(arg=0, lineno=995)
DEBUG:numba.core.byteflow:stack ['$278load_global.80']
DEBUG:numba.core.byteflow:dispatch pc=282, inst=LOAD_FAST(arg=7, lineno=995)
DEBUG:numba.core.byteflow:stack ['$278load_global.80', '$280load_deref.81']
DEBUG:numba.core.byteflow:dispatch pc=284, inst=LOAD_CONST(arg=13, lineno=995)
DEBUG:numba.core.byteflow:stack ['$278load_global.80', '$280load_deref.81', '$nlag282.82']
DEBUG:numba.core.byteflow:dispatch pc=286, inst=CALL_FUNCTION_KW(arg=2, lineno=995)
DEBUG:numba.core.byteflow:stack ['$278load_global.80', '$280load_deref.81', '$nlag282.82', '$const284.83']
DEBUG:numba.core.byteflow:dispatch pc=288, inst=LOAD_CONST(arg=3, lineno=995)
DEBUG:numba.core.byteflow:stack ['$286call_function_kw.84']
DEBUG:numba.core.byteflow:dispatch pc=290, inst=LOAD_CONST(arg=12, lineno=995)
DEBUG:numba.core.byteflow:stack ['$286call_function_kw.84', '$const288.85']
DEBUG:numba.core.byteflow:dispatch pc=292, inst=BUILD_SLICE(arg=2, lineno=995)
DEBUG:numba.core.byteflow:stack ['$286call_function_kw.84', '$const288.85', '$const290.86']
DEBUG:numba.core.byteflow:dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=995)
DEBUG:numba.core.byteflow:stack ['$286call_function_kw.84', '$292build_slice.88']
DEBUG:numba.core.byteflow:dispatch pc=296, inst=STORE_FAST(arg=13, lineno=995)
DEBUG:numba.core.byteflow:stack ['$294binary_subscr.89']
DEBUG:numba.core.byteflow:dispatch pc=298, inst=LOAD_GLOBAL(arg=9, lineno=996)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=300, inst=LOAD_FAST(arg=8, lineno=996)
DEBUG:numba.core.byteflow:stack ['$298load_global.90']
DEBUG:numba.core.byteflow:dispatch pc=302, inst=LOAD_FAST(arg=7, lineno=996)
DEBUG:numba.core.byteflow:stack ['$298load_global.90', '$diff2x300.91']
DEBUG:numba.core.byteflow:dispatch pc=304, inst=LOAD_CONST(arg=13, lineno=996)
DEBUG:numba.core.byteflow:stack ['$298load_global.90', '$diff2x300.91', '$nlag302.92']
DEBUG:numba.core.byteflow:dispatch pc=306, inst=CALL_FUNCTION_KW(arg=2, lineno=996)
DEBUG:numba.core.byteflow:stack ['$298load_global.90', '$diff2x300.91', '$nlag302.92', '$const304.93']
DEBUG:numba.core.byteflow:dispatch pc=308, inst=LOAD_CONST(arg=3, lineno=996)
DEBUG:numba.core.byteflow:stack ['$306call_function_kw.94']
DEBUG:numba.core.byteflow:dispatch pc=310, inst=LOAD_CONST(arg=12, lineno=996)
DEBUG:numba.core.byteflow:stack ['$306call_function_kw.94', '$const308.95']
DEBUG:numba.core.byteflow:dispatch pc=312, inst=BUILD_SLICE(arg=2, lineno=996)
DEBUG:numba.core.byteflow:stack ['$306call_function_kw.94', '$const308.95', '$const310.96']
DEBUG:numba.core.byteflow:dispatch pc=314, inst=BINARY_SUBSCR(arg=None, lineno=996)
DEBUG:numba.core.byteflow:stack ['$306call_function_kw.94', '$312build_slice.98']
DEBUG:numba.core.byteflow:dispatch pc=316, inst=STORE_FAST(arg=14, lineno=996)
DEBUG:numba.core.byteflow:stack ['$314binary_subscr.99']
DEBUG:numba.core.byteflow:dispatch pc=318, inst=LOAD_GLOBAL(arg=10, lineno=1007)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=320, inst=LOAD_METHOD(arg=11, lineno=1007)
DEBUG:numba.core.byteflow:stack ['$318load_global.100']
DEBUG:numba.core.byteflow:dispatch pc=322, inst=LOAD_FAST(arg=3, lineno=1008)
DEBUG:numba.core.byteflow:stack ['$320load_method.101']
DEBUG:numba.core.byteflow:dispatch pc=324, inst=LOAD_FAST(arg=4, lineno=1009)
DEBUG:numba.core.byteflow:stack ['$320load_method.101', '$extra_args322.102']
DEBUG:numba.core.byteflow:dispatch pc=326, inst=LOAD_FAST(arg=9, lineno=1010)
DEBUG:numba.core.byteflow:stack ['$320load_method.101', '$extra_args322.102', '$default_status324.103']
DEBUG:numba.core.byteflow:dispatch pc=328, inst=LOAD_FAST(arg=10, lineno=1011)
DEBUG:numba.core.byteflow:stack ['$320load_method.101', '$extra_args322.102', '$default_status324.103', '$y_acf_list326.104']
DEBUG:numba.core.byteflow:dispatch pc=330, inst=LOAD_FAST(arg=11, lineno=1012)
DEBUG:numba.core.byteflow:stack ['$320load_method.101', '$extra_args322.102', '$default_status324.103', '$y_acf_list326.104', '$diff1y_acf_list328.105']
DEBUG:numba.core.byteflow:dispatch pc=332, inst=CALL_METHOD(arg=5, lineno=1007)
DEBUG:numba.core.byteflow:stack ['$320load_method.101', '$extra_args322.102', '$default_status324.103', '$y_acf_list326.104', '$diff1y_acf_list328.105', '$diff2y_acf_list330.106']
DEBUG:numba.core.byteflow:dispatch pc=334, inst=UNPACK_SEQUENCE(arg=7, lineno=999)
DEBUG:numba.core.byteflow:stack ['$332call_method.107']
DEBUG:numba.core.byteflow:dispatch pc=336, inst=LOAD_FAST(arg=5, lineno=1000)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$334unpack_sequence.110', '$334unpack_sequence.109', '$334unpack_sequence.108']
DEBUG:numba.core.byteflow:dispatch pc=338, inst=LOAD_CONST(arg=14, lineno=1000)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$334unpack_sequence.110', '$334unpack_sequence.109', '$334unpack_sequence.108', '$acfpacf_features336.116']
DEBUG:numba.core.byteflow:dispatch pc=340, inst=STORE_SUBSCR(arg=None, lineno=1000)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$334unpack_sequence.110', '$334unpack_sequence.109', '$334unpack_sequence.108', '$acfpacf_features336.116', '$const338.117']
DEBUG:numba.core.byteflow:dispatch pc=342, inst=LOAD_FAST(arg=5, lineno=1001)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$334unpack_sequence.110', '$334unpack_sequence.109']
DEBUG:numba.core.byteflow:dispatch pc=344, inst=LOAD_CONST(arg=15, lineno=1001)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$334unpack_sequence.110', '$334unpack_sequence.109', '$acfpacf_features342.118']
DEBUG:numba.core.byteflow:dispatch pc=346, inst=STORE_SUBSCR(arg=None, lineno=1001)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$334unpack_sequence.110', '$334unpack_sequence.109', '$acfpacf_features342.118', '$const344.119']
DEBUG:numba.core.byteflow:dispatch pc=348, inst=LOAD_FAST(arg=5, lineno=1002)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$334unpack_sequence.110']
DEBUG:numba.core.byteflow:dispatch pc=350, inst=LOAD_CONST(arg=16, lineno=1002)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$334unpack_sequence.110', '$acfpacf_features348.120']
DEBUG:numba.core.byteflow:dispatch pc=352, inst=STORE_SUBSCR(arg=None, lineno=1002)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$334unpack_sequence.110', '$acfpacf_features348.120', '$const350.121']
DEBUG:numba.core.byteflow:dispatch pc=354, inst=LOAD_FAST(arg=5, lineno=1003)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111']
DEBUG:numba.core.byteflow:dispatch pc=356, inst=LOAD_CONST(arg=17, lineno=1003)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$acfpacf_features354.122']
DEBUG:numba.core.byteflow:dispatch pc=358, inst=STORE_SUBSCR(arg=None, lineno=1003)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$334unpack_sequence.111', '$acfpacf_features354.122', '$const356.123']
DEBUG:numba.core.byteflow:dispatch pc=360, inst=LOAD_FAST(arg=5, lineno=1004)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112']
DEBUG:numba.core.byteflow:dispatch pc=362, inst=LOAD_CONST(arg=18, lineno=1004)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$acfpacf_features360.124']
DEBUG:numba.core.byteflow:dispatch pc=364, inst=STORE_SUBSCR(arg=None, lineno=1004)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$334unpack_sequence.112', '$acfpacf_features360.124', '$const362.125']
DEBUG:numba.core.byteflow:dispatch pc=366, inst=LOAD_FAST(arg=5, lineno=1005)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113']
DEBUG:numba.core.byteflow:dispatch pc=368, inst=LOAD_CONST(arg=19, lineno=1005)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$acfpacf_features366.126']
DEBUG:numba.core.byteflow:dispatch pc=370, inst=STORE_SUBSCR(arg=None, lineno=1005)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$334unpack_sequence.113', '$acfpacf_features366.126', '$const368.127']
DEBUG:numba.core.byteflow:dispatch pc=372, inst=LOAD_FAST(arg=5, lineno=1006)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114']
DEBUG:numba.core.byteflow:dispatch pc=374, inst=LOAD_CONST(arg=20, lineno=1006)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$acfpacf_features372.128']
DEBUG:numba.core.byteflow:dispatch pc=376, inst=STORE_SUBSCR(arg=None, lineno=1006)
DEBUG:numba.core.byteflow:stack ['$334unpack_sequence.114', '$acfpacf_features372.128', '$const374.129']
DEBUG:numba.core.byteflow:dispatch pc=378, inst=LOAD_GLOBAL(arg=10, lineno=1021)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=380, inst=LOAD_METHOD(arg=12, lineno=1021)
DEBUG:numba.core.byteflow:stack ['$378load_global.130']
DEBUG:numba.core.byteflow:dispatch pc=382, inst=LOAD_FAST(arg=3, lineno=1022)
DEBUG:numba.core.byteflow:stack ['$380load_method.131']
DEBUG:numba.core.byteflow:dispatch pc=384, inst=LOAD_FAST(arg=4, lineno=1023)
DEBUG:numba.core.byteflow:stack ['$380load_method.131', '$extra_args382.132']
DEBUG:numba.core.byteflow:dispatch pc=386, inst=LOAD_FAST(arg=12, lineno=1024)
DEBUG:numba.core.byteflow:stack ['$380load_method.131', '$extra_args382.132', '$default_status384.133']
DEBUG:numba.core.byteflow:dispatch pc=388, inst=LOAD_FAST(arg=13, lineno=1025)
DEBUG:numba.core.byteflow:stack ['$380load_method.131', '$extra_args382.132', '$default_status384.133', '$y_pacf_list386.134']
DEBUG:numba.core.byteflow:dispatch pc=390, inst=LOAD_FAST(arg=14, lineno=1026)
DEBUG:numba.core.byteflow:stack ['$380load_method.131', '$extra_args382.132', '$default_status384.133', '$y_pacf_list386.134', '$diff1y_pacf_list388.135']
DEBUG:numba.core.byteflow:dispatch pc=392, inst=CALL_METHOD(arg=5, lineno=1021)
DEBUG:numba.core.byteflow:stack ['$380load_method.131', '$extra_args382.132', '$default_status384.133', '$y_pacf_list386.134', '$diff1y_pacf_list388.135', '$diff2y_pacf_list390.136']
DEBUG:numba.core.byteflow:dispatch pc=394, inst=UNPACK_SEQUENCE(arg=4, lineno=1016)
DEBUG:numba.core.byteflow:stack ['$392call_method.137']
DEBUG:numba.core.byteflow:dispatch pc=396, inst=LOAD_FAST(arg=5, lineno=1017)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$394unpack_sequence.140', '$394unpack_sequence.139', '$394unpack_sequence.138']
DEBUG:numba.core.byteflow:dispatch pc=398, inst=LOAD_CONST(arg=21, lineno=1017)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$394unpack_sequence.140', '$394unpack_sequence.139', '$394unpack_sequence.138', '$acfpacf_features396.143']
DEBUG:numba.core.byteflow:dispatch pc=400, inst=STORE_SUBSCR(arg=None, lineno=1017)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$394unpack_sequence.140', '$394unpack_sequence.139', '$394unpack_sequence.138', '$acfpacf_features396.143', '$const398.144']
DEBUG:numba.core.byteflow:dispatch pc=402, inst=LOAD_FAST(arg=5, lineno=1018)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$394unpack_sequence.140', '$394unpack_sequence.139']
DEBUG:numba.core.byteflow:dispatch pc=404, inst=LOAD_CONST(arg=22, lineno=1018)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$394unpack_sequence.140', '$394unpack_sequence.139', '$acfpacf_features402.145']
DEBUG:numba.core.byteflow:dispatch pc=406, inst=STORE_SUBSCR(arg=None, lineno=1018)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$394unpack_sequence.140', '$394unpack_sequence.139', '$acfpacf_features402.145', '$const404.146']
DEBUG:numba.core.byteflow:dispatch pc=408, inst=LOAD_FAST(arg=5, lineno=1019)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$394unpack_sequence.140']
DEBUG:numba.core.byteflow:dispatch pc=410, inst=LOAD_CONST(arg=23, lineno=1019)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$394unpack_sequence.140', '$acfpacf_features408.147']
DEBUG:numba.core.byteflow:dispatch pc=412, inst=STORE_SUBSCR(arg=None, lineno=1019)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$394unpack_sequence.140', '$acfpacf_features408.147', '$const410.148']
DEBUG:numba.core.byteflow:dispatch pc=414, inst=LOAD_FAST(arg=5, lineno=1020)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141']
DEBUG:numba.core.byteflow:dispatch pc=416, inst=LOAD_CONST(arg=24, lineno=1020)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$acfpacf_features414.149']
DEBUG:numba.core.byteflow:dispatch pc=418, inst=STORE_SUBSCR(arg=None, lineno=1020)
DEBUG:numba.core.byteflow:stack ['$394unpack_sequence.141', '$acfpacf_features414.149', '$const416.150']
DEBUG:numba.core.byteflow:dispatch pc=420, inst=LOAD_FAST(arg=5, lineno=1029)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=422, inst=RETURN_VALUE(arg=None, lineno=1029)
DEBUG:numba.core.byteflow:stack ['$acfpacf_features420.151']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'res': '$14load_global.6'}), (16, {'item': '$14load_global.6', 'res': '$16load_attr.7'}), (18, {'res': '$18load_global.8'}), (20, {'item': '$18load_global.8', 'res': '$20load_attr.9'}), (22, {'res': '$22load_global.10'}), (24, {'item': '$22load_global.10', 'res': '$24load_attr.11'}), (26, {'res': '$26load_global.12'}), (28, {'item': '$26load_global.12', 'res': '$28load_attr.13'}), (30, {'res': '$30load_global.14'}), (32, {'item': '$30load_global.14', 'res': '$32load_attr.15'}), (34, {'res': '$34load_global.16'}), (36, {'item': '$34load_global.16', 'res': '$36load_attr.17'}), (38, {'res': '$38load_global.18'}), (40, {'item': '$38load_global.18', 'res': '$40load_attr.19'}), (42, {'res': '$42load_global.20'}), (44, {'item': '$42load_global.20', 'res': '$44load_attr.21'}), (46, {'res': '$const46.22'}), (48, {'keys': '$const46.22', 'keytmps': ['$48build_const_key_map.23', '$48build_const_key_map.24', '$48build_const_key_map.25', '$48build_const_key_map.26', '$48build_const_key_map.27', '$48build_const_key_map.28', '$48build_const_key_map.29', '$48build_const_key_map.30', '$48build_const_key_map.31', '$48build_const_key_map.32', '$48build_const_key_map.33'], 'values': ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$32load_attr.15', '$36load_attr.17', '$40load_attr.19', '$44load_attr.21'], 'res': '$48build_const_key_map.34'}), (50, {'value': '$48build_const_key_map.34'}), (52, {'res': '$52load_global.35'}), (54, {'res': '$54load_deref.36'}), (56, {'func': '$52load_global.35', 'args': ['$54load_deref.36'], 'res': '$56call_function.37'}), (58, {'res': '$const58.38'}), (60, {'lhs': '$56call_function.37', 'rhs': '$const58.38', 'res': '$60compare_op.39'}), (62, {'pred': '$60compare_op.39'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 94: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_global.0'}), (66, {'res': '$66load_deref.1'}), (68, {'func': '$64load_global.0', 'args': ['$66load_deref.1'], 'res': '$68call_function.2'}), (70, {'res': '$period70.3'}), (72, {'lhs': '$68call_function.2', 'rhs': '$period70.3', 'res': '$72compare_op.4'}), (74, {'pred': '$72compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: (), 94: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$76load_global.0'}), (78, {'res': '$78load_global.1'}), (80, {'item': '$78load_global.1', 'res': '$80load_method.2'}), (82, {'res': '$82load_deref.3'}), (84, {'func': '$80load_method.2', 'args': ['$82load_deref.3'], 'res': '$84call_method.4'}), (86, {'func': '$76load_global.0', 'args': ['$84call_method.4'], 'res': '$86call_function.5'}), (88, {'res': '$const88.6'}), (90, {'lhs': '$86call_function.5', 'rhs': '$const88.6', 'res': '$90compare_op.7'}), (92, {'pred': '$90compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 112: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$const94.0'}), (96, {'value': '$const94.0'}), (98, {'res': '$98load_global.1'}), (100, {'item': '$98load_global.1', 'res': '$100load_method.2'}), (102, {'res': '$msg102.3'}), (104, {'func': '$100load_method.2', 'args': ['$msg102.3'], 'res': '$104call_method.4'}), (108, {'res': '$acfpacf_features108.5'}), (110, {'retval': '$acfpacf_features108.5', 'castval': '$110return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$112load_global.0'}), (114, {'res': '$acfpacf_lag114.1'}), (116, {'res': '$116load_global.2'}), (118, {'res': '$118load_deref.3'}), (120, {'func': '$116load_global.2', 'args': ['$118load_deref.3'], 'res': '$120call_function.4'}), (122, {'res': '$const122.5'}), (124, {'lhs': '$120call_function.4', 'rhs': '$const122.5', 'res': '$124binary_subtract.6'}), (126, {'func': '$112load_global.0', 'args': ['$acfpacf_lag114.1', '$124binary_subtract.6'], 'res': '$126call_function.7'}), (128, {'value': '$126call_function.7'}), (130, {'res': '$130load_closure.8'}), (132, {'items': ['$130load_closure.8'], 'res': '$132build_tuple.9'}), (134, {'res': '$const134.10'}), (136, {'res': '$const136.11'}), (138, {'name': '$const136.11', 'code': '$const134.10', 'closure': '$132build_tuple.9', 'annotations': None, 'kwdefaults': None, 'defaults': None, 'res': '$138make_function.12'}), (140, {'res': '$140load_global.13'}), (142, {'res': '$const142.14'}), (144, {'res': '$144load_global.15'}), (146, {'res': '$146load_deref.16'}), (148, {'func': '$144load_global.15', 'args': ['$146load_deref.16'], 'res': '$148call_function.17'}), (150, {'func': '$140load_global.13', 'args': ['$const142.14', '$148call_function.17'], 'res': '$150call_function.18'}), (152, {'value': '$150call_function.18', 'res': '$152get_iter.19'}), (154, {'func': '$138make_function.12', 'args': ['$152get_iter.19'], 'res': '$154call_function.20'}), (156, {'value': '$154call_function.20'}), (158, {'res': '$158load_closure.21'}), (160, {'items': ['$158load_closure.21'], 'res': '$160build_tuple.22'}), (162, {'res': '$const162.23'}), (164, {'res': '$const164.24'}), (166, {'name': '$const164.24', 'code': '$const162.23', 'closure': '$160build_tuple.22', 'annotations': None, 'kwdefaults': None, 'defaults': None, 'res': '$166make_function.25'}), (168, {'res': '$168load_global.26'}), (170, {'res': '$const170.27'}), (172, {'res': '$172load_global.28'}), (174, {'res': '$174load_deref.29'}), (176, {'func': '$172load_global.28', 'args': ['$174load_deref.29'], 'res': '$176call_function.30'}), (178, {'func': '$168load_global.26', 'args': ['$const170.27', '$176call_function.30'], 'res': '$178call_function.31'}), (180, {'value': '$178call_function.31', 'res': '$180get_iter.32'}), (182, {'func': '$166make_function.25', 'args': ['$180get_iter.32'], 'res': '$182call_function.33'}), (184, {'value': '$182call_function.33'}), (186, {'res': '$186load_global.34'}), (188, {'res': '$188load_deref.35'}), (190, {'res': '$const190.36'}), (192, {'res': '$const192.37'}), (194, {'res': '$period194.38'}), (196, {'res': '$const196.39'}), (198, {'func': '$186load_global.34', 'args': ['$188load_deref.35', '$const190.36', '$const192.37', '$period194.38'], 'names': '$const196.39', 'res': '$198call_function_kw.40'}), (200, {'res': '$const200.41'}), (202, {'res': '$const202.42'}), (204, {'start': '$const200.41', 'stop': '$const202.42', 'step': None, 'res': '$204build_slice.44', 'slicevar': '$204build_slice.43'}), (206, {'index': '$204build_slice.44', 'target': '$198call_function_kw.40', 'res': '$206binary_subscr.45'}), (208, {'value': '$206binary_subscr.45'}), (210, {'res': '$210load_global.46'}), (212, {'res': '$212load_deref.47'}), (214, {'res': '$const214.48'}), (216, {'res': '$const216.49'}), (218, {'res': '$nlag218.50'}), (220, {'res': '$const220.51'}), (222, {'func': '$210load_global.46', 'args': ['$212load_deref.47', '$const214.48', '$const216.49', '$nlag218.50'], 'names': '$const220.51', 'res': '$222call_function_kw.52'}), (224, {'res': '$const224.53'}), (226, {'res': '$const226.54'}), (228, {'start': '$const224.53', 'stop': '$const226.54', 'step': None, 'res': '$228build_slice.56', 'slicevar': '$228build_slice.55'}), (230, {'index': '$228build_slice.56', 'target': '$222call_function_kw.52', 'res': '$230binary_subscr.57'}), (232, {'value': '$230binary_subscr.57'}), (234, {'res': '$234load_global.58'}), (236, {'res': '$diff2x236.59'}), (238, {'res': '$const238.60'}), (240, {'res': '$const240.61'}), (242, {'res': '$nlag242.62'}), (244, {'res': '$const244.63'}), (246, {'func': '$234load_global.58', 'args': ['$diff2x236.59', '$const238.60', '$const240.61', '$nlag242.62'], 'names': '$const244.63', 'res': '$246call_function_kw.64'}), (248, {'res': '$const248.65'}), (250, {'res': '$const250.66'}), (252, {'start': '$const248.65', 'stop': '$const250.66', 'step': None, 'res': '$252build_slice.68', 'slicevar': '$252build_slice.67'}), (254, {'index': '$252build_slice.68', 'target': '$246call_function_kw.64', 'res': '$254binary_subscr.69'}), (256, {'value': '$254binary_subscr.69'}), (258, {'res': '$258load_global.70'}), (260, {'res': '$260load_deref.71'}), (262, {'res': '$period262.72'}), (264, {'res': '$const264.73'}), (266, {'func': '$258load_global.70', 'args': ['$260load_deref.71', '$period262.72'], 'names': '$const264.73', 'res': '$266call_function_kw.74'}), (268, {'res': '$const268.75'}), (270, {'res': '$const270.76'}), (272, {'start': '$const268.75', 'stop': '$const270.76', 'step': None, 'res': '$272build_slice.78', 'slicevar': '$272build_slice.77'}), (274, {'index': '$272build_slice.78', 'target': '$266call_function_kw.74', 'res': '$274binary_subscr.79'}), (276, {'value': '$274binary_subscr.79'}), (278, {'res': '$278load_global.80'}), (280, {'res': '$280load_deref.81'}), (282, {'res': '$nlag282.82'}), (284, {'res': '$const284.83'}), (286, {'func': '$278load_global.80', 'args': ['$280load_deref.81', '$nlag282.82'], 'names': '$const284.83', 'res': '$286call_function_kw.84'}), (288, {'res': '$const288.85'}), (290, {'res': '$const290.86'}), (292, {'start': '$const288.85', 'stop': '$const290.86', 'step': None, 'res': '$292build_slice.88', 'slicevar': '$292build_slice.87'}), (294, {'index': '$292build_slice.88', 'target': '$286call_function_kw.84', 'res': '$294binary_subscr.89'}), (296, {'value': '$294binary_subscr.89'}), (298, {'res': '$298load_global.90'}), (300, {'res': '$diff2x300.91'}), (302, {'res': '$nlag302.92'}), (304, {'res': '$const304.93'}), (306, {'func': '$298load_global.90', 'args': ['$diff2x300.91', '$nlag302.92'], 'names': '$const304.93', 'res': '$306call_function_kw.94'}), (308, {'res': '$const308.95'}), (310, {'res': '$const310.96'}), (312, {'start': '$const308.95', 'stop': '$const310.96', 'step': None, 'res': '$312build_slice.98', 'slicevar': '$312build_slice.97'}), (314, {'index': '$312build_slice.98', 'target': '$306call_function_kw.94', 'res': '$314binary_subscr.99'}), (316, {'value': '$314binary_subscr.99'}), (318, {'res': '$318load_global.100'}), (320, {'item': '$318load_global.100', 'res': '$320load_method.101'}), (322, {'res': '$extra_args322.102'}), (324, {'res': '$default_status324.103'}), (326, {'res': '$y_acf_list326.104'}), (328, {'res': '$diff1y_acf_list328.105'}), (330, {'res': '$diff2y_acf_list330.106'}), (332, {'func': '$320load_method.101', 'args': ['$extra_args322.102', '$default_status324.103', '$y_acf_list326.104', '$diff1y_acf_list328.105', '$diff2y_acf_list330.106'], 'res': '$332call_method.107'}), (334, {'iterable': '$332call_method.107', 'stores': ['$334unpack_sequence.108', '$334unpack_sequence.109', '$334unpack_sequence.110', '$334unpack_sequence.111', '$334unpack_sequence.112', '$334unpack_sequence.113', '$334unpack_sequence.114'], 'tupleobj': '$334unpack_sequence.115'}), (336, {'res': '$acfpacf_features336.116'}), (338, {'res': '$const338.117'}), (340, {'target': '$acfpacf_features336.116', 'index': '$const338.117', 'value': '$334unpack_sequence.108'}), (342, {'res': '$acfpacf_features342.118'}), (344, {'res': '$const344.119'}), (346, {'target': '$acfpacf_features342.118', 'index': '$const344.119', 'value': '$334unpack_sequence.109'}), (348, {'res': '$acfpacf_features348.120'}), (350, {'res': '$const350.121'}), (352, {'target': '$acfpacf_features348.120', 'index': '$const350.121', 'value': '$334unpack_sequence.110'}), (354, {'res': '$acfpacf_features354.122'}), (356, {'res': '$const356.123'}), (358, {'target': '$acfpacf_features354.122', 'index': '$const356.123', 'value': '$334unpack_sequence.111'}), (360, {'res': '$acfpacf_features360.124'}), (362, {'res': '$const362.125'}), (364, {'target': '$acfpacf_features360.124', 'index': '$const362.125', 'value': '$334unpack_sequence.112'}), (366, {'res': '$acfpacf_features366.126'}), (368, {'res': '$const368.127'}), (370, {'target': '$acfpacf_features366.126', 'index': '$const368.127', 'value': '$334unpack_sequence.113'}), (372, {'res': '$acfpacf_features372.128'}), (374, {'res': '$const374.129'}), (376, {'target': '$acfpacf_features372.128', 'index': '$const374.129', 'value': '$334unpack_sequence.114'}), (378, {'res': '$378load_global.130'}), (380, {'item': '$378load_global.130', 'res': '$380load_method.131'}), (382, {'res': '$extra_args382.132'}), (384, {'res': '$default_status384.133'}), (386, {'res': '$y_pacf_list386.134'}), (388, {'res': '$diff1y_pacf_list388.135'}), (390, {'res': '$diff2y_pacf_list390.136'}), (392, {'func': '$380load_method.131', 'args': ['$extra_args382.132', '$default_status384.133', '$y_pacf_list386.134', '$diff1y_pacf_list388.135', '$diff2y_pacf_list390.136'], 'res': '$392call_method.137'}), (394, {'iterable': '$392call_method.137', 'stores': ['$394unpack_sequence.138', '$394unpack_sequence.139', '$394unpack_sequence.140', '$394unpack_sequence.141'], 'tupleobj': '$394unpack_sequence.142'}), (396, {'res': '$acfpacf_features396.143'}), (398, {'res': '$const398.144'}), (400, {'target': '$acfpacf_features396.143', 'index': '$const398.144', 'value': '$394unpack_sequence.138'}), (402, {'res': '$acfpacf_features402.145'}), (404, {'res': '$const404.146'}), (406, {'target': '$acfpacf_features402.145', 'index': '$const404.146', 'value': '$394unpack_sequence.139'}), (408, {'res': '$acfpacf_features408.147'}), (410, {'res': '$const410.148'}), (412, {'target': '$acfpacf_features408.147', 'index': '$const410.148', 'value': '$394unpack_sequence.140'}), (414, {'res': '$acfpacf_features414.149'}), (416, {'res': '$const416.150'}), (418, {'target': '$acfpacf_features414.149', 'index': '$const416.150', 'value': '$394unpack_sequence.141'}), (420, {'res': '$acfpacf_features420.151'}), (422, {'retval': '$acfpacf_features420.151', 'castval': '$422return_value.152'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    acfpacf_lag = arg(1, name=acfpacf_lag)   ['acfpacf_lag']
    period = arg(2, name=period)             ['period']
    extra_args = arg(3, name=extra_args)     ['extra_args']
    default_status = arg(4, name=default_status) ['default_status']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=nan) ['$2load_global.0', '$4load_attr.1']
    $6load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.2']
    $8load_attr.3 = getattr(value=$6load_global.2, attr=nan) ['$6load_global.2', '$8load_attr.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=nan) ['$10load_global.4', '$12load_attr.5']
    $14load_global.6 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.6']
    $16load_attr.7 = getattr(value=$14load_global.6, attr=nan) ['$14load_global.6', '$16load_attr.7']
    $18load_global.8 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$18load_global.8']
    $20load_attr.9 = getattr(value=$18load_global.8, attr=nan) ['$18load_global.8', '$20load_attr.9']
    $22load_global.10 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$22load_global.10']
    $24load_attr.11 = getattr(value=$22load_global.10, attr=nan) ['$22load_global.10', '$24load_attr.11']
    $26load_global.12 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$26load_global.12']
    $28load_attr.13 = getattr(value=$26load_global.12, attr=nan) ['$26load_global.12', '$28load_attr.13']
    $30load_global.14 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$30load_global.14']
    $32load_attr.15 = getattr(value=$30load_global.14, attr=nan) ['$30load_global.14', '$32load_attr.15']
    $34load_global.16 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$34load_global.16']
    $36load_attr.17 = getattr(value=$34load_global.16, attr=nan) ['$34load_global.16', '$36load_attr.17']
    $38load_global.18 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$38load_global.18']
    $40load_attr.19 = getattr(value=$38load_global.18, attr=nan) ['$38load_global.18', '$40load_attr.19']
    $42load_global.20 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$42load_global.20']
    $44load_attr.21 = getattr(value=$42load_global.20, attr=nan) ['$42load_global.20', '$44load_attr.21']
    $48build_const_key_map.23 = const(str, y_acf1) ['$48build_const_key_map.23']
    $48build_const_key_map.24 = const(str, y_acf5) ['$48build_const_key_map.24']
    $48build_const_key_map.25 = const(str, diff1y_acf1) ['$48build_const_key_map.25']
    $48build_const_key_map.26 = const(str, diff1y_acf5) ['$48build_const_key_map.26']
    $48build_const_key_map.27 = const(str, diff2y_acf1) ['$48build_const_key_map.27']
    $48build_const_key_map.28 = const(str, diff2y_acf5) ['$48build_const_key_map.28']
    $48build_const_key_map.29 = const(str, y_pacf5) ['$48build_const_key_map.29']
    $48build_const_key_map.30 = const(str, diff1y_pacf5) ['$48build_const_key_map.30']
    $48build_const_key_map.31 = const(str, diff2y_pacf5) ['$48build_const_key_map.31']
    $48build_const_key_map.32 = const(str, seas_acf1) ['$48build_const_key_map.32']
    $48build_const_key_map.33 = const(str, seas_pacf1) ['$48build_const_key_map.33']
    acfpacf_features = build_map(items=[(Var($48build_const_key_map.23, tsfeatures.py:967), Var($4load_attr.1, tsfeatures.py:968)), (Var($48build_const_key_map.24, tsfeatures.py:967), Var($8load_attr.3, tsfeatures.py:969)), (Var($48build_const_key_map.25, tsfeatures.py:967), Var($12load_attr.5, tsfeatures.py:970)), (Var($48build_const_key_map.26, tsfeatures.py:967), Var($16load_attr.7, tsfeatures.py:971)), (Var($48build_const_key_map.27, tsfeatures.py:967), Var($20load_attr.9, tsfeatures.py:972)), (Var($48build_const_key_map.28, tsfeatures.py:967), Var($24load_attr.11, tsfeatures.py:973)), (Var($48build_const_key_map.29, tsfeatures.py:967), Var($28load_attr.13, tsfeatures.py:974)), (Var($48build_const_key_map.30, tsfeatures.py:967), Var($32load_attr.15, tsfeatures.py:975)), (Var($48build_const_key_map.31, tsfeatures.py:967), Var($36load_attr.17, tsfeatures.py:976)), (Var($48build_const_key_map.32, tsfeatures.py:967), Var($40load_attr.19, tsfeatures.py:977)), (Var($48build_const_key_map.33, tsfeatures.py:967), Var($44load_attr.21, tsfeatures.py:978))], size=2, literal_value={'y_acf1': _UNKNOWN_VALUE($4load_attr.1), 'y_acf5': _UNKNOWN_VALUE($8load_attr.3), 'diff1y_acf1': _UNKNOWN_VALUE($12load_attr.5), 'diff1y_acf5': _UNKNOWN_VALUE($16load_attr.7), 'diff2y_acf1': _UNKNOWN_VALUE($20load_attr.9), 'diff2y_acf5': _UNKNOWN_VALUE($24load_attr.11), 'y_pacf5': _UNKNOWN_VALUE($28load_attr.13), 'diff1y_pacf5': _UNKNOWN_VALUE($32load_attr.15), 'diff2y_pacf5': _UNKNOWN_VALUE($36load_attr.17), 'seas_acf1': _UNKNOWN_VALUE($40load_attr.19), 'seas_pacf1': _UNKNOWN_VALUE($44load_attr.21)}, value_indexes={'y_acf1': 0, 'y_acf5': 1, 'diff1y_acf1': 2, 'diff1y_acf5': 3, 'diff2y_acf1': 4, 'diff2y_acf5': 5, 'y_pacf5': 6, 'diff1y_pacf5': 7, 'diff2y_pacf5': 8, 'seas_acf1': 9, 'seas_pacf1': 10}) ['$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$32load_attr.15', '$36load_attr.17', '$40load_attr.19', '$44load_attr.21', '$48build_const_key_map.23', '$48build_const_key_map.24', '$48build_const_key_map.25', '$48build_const_key_map.26', '$48build_const_key_map.27', '$48build_const_key_map.28', '$48build_const_key_map.29', '$48build_const_key_map.30', '$48build_const_key_map.31', '$48build_const_key_map.32', '$48build_const_key_map.33', '$4load_attr.1', '$8load_attr.3', 'acfpacf_features']
    $52load_global.35 = global(len: <built-in function len>) ['$52load_global.35']
    $56call_function.37 = call $52load_global.35(x, func=$52load_global.35, args=[Var(x, tsfeatures.py:968)], kws=(), vararg=None) ['$52load_global.35', '$56call_function.37', 'x']
    $const58.38 = const(int, 10)             ['$const58.38']
    $60compare_op.39 = $56call_function.37 < $const58.38 ['$56call_function.37', '$60compare_op.39', '$const58.38']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60compare_op.39, func=bool62, args=(Var($60compare_op.39, tsfeatures.py:980),), kws=(), vararg=None) ['$60compare_op.39', '$62pred', 'bool62']
    branch $62pred, 94, 64                   ['$62pred']
label 64:
    $64load_global.0 = global(len: <built-in function len>) ['$64load_global.0']
    $68call_function.2 = call $64load_global.0(x, func=$64load_global.0, args=[Var(x, tsfeatures.py:968)], kws=(), vararg=None) ['$64load_global.0', '$68call_function.2', 'x']
    $72compare_op.4 = $68call_function.2 < period ['$68call_function.2', '$72compare_op.4', 'period']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.4, func=bool74, args=(Var($72compare_op.4, tsfeatures.py:980),), kws=(), vararg=None) ['$72compare_op.4', '$74pred', 'bool74']
    branch $74pred, 94, 76                   ['$74pred']
label 76:
    $76load_global.0 = global(len: <built-in function len>) ['$76load_global.0']
    $78load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$78load_global.1']
    $80load_method.2 = getattr(value=$78load_global.1, attr=unique) ['$78load_global.1', '$80load_method.2']
    $84call_method.4 = call $80load_method.2(x, func=$80load_method.2, args=[Var(x, tsfeatures.py:968)], kws=(), vararg=None) ['$80load_method.2', '$84call_method.4', 'x']
    $86call_function.5 = call $76load_global.0($84call_method.4, func=$76load_global.0, args=[Var($84call_method.4, tsfeatures.py:980)], kws=(), vararg=None) ['$76load_global.0', '$84call_method.4', '$86call_function.5']
    $const88.6 = const(int, 1)               ['$const88.6']
    $90compare_op.7 = $86call_function.5 == $const88.6 ['$86call_function.5', '$90compare_op.7', '$const88.6']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.7, func=bool92, args=(Var($90compare_op.7, tsfeatures.py:980),), kws=(), vararg=None) ['$90compare_op.7', '$92pred', 'bool92']
    branch $92pred, 94, 112                  ['$92pred']
label 94:
    msg = const(str, Length is shorter than period, or constant time series! Unable to calculate acf/pacf features!) ['msg']
    $98load_global.1 = global(logging: <module 'logging' from '/usr/lib/python3.8/logging/__init__.py'>) ['$98load_global.1']
    $100load_method.2 = getattr(value=$98load_global.1, attr=error) ['$100load_method.2', '$98load_global.1']
    $104call_method.4 = call $100load_method.2(msg, func=$100load_method.2, args=[Var(msg, tsfeatures.py:981)], kws=(), vararg=None) ['$100load_method.2', '$104call_method.4', 'msg']
    $110return_value.6 = cast(value=acfpacf_features) ['$110return_value.6', 'acfpacf_features']
    return $110return_value.6                ['$110return_value.6']
label 112:
    $112load_global.0 = global(min: <built-in function min>) ['$112load_global.0']
    $116load_global.2 = global(len: <built-in function len>) ['$116load_global.2']
    $120call_function.4 = call $116load_global.2(x, func=$116load_global.2, args=[Var(x, tsfeatures.py:968)], kws=(), vararg=None) ['$116load_global.2', '$120call_function.4', 'x']
    $const122.5 = const(int, 2)              ['$const122.5']
    $124binary_subtract.6 = $120call_function.4 - $const122.5 ['$120call_function.4', '$124binary_subtract.6', '$const122.5']
    nlag = call $112load_global.0(acfpacf_lag, $124binary_subtract.6, func=$112load_global.0, args=[Var(acfpacf_lag, tsfeatures.py:968), Var($124binary_subtract.6, tsfeatures.py:985)], kws=(), vararg=None) ['$112load_global.0', '$124binary_subtract.6', 'acfpacf_lag', 'nlag']
    $132build_tuple.9 = build_tuple(items=[Var(x, tsfeatures.py:968)]) ['$132build_tuple.9', 'x']
    $const134.10 = const(code, <code object <listcomp> at 0x7faab6709ea0, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 987>) ['$const134.10']
    $const136.11 = const(str, TsFeatures.get_acfpacf_features.<locals>.<listcomp>) ['$const136.11']
    $138make_function.12 = make_function(name=$const136.11, code=<code object <listcomp> at 0x7faab6709ea0, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 987>, closure=$132build_tuple.9, defaults=None) ['$132build_tuple.9', '$138make_function.12', '$const136.11']
    $140load_global.13 = global(range: <class 'range'>) ['$140load_global.13']
    $const142.14 = const(int, 1)             ['$const142.14']
    $144load_global.15 = global(len: <built-in function len>) ['$144load_global.15']
    $148call_function.17 = call $144load_global.15(x, func=$144load_global.15, args=[Var(x, tsfeatures.py:968)], kws=(), vararg=None) ['$144load_global.15', '$148call_function.17', 'x']
    $150call_function.18 = call $140load_global.13($const142.14, $148call_function.17, func=$140load_global.13, args=[Var($const142.14, tsfeatures.py:987), Var($148call_function.17, tsfeatures.py:987)], kws=(), vararg=None) ['$140load_global.13', '$148call_function.17', '$150call_function.18', '$const142.14']
    $152get_iter.19 = getiter(value=$150call_function.18) ['$150call_function.18', '$152get_iter.19']
    diff1x = call $138make_function.12($152get_iter.19, func=$138make_function.12, args=[Var($152get_iter.19, tsfeatures.py:987)], kws=(), vararg=None) ['$138make_function.12', '$152get_iter.19', 'diff1x']
    $160build_tuple.22 = build_tuple(items=[Var(diff1x, tsfeatures.py:987)]) ['$160build_tuple.22', 'diff1x']
    $const162.23 = const(code, <code object <listcomp> at 0x7faab6709f50, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 988>) ['$const162.23']
    $const164.24 = const(str, TsFeatures.get_acfpacf_features.<locals>.<listcomp>) ['$const164.24']
    $166make_function.25 = make_function(name=$const164.24, code=<code object <listcomp> at 0x7faab6709f50, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 988>, closure=$160build_tuple.22, defaults=None) ['$160build_tuple.22', '$166make_function.25', '$const164.24']
    $168load_global.26 = global(range: <class 'range'>) ['$168load_global.26']
    $const170.27 = const(int, 1)             ['$const170.27']
    $172load_global.28 = global(len: <built-in function len>) ['$172load_global.28']
    $176call_function.30 = call $172load_global.28(diff1x, func=$172load_global.28, args=[Var(diff1x, tsfeatures.py:987)], kws=(), vararg=None) ['$172load_global.28', '$176call_function.30', 'diff1x']
    $178call_function.31 = call $168load_global.26($const170.27, $176call_function.30, func=$168load_global.26, args=[Var($const170.27, tsfeatures.py:988), Var($176call_function.30, tsfeatures.py:988)], kws=(), vararg=None) ['$168load_global.26', '$176call_function.30', '$178call_function.31', '$const170.27']
    $180get_iter.32 = getiter(value=$178call_function.31) ['$178call_function.31', '$180get_iter.32']
    diff2x = call $166make_function.25($180get_iter.32, func=$166make_function.25, args=[Var($180get_iter.32, tsfeatures.py:988)], kws=(), vararg=None) ['$166make_function.25', '$180get_iter.32', 'diff2x']
    $186load_global.34 = global(acf: <function acf at 0x7faabc0f9310>) ['$186load_global.34']
    $const190.36 = const(bool, False)        ['$const190.36']
    $const192.37 = const(bool, True)         ['$const192.37']
    $198call_function_kw.40 = call $186load_global.34(x, func=$186load_global.34, args=[Var(x, tsfeatures.py:968)], kws=[('unbiased', Var($const190.36, tsfeatures.py:990)), ('fft', Var($const192.37, tsfeatures.py:990)), ('nlags', Var(period, tsfeatures.py:968))], vararg=None) ['$186load_global.34', '$198call_function_kw.40', '$const190.36', '$const192.37', 'period', 'x']
    $const200.41 = const(int, 1)             ['$const200.41']
    $const202.42 = const(NoneType, None)     ['$const202.42']
    $204build_slice.43 = global(slice: <class 'slice'>) ['$204build_slice.43']
    $204build_slice.44 = call $204build_slice.43($const200.41, $const202.42, func=$204build_slice.43, args=(Var($const200.41, tsfeatures.py:990), Var($const202.42, tsfeatures.py:990)), kws=(), vararg=None) ['$204build_slice.43', '$204build_slice.44', '$const200.41', '$const202.42']
    y_acf_list = getitem(value=$198call_function_kw.40, index=$204build_slice.44, fn=<built-in function getitem>) ['$198call_function_kw.40', '$204build_slice.44', 'y_acf_list']
    $210load_global.46 = global(acf: <function acf at 0x7faabc0f9310>) ['$210load_global.46']
    $const214.48 = const(bool, False)        ['$const214.48']
    $const216.49 = const(bool, True)         ['$const216.49']
    $222call_function_kw.52 = call $210load_global.46(diff1x, func=$210load_global.46, args=[Var(diff1x, tsfeatures.py:987)], kws=[('unbiased', Var($const214.48, tsfeatures.py:991)), ('fft', Var($const216.49, tsfeatures.py:991)), ('nlags', Var(nlag, tsfeatures.py:985))], vararg=None) ['$210load_global.46', '$222call_function_kw.52', '$const214.48', '$const216.49', 'diff1x', 'nlag']
    $const224.53 = const(int, 1)             ['$const224.53']
    $const226.54 = const(NoneType, None)     ['$const226.54']
    $228build_slice.55 = global(slice: <class 'slice'>) ['$228build_slice.55']
    $228build_slice.56 = call $228build_slice.55($const224.53, $const226.54, func=$228build_slice.55, args=(Var($const224.53, tsfeatures.py:991), Var($const226.54, tsfeatures.py:991)), kws=(), vararg=None) ['$228build_slice.55', '$228build_slice.56', '$const224.53', '$const226.54']
    diff1y_acf_list = getitem(value=$222call_function_kw.52, index=$228build_slice.56, fn=<built-in function getitem>) ['$222call_function_kw.52', '$228build_slice.56', 'diff1y_acf_list']
    $234load_global.58 = global(acf: <function acf at 0x7faabc0f9310>) ['$234load_global.58']
    $const238.60 = const(bool, False)        ['$const238.60']
    $const240.61 = const(bool, True)         ['$const240.61']
    $246call_function_kw.64 = call $234load_global.58(diff2x, func=$234load_global.58, args=[Var(diff2x, tsfeatures.py:988)], kws=[('unbiased', Var($const238.60, tsfeatures.py:992)), ('fft', Var($const240.61, tsfeatures.py:992)), ('nlags', Var(nlag, tsfeatures.py:985))], vararg=None) ['$234load_global.58', '$246call_function_kw.64', '$const238.60', '$const240.61', 'diff2x', 'nlag']
    $const248.65 = const(int, 1)             ['$const248.65']
    $const250.66 = const(NoneType, None)     ['$const250.66']
    $252build_slice.67 = global(slice: <class 'slice'>) ['$252build_slice.67']
    $252build_slice.68 = call $252build_slice.67($const248.65, $const250.66, func=$252build_slice.67, args=(Var($const248.65, tsfeatures.py:992), Var($const250.66, tsfeatures.py:992)), kws=(), vararg=None) ['$252build_slice.67', '$252build_slice.68', '$const248.65', '$const250.66']
    diff2y_acf_list = getitem(value=$246call_function_kw.64, index=$252build_slice.68, fn=<built-in function getitem>) ['$246call_function_kw.64', '$252build_slice.68', 'diff2y_acf_list']
    $258load_global.70 = global(pacf: <function pacf at 0x7faabc0f9430>) ['$258load_global.70']
    $266call_function_kw.74 = call $258load_global.70(x, func=$258load_global.70, args=[Var(x, tsfeatures.py:968)], kws=[('nlags', Var(period, tsfeatures.py:968))], vararg=None) ['$258load_global.70', '$266call_function_kw.74', 'period', 'x']
    $const268.75 = const(int, 1)             ['$const268.75']
    $const270.76 = const(NoneType, None)     ['$const270.76']
    $272build_slice.77 = global(slice: <class 'slice'>) ['$272build_slice.77']
    $272build_slice.78 = call $272build_slice.77($const268.75, $const270.76, func=$272build_slice.77, args=(Var($const268.75, tsfeatures.py:994), Var($const270.76, tsfeatures.py:994)), kws=(), vararg=None) ['$272build_slice.77', '$272build_slice.78', '$const268.75', '$const270.76']
    y_pacf_list = getitem(value=$266call_function_kw.74, index=$272build_slice.78, fn=<built-in function getitem>) ['$266call_function_kw.74', '$272build_slice.78', 'y_pacf_list']
    $278load_global.80 = global(pacf: <function pacf at 0x7faabc0f9430>) ['$278load_global.80']
    $286call_function_kw.84 = call $278load_global.80(diff1x, func=$278load_global.80, args=[Var(diff1x, tsfeatures.py:987)], kws=[('nlags', Var(nlag, tsfeatures.py:985))], vararg=None) ['$278load_global.80', '$286call_function_kw.84', 'diff1x', 'nlag']
    $const288.85 = const(int, 1)             ['$const288.85']
    $const290.86 = const(NoneType, None)     ['$const290.86']
    $292build_slice.87 = global(slice: <class 'slice'>) ['$292build_slice.87']
    $292build_slice.88 = call $292build_slice.87($const288.85, $const290.86, func=$292build_slice.87, args=(Var($const288.85, tsfeatures.py:995), Var($const290.86, tsfeatures.py:995)), kws=(), vararg=None) ['$292build_slice.87', '$292build_slice.88', '$const288.85', '$const290.86']
    diff1y_pacf_list = getitem(value=$286call_function_kw.84, index=$292build_slice.88, fn=<built-in function getitem>) ['$286call_function_kw.84', '$292build_slice.88', 'diff1y_pacf_list']
    $298load_global.90 = global(pacf: <function pacf at 0x7faabc0f9430>) ['$298load_global.90']
    $306call_function_kw.94 = call $298load_global.90(diff2x, func=$298load_global.90, args=[Var(diff2x, tsfeatures.py:988)], kws=[('nlags', Var(nlag, tsfeatures.py:985))], vararg=None) ['$298load_global.90', '$306call_function_kw.94', 'diff2x', 'nlag']
    $const308.95 = const(int, 1)             ['$const308.95']
    $const310.96 = const(NoneType, None)     ['$const310.96']
    $312build_slice.97 = global(slice: <class 'slice'>) ['$312build_slice.97']
    $312build_slice.98 = call $312build_slice.97($const308.95, $const310.96, func=$312build_slice.97, args=(Var($const308.95, tsfeatures.py:996), Var($const310.96, tsfeatures.py:996)), kws=(), vararg=None) ['$312build_slice.97', '$312build_slice.98', '$const308.95', '$const310.96']
    diff2y_pacf_list = getitem(value=$306call_function_kw.94, index=$312build_slice.98, fn=<built-in function getitem>) ['$306call_function_kw.94', '$312build_slice.98', 'diff2y_pacf_list']
    $318load_global.100 = global(TsFeatures: <class 'kats.tsfeatures.tsfeatures.TsFeatures'>) ['$318load_global.100']
    $320load_method.101 = getattr(value=$318load_global.100, attr=get_acf_features) ['$318load_global.100', '$320load_method.101']
    $332call_method.107 = call $320load_method.101(extra_args, default_status, y_acf_list, diff1y_acf_list, diff2y_acf_list, func=$320load_method.101, args=[Var(extra_args, tsfeatures.py:968), Var(default_status, tsfeatures.py:968), Var(y_acf_list, tsfeatures.py:990), Var(diff1y_acf_list, tsfeatures.py:991), Var(diff2y_acf_list, tsfeatures.py:992)], kws=(), vararg=None) ['$320load_method.101', '$332call_method.107', 'default_status', 'diff1y_acf_list', 'diff2y_acf_list', 'extra_args', 'y_acf_list']
    $334unpack_sequence.115 = exhaust_iter(value=$332call_method.107, count=7) ['$332call_method.107', '$334unpack_sequence.115']
    $334unpack_sequence.108 = static_getitem(value=$334unpack_sequence.115, index=0, index_var=None, fn=<built-in function getitem>) ['$334unpack_sequence.108', '$334unpack_sequence.115']
    $334unpack_sequence.109 = static_getitem(value=$334unpack_sequence.115, index=1, index_var=None, fn=<built-in function getitem>) ['$334unpack_sequence.109', '$334unpack_sequence.115']
    $334unpack_sequence.110 = static_getitem(value=$334unpack_sequence.115, index=2, index_var=None, fn=<built-in function getitem>) ['$334unpack_sequence.110', '$334unpack_sequence.115']
    $334unpack_sequence.111 = static_getitem(value=$334unpack_sequence.115, index=3, index_var=None, fn=<built-in function getitem>) ['$334unpack_sequence.111', '$334unpack_sequence.115']
    $334unpack_sequence.112 = static_getitem(value=$334unpack_sequence.115, index=4, index_var=None, fn=<built-in function getitem>) ['$334unpack_sequence.112', '$334unpack_sequence.115']
    $334unpack_sequence.113 = static_getitem(value=$334unpack_sequence.115, index=5, index_var=None, fn=<built-in function getitem>) ['$334unpack_sequence.113', '$334unpack_sequence.115']
    $334unpack_sequence.114 = static_getitem(value=$334unpack_sequence.115, index=6, index_var=None, fn=<built-in function getitem>) ['$334unpack_sequence.114', '$334unpack_sequence.115']
    $const338.117 = const(str, y_acf1)       ['$const338.117']
    acfpacf_features[$const338.117] = $334unpack_sequence.108 ['$334unpack_sequence.108', '$const338.117', 'acfpacf_features']
    $const344.119 = const(str, y_acf5)       ['$const344.119']
    acfpacf_features[$const344.119] = $334unpack_sequence.109 ['$334unpack_sequence.109', '$const344.119', 'acfpacf_features']
    $const350.121 = const(str, diff1y_acf1)  ['$const350.121']
    acfpacf_features[$const350.121] = $334unpack_sequence.110 ['$334unpack_sequence.110', '$const350.121', 'acfpacf_features']
    $const356.123 = const(str, diff1y_acf5)  ['$const356.123']
    acfpacf_features[$const356.123] = $334unpack_sequence.111 ['$334unpack_sequence.111', '$const356.123', 'acfpacf_features']
    $const362.125 = const(str, diff2y_acf1)  ['$const362.125']
    acfpacf_features[$const362.125] = $334unpack_sequence.112 ['$334unpack_sequence.112', '$const362.125', 'acfpacf_features']
    $const368.127 = const(str, diff2y_acf5)  ['$const368.127']
    acfpacf_features[$const368.127] = $334unpack_sequence.113 ['$334unpack_sequence.113', '$const368.127', 'acfpacf_features']
    $const374.129 = const(str, seas_acf1)    ['$const374.129']
    acfpacf_features[$const374.129] = $334unpack_sequence.114 ['$334unpack_sequence.114', '$const374.129', 'acfpacf_features']
    $378load_global.130 = global(TsFeatures: <class 'kats.tsfeatures.tsfeatures.TsFeatures'>) ['$378load_global.130']
    $380load_method.131 = getattr(value=$378load_global.130, attr=get_pacf_features) ['$378load_global.130', '$380load_method.131']
    $392call_method.137 = call $380load_method.131(extra_args, default_status, y_pacf_list, diff1y_pacf_list, diff2y_pacf_list, func=$380load_method.131, args=[Var(extra_args, tsfeatures.py:968), Var(default_status, tsfeatures.py:968), Var(y_pacf_list, tsfeatures.py:994), Var(diff1y_pacf_list, tsfeatures.py:995), Var(diff2y_pacf_list, tsfeatures.py:996)], kws=(), vararg=None) ['$380load_method.131', '$392call_method.137', 'default_status', 'diff1y_pacf_list', 'diff2y_pacf_list', 'extra_args', 'y_pacf_list']
    $394unpack_sequence.142 = exhaust_iter(value=$392call_method.137, count=4) ['$392call_method.137', '$394unpack_sequence.142']
    $394unpack_sequence.138 = static_getitem(value=$394unpack_sequence.142, index=0, index_var=None, fn=<built-in function getitem>) ['$394unpack_sequence.138', '$394unpack_sequence.142']
    $394unpack_sequence.139 = static_getitem(value=$394unpack_sequence.142, index=1, index_var=None, fn=<built-in function getitem>) ['$394unpack_sequence.139', '$394unpack_sequence.142']
    $394unpack_sequence.140 = static_getitem(value=$394unpack_sequence.142, index=2, index_var=None, fn=<built-in function getitem>) ['$394unpack_sequence.140', '$394unpack_sequence.142']
    $394unpack_sequence.141 = static_getitem(value=$394unpack_sequence.142, index=3, index_var=None, fn=<built-in function getitem>) ['$394unpack_sequence.141', '$394unpack_sequence.142']
    $const398.144 = const(str, y_pacf5)      ['$const398.144']
    acfpacf_features[$const398.144] = $394unpack_sequence.138 ['$394unpack_sequence.138', '$const398.144', 'acfpacf_features']
    $const404.146 = const(str, diff1y_pacf5) ['$const404.146']
    acfpacf_features[$const404.146] = $394unpack_sequence.139 ['$394unpack_sequence.139', '$const404.146', 'acfpacf_features']
    $const410.148 = const(str, diff2y_pacf5) ['$const410.148']
    acfpacf_features[$const410.148] = $394unpack_sequence.140 ['$394unpack_sequence.140', '$const410.148', 'acfpacf_features']
    $const416.150 = const(str, seas_pacf1)   ['$const416.150']
    acfpacf_features[$const416.150] = $394unpack_sequence.141 ['$394unpack_sequence.141', '$const416.150', 'acfpacf_features']
    $422return_value.152 = cast(value=acfpacf_features) ['$422return_value.152', 'acfpacf_features']
    return $422return_value.152              ['$422return_value.152']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=987)
           2	BUILD_LIST(arg=0, lineno=987)
           4	LOAD_FAST(arg=0, lineno=987)
>          6	FOR_ITER(arg=24, lineno=987)
           8	STORE_FAST(arg=1, lineno=987)
          10	LOAD_DEREF(arg=0, lineno=987)
          12	LOAD_FAST(arg=1, lineno=987)
          14	BINARY_SUBSCR(arg=None, lineno=987)
          16	LOAD_DEREF(arg=0, lineno=987)
          18	LOAD_FAST(arg=1, lineno=987)
          20	LOAD_CONST(arg=0, lineno=987)
          22	BINARY_SUBTRACT(arg=None, lineno=987)
          24	BINARY_SUBSCR(arg=None, lineno=987)
          26	BINARY_SUBTRACT(arg=None, lineno=987)
          28	LIST_APPEND(arg=2, lineno=987)
          30	JUMP_ABSOLUTE(arg=6, lineno=987)
>         32	RETURN_VALUE(arg=None, lineno=987)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=987)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=987)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=987)
DEBUG:numba.core.byteflow:stack ['$2build_list.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$2build_list.0', '$.04.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=FOR_ITER(arg=24, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=32, stack=('$phi6.0',), blockstack=(), npush=0), Edge(pc=8, stack=('$phi6.0', '$phi6.1', '$6for_iter.3'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi32.0']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi32.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=1, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$10load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$10load_deref.3', '$i12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_DEREF(arg=0, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5', '$16load_deref.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_CONST(arg=0, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5', '$16load_deref.6', '$i18.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5', '$16load_deref.6', '$i18.7', '$const20.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5', '$16load_deref.6', '$22binary_subtract.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5', '$24binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LIST_APPEND(arg=2, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$26binary_subtract.11']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=JUMP_ABSOLUTE(arg=6, lineno=987)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$phi8.0', '$phi8.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=2): {'$phi6.1'},
             State(pc_initial=8 nstack_initial=3): {'$phi8.2', '$phi8.0'},
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'}})
DEBUG:numba.core.byteflow:defmap: {'$phi6.0': State(pc_initial=0 nstack_initial=0),
 '$phi6.1': State(pc_initial=0 nstack_initial=0),
 '$phi8.2': State(pc_initial=6 nstack_initial=2)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.1', State(pc_initial=8 nstack_initial=3))},
             '$phi8.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi8.1': {('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi32.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
 '$phi8.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi8.2': {('$6for_iter.3', State(pc_initial=6 nstack_initial=2))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi32.0': '$2build_list.0',
                                                    '$phi6.1': '$.04.1',
                                                    '$phi8.0': '$2build_list.0'},
             State(pc_initial=6 nstack_initial=2): {'$phi8.2': '$6for_iter.3'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'res': '$.04.1'})), outgoing_phis={'$phi8.0': '$2build_list.0', '$phi6.1': '$.04.1', '$phi32.0': '$2build_list.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$2build_list.0', '$.04.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=6 nstack_initial=2):
AdaptBlockInfo(insts=((6, {'iterator': '$phi6.1', 'pair': '$6for_iter.2', 'indval': '$6for_iter.3', 'pred': '$6for_iter.4'}),), outgoing_phis={'$phi8.2': '$6for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$phi6.0',), 8: ('$phi6.0', '$phi6.1', '$6for_iter.3')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=8 nstack_initial=3):
AdaptBlockInfo(insts=((8, {'value': '$phi8.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$i12.4'}), (14, {'index': '$i12.4', 'target': '$10load_deref.3', 'res': '$14binary_subscr.5'}), (16, {'res': '$16load_deref.6'}), (18, {'res': '$i18.7'}), (20, {'res': '$const20.8'}), (22, {'lhs': '$i18.7', 'rhs': '$const20.8', 'res': '$22binary_subtract.9'}), (24, {'index': '$22binary_subtract.9', 'target': '$16load_deref.6', 'res': '$24binary_subscr.10'}), (26, {'lhs': '$14binary_subscr.5', 'rhs': '$24binary_subscr.10', 'res': '$26binary_subtract.11'}), (28, {'target': '$phi8.0', 'value': '$26binary_subtract.11', 'appendvar': '$28list_append.12', 'res': '$28list_append.13'}), (30, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$phi8.0', '$phi8.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'retval': '$phi32.0', 'castval': '$32return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    implicit0 = arg(0, name=implicit0)       ['implicit0']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    $phi8.0 = $2build_list.0                 ['$2build_list.0', '$phi8.0']
    $phi6.1 = implicit0                      ['$phi6.1', 'implicit0']
    $phi32.0 = $2build_list.0                ['$2build_list.0', '$phi32.0']
    jump 6                                   []
label 6:
    $6for_iter.2 = iternext(value=$phi6.1)   ['$6for_iter.2', '$phi6.1']
    $6for_iter.3 = pair_first(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.3']
    $6for_iter.4 = pair_second(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.4']
    $phi8.2 = $6for_iter.3                   ['$6for_iter.3', '$phi8.2']
    branch $6for_iter.4, 8, 32               ['$6for_iter.4']
label 8:
    i = $phi8.2                              ['$phi8.2', 'i']
    $10load_deref.3 = freevar(x: None)       ['$10load_deref.3']
    $14binary_subscr.5 = getitem(value=$10load_deref.3, index=i, fn=<built-in function getitem>) ['$10load_deref.3', '$14binary_subscr.5', 'i']
    $16load_deref.6 = freevar(x: None)       ['$16load_deref.6']
    $const20.8 = const(int, 1)               ['$const20.8']
    $22binary_subtract.9 = i - $const20.8    ['$22binary_subtract.9', '$const20.8', 'i']
    $24binary_subscr.10 = getitem(value=$16load_deref.6, index=$22binary_subtract.9, fn=<built-in function getitem>) ['$16load_deref.6', '$22binary_subtract.9', '$24binary_subscr.10']
    $26binary_subtract.11 = $14binary_subscr.5 - $24binary_subscr.10 ['$14binary_subscr.5', '$24binary_subscr.10', '$26binary_subtract.11']
    $28list_append.12 = getattr(value=$phi8.0, attr=append) ['$28list_append.12', '$phi8.0']
    $28list_append.13 = call $28list_append.12($26binary_subtract.11, func=$28list_append.12, args=(Var($26binary_subtract.11, tsfeatures.py:987),), kws=(), vararg=None) ['$26binary_subtract.11', '$28list_append.12', '$28list_append.13']
    jump 6                                   []
label 32:
    $32return_value.1 = cast(value=$phi32.0) ['$32return_value.1', '$phi32.0']
    return $32return_value.1                 ['$32return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241e6e50>
DEBUG:numba.core.ssa:on stmt: implicit0 = arg(0, name=implicit0)
DEBUG:numba.core.ssa:on stmt: $2build_list.0 = build_list(items=[])
DEBUG:numba.core.ssa:on stmt: $phi8.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: $phi6.1 = implicit0
DEBUG:numba.core.ssa:on stmt: $phi32.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 6
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241e6e50>
DEBUG:numba.core.ssa:on stmt: $6for_iter.2 = iternext(value=$phi6.1)
DEBUG:numba.core.ssa:on stmt: $6for_iter.3 = pair_first(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $6for_iter.4 = pair_second(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi8.2 = $6for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $6for_iter.4, 8, 32
DEBUG:numba.core.ssa:==== SSA block analysis pass on 8
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241e6e50>
DEBUG:numba.core.ssa:on stmt: i = $phi8.2
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(x: None)
DEBUG:numba.core.ssa:on stmt: $14binary_subscr.5 = getitem(value=$10load_deref.3, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $16load_deref.6 = freevar(x: None)
DEBUG:numba.core.ssa:on stmt: $const20.8 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $22binary_subtract.9 = i - $const20.8
DEBUG:numba.core.ssa:on stmt: $24binary_subscr.10 = getitem(value=$16load_deref.6, index=$22binary_subtract.9, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $26binary_subtract.11 = $14binary_subscr.5 - $24binary_subscr.10
DEBUG:numba.core.ssa:on stmt: $28list_append.12 = getattr(value=$phi8.0, attr=append)
DEBUG:numba.core.ssa:on stmt: $28list_append.13 = call $28list_append.12($26binary_subtract.11, func=$28list_append.12, args=(Var($26binary_subtract.11, tsfeatures.py:987),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241e6e50>
DEBUG:numba.core.ssa:on stmt: $32return_value.1 = cast(value=$phi32.0)
DEBUG:numba.core.ssa:on stmt: return $32return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7faa243af0d0>],
             '$14binary_subscr.5': [<numba.core.ir.Assign object at 0x7faa243af370>],
             '$16load_deref.6': [<numba.core.ir.Assign object at 0x7faa243af4f0>],
             '$22binary_subtract.9': [<numba.core.ir.Assign object at 0x7faa243af910>],
             '$24binary_subscr.10': [<numba.core.ir.Assign object at 0x7faa243afa90>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7faa243afc10>],
             '$28list_append.12': [<numba.core.ir.Assign object at 0x7faa243afdf0>],
             '$28list_append.13': [<numba.core.ir.Assign object at 0x7faa243aff10>],
             '$2build_list.0': [<numba.core.ir.Assign object at 0x7faa241f1460>],
             '$32return_value.1': [<numba.core.ir.Assign object at 0x7faa24395130>],
             '$6for_iter.2': [<numba.core.ir.Assign object at 0x7faa241f1a30>],
             '$6for_iter.3': [<numba.core.ir.Assign object at 0x7faa241f1b50>],
             '$6for_iter.4': [<numba.core.ir.Assign object at 0x7faa241f1c70>],
             '$const20.8': [<numba.core.ir.Assign object at 0x7faa243af790>],
             '$phi32.0': [<numba.core.ir.Assign object at 0x7faa241f1700>],
             '$phi6.1': [<numba.core.ir.Assign object at 0x7faa241f1640>],
             '$phi8.0': [<numba.core.ir.Assign object at 0x7faa241f11c0>],
             '$phi8.2': [<numba.core.ir.Assign object at 0x7faa241f1940>],
             'i': [<numba.core.ir.Assign object at 0x7faa241f1f10>],
             'implicit0': [<numba.core.ir.Assign object at 0x7faa241f12b0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=988)
           2	BUILD_LIST(arg=0, lineno=988)
           4	LOAD_FAST(arg=0, lineno=988)
>          6	FOR_ITER(arg=24, lineno=988)
           8	STORE_FAST(arg=1, lineno=988)
          10	LOAD_DEREF(arg=0, lineno=988)
          12	LOAD_FAST(arg=1, lineno=988)
          14	BINARY_SUBSCR(arg=None, lineno=988)
          16	LOAD_DEREF(arg=0, lineno=988)
          18	LOAD_FAST(arg=1, lineno=988)
          20	LOAD_CONST(arg=0, lineno=988)
          22	BINARY_SUBTRACT(arg=None, lineno=988)
          24	BINARY_SUBSCR(arg=None, lineno=988)
          26	BINARY_SUBTRACT(arg=None, lineno=988)
          28	LIST_APPEND(arg=2, lineno=988)
          30	JUMP_ABSOLUTE(arg=6, lineno=988)
>         32	RETURN_VALUE(arg=None, lineno=988)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=988)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=988)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=988)
DEBUG:numba.core.byteflow:stack ['$2build_list.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$2build_list.0', '$.04.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=FOR_ITER(arg=24, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=32, stack=('$phi6.0',), blockstack=(), npush=0), Edge(pc=8, stack=('$phi6.0', '$phi6.1', '$6for_iter.3'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi32.0']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi32.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=1, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$10load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$10load_deref.3', '$i12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_DEREF(arg=0, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5', '$16load_deref.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_CONST(arg=0, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5', '$16load_deref.6', '$i18.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5', '$16load_deref.6', '$i18.7', '$const20.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5', '$16load_deref.6', '$22binary_subtract.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5', '$24binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LIST_APPEND(arg=2, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$26binary_subtract.11']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=JUMP_ABSOLUTE(arg=6, lineno=988)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$phi8.0', '$phi8.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=2): {'$phi6.1'},
             State(pc_initial=8 nstack_initial=3): {'$phi8.2', '$phi8.0'},
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'}})
DEBUG:numba.core.byteflow:defmap: {'$phi6.0': State(pc_initial=0 nstack_initial=0),
 '$phi6.1': State(pc_initial=0 nstack_initial=0),
 '$phi8.2': State(pc_initial=6 nstack_initial=2)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.1', State(pc_initial=8 nstack_initial=3))},
             '$phi8.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi8.1': {('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi32.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi32.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
 '$phi8.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi8.2': {('$6for_iter.3', State(pc_initial=6 nstack_initial=2))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi32.0': '$2build_list.0',
                                                    '$phi6.1': '$.04.1',
                                                    '$phi8.0': '$2build_list.0'},
             State(pc_initial=6 nstack_initial=2): {'$phi8.2': '$6for_iter.3'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'res': '$.04.1'})), outgoing_phis={'$phi8.0': '$2build_list.0', '$phi6.1': '$.04.1', '$phi32.0': '$2build_list.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$2build_list.0', '$.04.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=6 nstack_initial=2):
AdaptBlockInfo(insts=((6, {'iterator': '$phi6.1', 'pair': '$6for_iter.2', 'indval': '$6for_iter.3', 'pred': '$6for_iter.4'}),), outgoing_phis={'$phi8.2': '$6for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$phi6.0',), 8: ('$phi6.0', '$phi6.1', '$6for_iter.3')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=8 nstack_initial=3):
AdaptBlockInfo(insts=((8, {'value': '$phi8.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$i12.4'}), (14, {'index': '$i12.4', 'target': '$10load_deref.3', 'res': '$14binary_subscr.5'}), (16, {'res': '$16load_deref.6'}), (18, {'res': '$i18.7'}), (20, {'res': '$const20.8'}), (22, {'lhs': '$i18.7', 'rhs': '$const20.8', 'res': '$22binary_subtract.9'}), (24, {'index': '$22binary_subtract.9', 'target': '$16load_deref.6', 'res': '$24binary_subscr.10'}), (26, {'lhs': '$14binary_subscr.5', 'rhs': '$24binary_subscr.10', 'res': '$26binary_subtract.11'}), (28, {'target': '$phi8.0', 'value': '$26binary_subtract.11', 'appendvar': '$28list_append.12', 'res': '$28list_append.13'}), (30, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$phi8.0', '$phi8.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'retval': '$phi32.0', 'castval': '$32return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    implicit0 = arg(0, name=implicit0)       ['implicit0']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    $phi8.0 = $2build_list.0                 ['$2build_list.0', '$phi8.0']
    $phi6.1 = implicit0                      ['$phi6.1', 'implicit0']
    $phi32.0 = $2build_list.0                ['$2build_list.0', '$phi32.0']
    jump 6                                   []
label 6:
    $6for_iter.2 = iternext(value=$phi6.1)   ['$6for_iter.2', '$phi6.1']
    $6for_iter.3 = pair_first(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.3']
    $6for_iter.4 = pair_second(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.4']
    $phi8.2 = $6for_iter.3                   ['$6for_iter.3', '$phi8.2']
    branch $6for_iter.4, 8, 32               ['$6for_iter.4']
label 8:
    i = $phi8.2                              ['$phi8.2', 'i']
    $10load_deref.3 = freevar(diff1x: None)  ['$10load_deref.3']
    $14binary_subscr.5 = getitem(value=$10load_deref.3, index=i, fn=<built-in function getitem>) ['$10load_deref.3', '$14binary_subscr.5', 'i']
    $16load_deref.6 = freevar(diff1x: None)  ['$16load_deref.6']
    $const20.8 = const(int, 1)               ['$const20.8']
    $22binary_subtract.9 = i - $const20.8    ['$22binary_subtract.9', '$const20.8', 'i']
    $24binary_subscr.10 = getitem(value=$16load_deref.6, index=$22binary_subtract.9, fn=<built-in function getitem>) ['$16load_deref.6', '$22binary_subtract.9', '$24binary_subscr.10']
    $26binary_subtract.11 = $14binary_subscr.5 - $24binary_subscr.10 ['$14binary_subscr.5', '$24binary_subscr.10', '$26binary_subtract.11']
    $28list_append.12 = getattr(value=$phi8.0, attr=append) ['$28list_append.12', '$phi8.0']
    $28list_append.13 = call $28list_append.12($26binary_subtract.11, func=$28list_append.12, args=(Var($26binary_subtract.11, tsfeatures.py:988),), kws=(), vararg=None) ['$26binary_subtract.11', '$28list_append.12', '$28list_append.13']
    jump 6                                   []
label 32:
    $32return_value.1 = cast(value=$phi32.0) ['$32return_value.1', '$phi32.0']
    return $32return_value.1                 ['$32return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241e6970>
DEBUG:numba.core.ssa:on stmt: implicit0 = arg(0, name=implicit0)
DEBUG:numba.core.ssa:on stmt: $2build_list.0 = build_list(items=[])
DEBUG:numba.core.ssa:on stmt: $phi8.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: $phi6.1 = implicit0
DEBUG:numba.core.ssa:on stmt: $phi32.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 6
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241e6970>
DEBUG:numba.core.ssa:on stmt: $6for_iter.2 = iternext(value=$phi6.1)
DEBUG:numba.core.ssa:on stmt: $6for_iter.3 = pair_first(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $6for_iter.4 = pair_second(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi8.2 = $6for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $6for_iter.4, 8, 32
DEBUG:numba.core.ssa:==== SSA block analysis pass on 8
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241e6970>
DEBUG:numba.core.ssa:on stmt: i = $phi8.2
DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(diff1x: None)
DEBUG:numba.core.ssa:on stmt: $14binary_subscr.5 = getitem(value=$10load_deref.3, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $16load_deref.6 = freevar(diff1x: None)
DEBUG:numba.core.ssa:on stmt: $const20.8 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $22binary_subtract.9 = i - $const20.8
DEBUG:numba.core.ssa:on stmt: $24binary_subscr.10 = getitem(value=$16load_deref.6, index=$22binary_subtract.9, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $26binary_subtract.11 = $14binary_subscr.5 - $24binary_subscr.10
DEBUG:numba.core.ssa:on stmt: $28list_append.12 = getattr(value=$phi8.0, attr=append)
DEBUG:numba.core.ssa:on stmt: $28list_append.13 = call $28list_append.12($26binary_subtract.11, func=$28list_append.12, args=(Var($26binary_subtract.11, tsfeatures.py:988),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241e6970>
DEBUG:numba.core.ssa:on stmt: $32return_value.1 = cast(value=$phi32.0)
DEBUG:numba.core.ssa:on stmt: return $32return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7faa243855b0>],
             '$14binary_subscr.5': [<numba.core.ir.Assign object at 0x7faa24385850>],
             '$16load_deref.6': [<numba.core.ir.Assign object at 0x7faa243859d0>],
             '$22binary_subtract.9': [<numba.core.ir.Assign object at 0x7faa24385df0>],
             '$24binary_subscr.10': [<numba.core.ir.Assign object at 0x7faa24385f70>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7faa24384130>],
             '$28list_append.12': [<numba.core.ir.Assign object at 0x7faa24384310>],
             '$28list_append.13': [<numba.core.ir.Assign object at 0x7faa24384430>],
             '$2build_list.0': [<numba.core.ir.Assign object at 0x7faa2438a970>],
             '$32return_value.1': [<numba.core.ir.Assign object at 0x7faa24384610>],
             '$6for_iter.2': [<numba.core.ir.Assign object at 0x7faa2438af40>],
             '$6for_iter.3': [<numba.core.ir.Assign object at 0x7faa24385070>],
             '$6for_iter.4': [<numba.core.ir.Assign object at 0x7faa24385190>],
             '$const20.8': [<numba.core.ir.Assign object at 0x7faa24385c70>],
             '$phi32.0': [<numba.core.ir.Assign object at 0x7faa2438ac10>],
             '$phi6.1': [<numba.core.ir.Assign object at 0x7faa2438ab50>],
             '$phi8.0': [<numba.core.ir.Assign object at 0x7faa2438a6d0>],
             '$phi8.2': [<numba.core.ir.Assign object at 0x7faa2438ae50>],
             'i': [<numba.core.ir.Assign object at 0x7faa24385430>],
             'implicit0': [<numba.core.ir.Assign object at 0x7faa2438a7c0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=842)
           2	LOAD_GLOBAL(arg=0, lineno=842)
           4	LOAD_ATTR(arg=1, lineno=842)
           6	LOAD_GLOBAL(arg=0, lineno=842)
           8	LOAD_ATTR(arg=1, lineno=842)
          10	LOAD_GLOBAL(arg=0, lineno=842)
          12	LOAD_ATTR(arg=1, lineno=842)
          14	LOAD_GLOBAL(arg=0, lineno=842)
          16	LOAD_ATTR(arg=1, lineno=842)
          18	LOAD_GLOBAL(arg=0, lineno=842)
          20	LOAD_ATTR(arg=1, lineno=842)
          22	LOAD_GLOBAL(arg=0, lineno=842)
          24	LOAD_ATTR(arg=1, lineno=842)
          26	LOAD_GLOBAL(arg=0, lineno=842)
          28	LOAD_ATTR(arg=1, lineno=842)
          30	BUILD_TUPLE(arg=7, lineno=842)
          32	UNPACK_SEQUENCE(arg=7, lineno=834)
          34	STORE_FAST(arg=5, lineno=835)
          36	STORE_FAST(arg=6, lineno=836)
          38	STORE_FAST(arg=7, lineno=837)
          40	STORE_FAST(arg=8, lineno=838)
          42	STORE_FAST(arg=9, lineno=839)
          44	STORE_FAST(arg=10, lineno=840)
          46	STORE_FAST(arg=11, lineno=841)
          48	LOAD_FAST(arg=0, lineno=845)
          50	LOAD_METHOD(arg=2, lineno=845)
          52	LOAD_CONST(arg=1, lineno=845)
          54	LOAD_FAST(arg=1, lineno=845)
          56	CALL_METHOD(arg=2, lineno=845)
          58	POP_JUMP_IF_FALSE(arg=68, lineno=845)
          60	LOAD_FAST(arg=2, lineno=846)
          62	LOAD_CONST(arg=2, lineno=846)
          64	BINARY_SUBSCR(arg=None, lineno=846)
          66	STORE_FAST(arg=5, lineno=846)
>         68	LOAD_FAST(arg=0, lineno=849)
          70	LOAD_METHOD(arg=2, lineno=849)
          72	LOAD_CONST(arg=3, lineno=849)
          74	LOAD_FAST(arg=1, lineno=849)
          76	CALL_METHOD(arg=2, lineno=849)
          78	POP_JUMP_IF_FALSE(arg=108, lineno=849)
          80	LOAD_GLOBAL(arg=0, lineno=850)
          82	LOAD_METHOD(arg=3, lineno=850)
          84	LOAD_GLOBAL(arg=0, lineno=850)
          86	LOAD_METHOD(arg=4, lineno=850)
          88	LOAD_FAST(arg=2, lineno=850)
          90	CALL_METHOD(arg=1, lineno=850)
          92	LOAD_CONST(arg=4, lineno=850)
          94	LOAD_CONST(arg=5, lineno=850)
          96	BUILD_SLICE(arg=2, lineno=850)
          98	BINARY_SUBSCR(arg=None, lineno=850)
         100	LOAD_CONST(arg=6, lineno=850)
         102	BINARY_POWER(arg=None, lineno=850)
         104	CALL_METHOD(arg=1, lineno=850)
         106	STORE_FAST(arg=6, lineno=850)
>        108	LOAD_FAST(arg=0, lineno=853)
         110	LOAD_METHOD(arg=2, lineno=853)
         112	LOAD_CONST(arg=7, lineno=853)
         114	LOAD_FAST(arg=1, lineno=853)
         116	CALL_METHOD(arg=2, lineno=853)
         118	POP_JUMP_IF_FALSE(arg=128, lineno=853)
         120	LOAD_FAST(arg=3, lineno=854)
         122	LOAD_CONST(arg=2, lineno=854)
         124	BINARY_SUBSCR(arg=None, lineno=854)
         126	STORE_FAST(arg=7, lineno=854)
>        128	LOAD_FAST(arg=0, lineno=857)
         130	LOAD_METHOD(arg=2, lineno=857)
         132	LOAD_CONST(arg=8, lineno=857)
         134	LOAD_FAST(arg=1, lineno=857)
         136	CALL_METHOD(arg=2, lineno=857)
         138	POP_JUMP_IF_FALSE(arg=168, lineno=857)
         140	LOAD_GLOBAL(arg=0, lineno=858)
         142	LOAD_METHOD(arg=3, lineno=858)
         144	LOAD_GLOBAL(arg=0, lineno=858)
         146	LOAD_METHOD(arg=4, lineno=858)
         148	LOAD_FAST(arg=3, lineno=858)
         150	CALL_METHOD(arg=1, lineno=858)
         152	LOAD_CONST(arg=4, lineno=858)
         154	LOAD_CONST(arg=5, lineno=858)
         156	BUILD_SLICE(arg=2, lineno=858)
         158	BINARY_SUBSCR(arg=None, lineno=858)
         160	LOAD_CONST(arg=6, lineno=858)
         162	BINARY_POWER(arg=None, lineno=858)
         164	CALL_METHOD(arg=1, lineno=858)
         166	STORE_FAST(arg=8, lineno=858)
>        168	LOAD_FAST(arg=0, lineno=861)
         170	LOAD_METHOD(arg=2, lineno=861)
         172	LOAD_CONST(arg=9, lineno=861)
         174	LOAD_FAST(arg=1, lineno=861)
         176	CALL_METHOD(arg=2, lineno=861)
         178	POP_JUMP_IF_FALSE(arg=188, lineno=861)
         180	LOAD_FAST(arg=4, lineno=862)
         182	LOAD_CONST(arg=2, lineno=862)
         184	BINARY_SUBSCR(arg=None, lineno=862)
         186	STORE_FAST(arg=9, lineno=862)
>        188	LOAD_FAST(arg=0, lineno=865)
         190	LOAD_METHOD(arg=2, lineno=865)
         192	LOAD_CONST(arg=10, lineno=865)
         194	LOAD_FAST(arg=1, lineno=865)
         196	CALL_METHOD(arg=2, lineno=865)
         198	POP_JUMP_IF_FALSE(arg=228, lineno=865)
         200	LOAD_GLOBAL(arg=0, lineno=866)
         202	LOAD_METHOD(arg=3, lineno=866)
         204	LOAD_GLOBAL(arg=0, lineno=866)
         206	LOAD_METHOD(arg=4, lineno=866)
         208	LOAD_FAST(arg=4, lineno=866)
         210	CALL_METHOD(arg=1, lineno=866)
         212	LOAD_CONST(arg=4, lineno=866)
         214	LOAD_CONST(arg=5, lineno=866)
         216	BUILD_SLICE(arg=2, lineno=866)
         218	BINARY_SUBSCR(arg=None, lineno=866)
         220	LOAD_CONST(arg=6, lineno=866)
         222	BINARY_POWER(arg=None, lineno=866)
         224	CALL_METHOD(arg=1, lineno=866)
         226	STORE_FAST(arg=10, lineno=866)
>        228	LOAD_FAST(arg=0, lineno=869)
         230	LOAD_METHOD(arg=2, lineno=869)
         232	LOAD_CONST(arg=11, lineno=869)
         234	LOAD_FAST(arg=1, lineno=869)
         236	CALL_METHOD(arg=2, lineno=869)
         238	POP_JUMP_IF_FALSE(arg=248, lineno=869)
         240	LOAD_FAST(arg=2, lineno=870)
         242	LOAD_CONST(arg=12, lineno=870)
         244	BINARY_SUBSCR(arg=None, lineno=870)
         246	STORE_FAST(arg=11, lineno=870)
>        248	LOAD_FAST(arg=5, lineno=873)
         250	LOAD_FAST(arg=6, lineno=874)
         252	LOAD_FAST(arg=7, lineno=875)
         254	LOAD_FAST(arg=8, lineno=876)
         256	LOAD_FAST(arg=9, lineno=877)
         258	LOAD_FAST(arg=10, lineno=878)
         260	LOAD_FAST(arg=11, lineno=879)
         262	BUILD_TUPLE(arg=7, lineno=872)
         264	RETURN_VALUE(arg=None, lineno=872)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=842)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=842)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=842)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$14load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_ATTR(arg=1, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$18load_global.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_GLOBAL(arg=0, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_ATTR(arg=1, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$22load_global.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_GLOBAL(arg=0, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_ATTR(arg=1, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$26load_global.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=BUILD_TUPLE(arg=7, lineno=842)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=UNPACK_SEQUENCE(arg=7, lineno=834)
DEBUG:numba.core.byteflow:stack ['$30build_tuple.14']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=5, lineno=835)
DEBUG:numba.core.byteflow:stack ['$32unpack_sequence.21', '$32unpack_sequence.20', '$32unpack_sequence.19', '$32unpack_sequence.18', '$32unpack_sequence.17', '$32unpack_sequence.16', '$32unpack_sequence.15']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=STORE_FAST(arg=6, lineno=836)
DEBUG:numba.core.byteflow:stack ['$32unpack_sequence.21', '$32unpack_sequence.20', '$32unpack_sequence.19', '$32unpack_sequence.18', '$32unpack_sequence.17', '$32unpack_sequence.16']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=STORE_FAST(arg=7, lineno=837)
DEBUG:numba.core.byteflow:stack ['$32unpack_sequence.21', '$32unpack_sequence.20', '$32unpack_sequence.19', '$32unpack_sequence.18', '$32unpack_sequence.17']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=STORE_FAST(arg=8, lineno=838)
DEBUG:numba.core.byteflow:stack ['$32unpack_sequence.21', '$32unpack_sequence.20', '$32unpack_sequence.19', '$32unpack_sequence.18']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=STORE_FAST(arg=9, lineno=839)
DEBUG:numba.core.byteflow:stack ['$32unpack_sequence.21', '$32unpack_sequence.20', '$32unpack_sequence.19']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=STORE_FAST(arg=10, lineno=840)
DEBUG:numba.core.byteflow:stack ['$32unpack_sequence.21', '$32unpack_sequence.20']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=11, lineno=841)
DEBUG:numba.core.byteflow:stack ['$32unpack_sequence.21']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_FAST(arg=0, lineno=845)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=845)
DEBUG:numba.core.byteflow:stack ['$extra_args48.23']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=845)
DEBUG:numba.core.byteflow:stack ['$50load_method.24']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=845)
DEBUG:numba.core.byteflow:stack ['$50load_method.24', '$const52.25']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=CALL_METHOD(arg=2, lineno=845)
DEBUG:numba.core.byteflow:stack ['$50load_method.24', '$const52.25', '$default_status54.26']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=68, lineno=845)
DEBUG:numba.core.byteflow:stack ['$56call_method.27']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=2, lineno=846)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=846)
DEBUG:numba.core.byteflow:stack ['$y_acf_list60.0']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=846)
DEBUG:numba.core.byteflow:stack ['$y_acf_list60.0', '$const62.1']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=STORE_FAST(arg=5, lineno=846)
DEBUG:numba.core.byteflow:stack ['$64binary_subscr.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=849)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_METHOD(arg=2, lineno=849)
DEBUG:numba.core.byteflow:stack ['$extra_args68.0']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_CONST(arg=3, lineno=849)
DEBUG:numba.core.byteflow:stack ['$70load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=849)
DEBUG:numba.core.byteflow:stack ['$70load_method.1', '$const72.2']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=CALL_METHOD(arg=2, lineno=849)
DEBUG:numba.core.byteflow:stack ['$70load_method.1', '$const72.2', '$default_status74.3']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=108, lineno=849)
DEBUG:numba.core.byteflow:stack ['$76call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=108, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=108 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=108 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_GLOBAL(arg=0, lineno=850)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_METHOD(arg=3, lineno=850)
DEBUG:numba.core.byteflow:stack ['$80load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_GLOBAL(arg=0, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_METHOD(arg=4, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1', '$84load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1', '$86load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=CALL_METHOD(arg=1, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1', '$86load_method.3', '$y_acf_list88.4']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_CONST(arg=4, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1', '$90call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_CONST(arg=5, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1', '$90call_method.5', '$const92.6']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=BUILD_SLICE(arg=2, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1', '$90call_method.5', '$const92.6', '$const94.7']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1', '$90call_method.5', '$96build_slice.9']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_CONST(arg=6, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1', '$98binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=BINARY_POWER(arg=None, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1', '$98binary_subscr.10', '$const100.11']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=CALL_METHOD(arg=1, lineno=850)
DEBUG:numba.core.byteflow:stack ['$82load_method.1', '$102binary_power.12']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=STORE_FAST(arg=6, lineno=850)
DEBUG:numba.core.byteflow:stack ['$104call_method.13']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=108, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=108 nstack_initial=0), State(pc_initial=108 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=853)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_METHOD(arg=2, lineno=853)
DEBUG:numba.core.byteflow:stack ['$extra_args108.0']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_CONST(arg=7, lineno=853)
DEBUG:numba.core.byteflow:stack ['$110load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_FAST(arg=1, lineno=853)
DEBUG:numba.core.byteflow:stack ['$110load_method.1', '$const112.2']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=CALL_METHOD(arg=2, lineno=853)
DEBUG:numba.core.byteflow:stack ['$110load_method.1', '$const112.2', '$default_status114.3']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=POP_JUMP_IF_FALSE(arg=128, lineno=853)
DEBUG:numba.core.byteflow:stack ['$116call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0), Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=108 nstack_initial=0), State(pc_initial=120 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=854)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_CONST(arg=2, lineno=854)
DEBUG:numba.core.byteflow:stack ['$diff1y_acf_list120.0']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=BINARY_SUBSCR(arg=None, lineno=854)
DEBUG:numba.core.byteflow:stack ['$diff1y_acf_list120.0', '$const122.1']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=STORE_FAST(arg=7, lineno=854)
DEBUG:numba.core.byteflow:stack ['$124binary_subscr.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=128 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=128, inst=LOAD_FAST(arg=0, lineno=857)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_METHOD(arg=2, lineno=857)
DEBUG:numba.core.byteflow:stack ['$extra_args128.0']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_CONST(arg=8, lineno=857)
DEBUG:numba.core.byteflow:stack ['$130load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=LOAD_FAST(arg=1, lineno=857)
DEBUG:numba.core.byteflow:stack ['$130load_method.1', '$const132.2']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=CALL_METHOD(arg=2, lineno=857)
DEBUG:numba.core.byteflow:stack ['$130load_method.1', '$const132.2', '$default_status134.3']
DEBUG:numba.core.byteflow:dispatch pc=138, inst=POP_JUMP_IF_FALSE(arg=168, lineno=857)
DEBUG:numba.core.byteflow:stack ['$136call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=140, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=140 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_GLOBAL(arg=0, lineno=858)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=142, inst=LOAD_METHOD(arg=3, lineno=858)
DEBUG:numba.core.byteflow:stack ['$140load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=LOAD_GLOBAL(arg=0, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_METHOD(arg=4, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1', '$144load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=3, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1', '$146load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=CALL_METHOD(arg=1, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1', '$146load_method.3', '$diff1y_acf_list148.4']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=LOAD_CONST(arg=4, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1', '$150call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=LOAD_CONST(arg=5, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1', '$150call_method.5', '$const152.6']
DEBUG:numba.core.byteflow:dispatch pc=156, inst=BUILD_SLICE(arg=2, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1', '$150call_method.5', '$const152.6', '$const154.7']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=BINARY_SUBSCR(arg=None, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1', '$150call_method.5', '$156build_slice.9']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=LOAD_CONST(arg=6, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1', '$158binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=BINARY_POWER(arg=None, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1', '$158binary_subscr.10', '$const160.11']
DEBUG:numba.core.byteflow:dispatch pc=164, inst=CALL_METHOD(arg=1, lineno=858)
DEBUG:numba.core.byteflow:stack ['$142load_method.1', '$162binary_power.12']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=STORE_FAST(arg=8, lineno=858)
DEBUG:numba.core.byteflow:stack ['$164call_method.13']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=168, inst=LOAD_FAST(arg=0, lineno=861)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=170, inst=LOAD_METHOD(arg=2, lineno=861)
DEBUG:numba.core.byteflow:stack ['$extra_args168.0']
DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_CONST(arg=9, lineno=861)
DEBUG:numba.core.byteflow:stack ['$170load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=174, inst=LOAD_FAST(arg=1, lineno=861)
DEBUG:numba.core.byteflow:stack ['$170load_method.1', '$const172.2']
DEBUG:numba.core.byteflow:dispatch pc=176, inst=CALL_METHOD(arg=2, lineno=861)
DEBUG:numba.core.byteflow:stack ['$170load_method.1', '$const172.2', '$default_status174.3']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=POP_JUMP_IF_FALSE(arg=188, lineno=861)
DEBUG:numba.core.byteflow:stack ['$176call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=180, stack=(), blockstack=(), npush=0), Edge(pc=188, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=180, inst=LOAD_FAST(arg=4, lineno=862)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=182, inst=LOAD_CONST(arg=2, lineno=862)
DEBUG:numba.core.byteflow:stack ['$diff2y_acf_list180.0']
DEBUG:numba.core.byteflow:dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=862)
DEBUG:numba.core.byteflow:stack ['$diff2y_acf_list180.0', '$const182.1']
DEBUG:numba.core.byteflow:dispatch pc=186, inst=STORE_FAST(arg=9, lineno=862)
DEBUG:numba.core.byteflow:stack ['$184binary_subscr.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=188, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=188 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=188, inst=LOAD_FAST(arg=0, lineno=865)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=190, inst=LOAD_METHOD(arg=2, lineno=865)
DEBUG:numba.core.byteflow:stack ['$extra_args188.0']
DEBUG:numba.core.byteflow:dispatch pc=192, inst=LOAD_CONST(arg=10, lineno=865)
DEBUG:numba.core.byteflow:stack ['$190load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=194, inst=LOAD_FAST(arg=1, lineno=865)
DEBUG:numba.core.byteflow:stack ['$190load_method.1', '$const192.2']
DEBUG:numba.core.byteflow:dispatch pc=196, inst=CALL_METHOD(arg=2, lineno=865)
DEBUG:numba.core.byteflow:stack ['$190load_method.1', '$const192.2', '$default_status194.3']
DEBUG:numba.core.byteflow:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=228, lineno=865)
DEBUG:numba.core.byteflow:stack ['$196call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=200, stack=(), blockstack=(), npush=0), Edge(pc=228, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=188 nstack_initial=0), State(pc_initial=200 nstack_initial=0), State(pc_initial=228 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=200 nstack_initial=0), State(pc_initial=228 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=200, inst=LOAD_GLOBAL(arg=0, lineno=866)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=202, inst=LOAD_METHOD(arg=3, lineno=866)
DEBUG:numba.core.byteflow:stack ['$200load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=204, inst=LOAD_GLOBAL(arg=0, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=206, inst=LOAD_METHOD(arg=4, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1', '$204load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=208, inst=LOAD_FAST(arg=4, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1', '$206load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=210, inst=CALL_METHOD(arg=1, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1', '$206load_method.3', '$diff2y_acf_list208.4']
DEBUG:numba.core.byteflow:dispatch pc=212, inst=LOAD_CONST(arg=4, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1', '$210call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=214, inst=LOAD_CONST(arg=5, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1', '$210call_method.5', '$const212.6']
DEBUG:numba.core.byteflow:dispatch pc=216, inst=BUILD_SLICE(arg=2, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1', '$210call_method.5', '$const212.6', '$const214.7']
DEBUG:numba.core.byteflow:dispatch pc=218, inst=BINARY_SUBSCR(arg=None, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1', '$210call_method.5', '$216build_slice.9']
DEBUG:numba.core.byteflow:dispatch pc=220, inst=LOAD_CONST(arg=6, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1', '$218binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=222, inst=BINARY_POWER(arg=None, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1', '$218binary_subscr.10', '$const220.11']
DEBUG:numba.core.byteflow:dispatch pc=224, inst=CALL_METHOD(arg=1, lineno=866)
DEBUG:numba.core.byteflow:stack ['$202load_method.1', '$222binary_power.12']
DEBUG:numba.core.byteflow:dispatch pc=226, inst=STORE_FAST(arg=10, lineno=866)
DEBUG:numba.core.byteflow:stack ['$224call_method.13']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=228, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=228 nstack_initial=0), State(pc_initial=228 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=228, inst=LOAD_FAST(arg=0, lineno=869)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=230, inst=LOAD_METHOD(arg=2, lineno=869)
DEBUG:numba.core.byteflow:stack ['$extra_args228.0']
DEBUG:numba.core.byteflow:dispatch pc=232, inst=LOAD_CONST(arg=11, lineno=869)
DEBUG:numba.core.byteflow:stack ['$230load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=234, inst=LOAD_FAST(arg=1, lineno=869)
DEBUG:numba.core.byteflow:stack ['$230load_method.1', '$const232.2']
DEBUG:numba.core.byteflow:dispatch pc=236, inst=CALL_METHOD(arg=2, lineno=869)
DEBUG:numba.core.byteflow:stack ['$230load_method.1', '$const232.2', '$default_status234.3']
DEBUG:numba.core.byteflow:dispatch pc=238, inst=POP_JUMP_IF_FALSE(arg=248, lineno=869)
DEBUG:numba.core.byteflow:stack ['$236call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=240, stack=(), blockstack=(), npush=0), Edge(pc=248, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=228 nstack_initial=0), State(pc_initial=240 nstack_initial=0), State(pc_initial=248 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=248 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=240, inst=LOAD_FAST(arg=2, lineno=870)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=242, inst=LOAD_CONST(arg=12, lineno=870)
DEBUG:numba.core.byteflow:stack ['$y_acf_list240.0']
DEBUG:numba.core.byteflow:dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=870)
DEBUG:numba.core.byteflow:stack ['$y_acf_list240.0', '$const242.1']
DEBUG:numba.core.byteflow:dispatch pc=246, inst=STORE_FAST(arg=11, lineno=870)
DEBUG:numba.core.byteflow:stack ['$244binary_subscr.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=248, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=248 nstack_initial=0), State(pc_initial=248 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=248, inst=LOAD_FAST(arg=5, lineno=873)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=250, inst=LOAD_FAST(arg=6, lineno=874)
DEBUG:numba.core.byteflow:stack ['$y_acf1248.0']
DEBUG:numba.core.byteflow:dispatch pc=252, inst=LOAD_FAST(arg=7, lineno=875)
DEBUG:numba.core.byteflow:stack ['$y_acf1248.0', '$y_acf5250.1']
DEBUG:numba.core.byteflow:dispatch pc=254, inst=LOAD_FAST(arg=8, lineno=876)
DEBUG:numba.core.byteflow:stack ['$y_acf1248.0', '$y_acf5250.1', '$diff1y_acf1252.2']
DEBUG:numba.core.byteflow:dispatch pc=256, inst=LOAD_FAST(arg=9, lineno=877)
DEBUG:numba.core.byteflow:stack ['$y_acf1248.0', '$y_acf5250.1', '$diff1y_acf1252.2', '$diff1y_acf5254.3']
DEBUG:numba.core.byteflow:dispatch pc=258, inst=LOAD_FAST(arg=10, lineno=878)
DEBUG:numba.core.byteflow:stack ['$y_acf1248.0', '$y_acf5250.1', '$diff1y_acf1252.2', '$diff1y_acf5254.3', '$diff2y_acf1256.4']
DEBUG:numba.core.byteflow:dispatch pc=260, inst=LOAD_FAST(arg=11, lineno=879)
DEBUG:numba.core.byteflow:stack ['$y_acf1248.0', '$y_acf5250.1', '$diff1y_acf1252.2', '$diff1y_acf5254.3', '$diff2y_acf1256.4', '$diff2y_acf5258.5']
DEBUG:numba.core.byteflow:dispatch pc=262, inst=BUILD_TUPLE(arg=7, lineno=872)
DEBUG:numba.core.byteflow:stack ['$y_acf1248.0', '$y_acf5250.1', '$diff1y_acf1252.2', '$diff1y_acf5254.3', '$diff2y_acf1256.4', '$diff2y_acf5258.5', '$seas_acf1260.6']
DEBUG:numba.core.byteflow:dispatch pc=264, inst=RETURN_VALUE(arg=None, lineno=872)
DEBUG:numba.core.byteflow:stack ['$262build_tuple.7']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=248 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=108 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=128 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set(),
             State(pc_initial=180 nstack_initial=0): set(),
             State(pc_initial=188 nstack_initial=0): set(),
             State(pc_initial=200 nstack_initial=0): set(),
             State(pc_initial=228 nstack_initial=0): set(),
             State(pc_initial=240 nstack_initial=0): set(),
             State(pc_initial=248 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'res': '$14load_global.6'}), (16, {'item': '$14load_global.6', 'res': '$16load_attr.7'}), (18, {'res': '$18load_global.8'}), (20, {'item': '$18load_global.8', 'res': '$20load_attr.9'}), (22, {'res': '$22load_global.10'}), (24, {'item': '$22load_global.10', 'res': '$24load_attr.11'}), (26, {'res': '$26load_global.12'}), (28, {'item': '$26load_global.12', 'res': '$28load_attr.13'}), (30, {'items': ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13'], 'res': '$30build_tuple.14'}), (32, {'iterable': '$30build_tuple.14', 'stores': ['$32unpack_sequence.15', '$32unpack_sequence.16', '$32unpack_sequence.17', '$32unpack_sequence.18', '$32unpack_sequence.19', '$32unpack_sequence.20', '$32unpack_sequence.21'], 'tupleobj': '$32unpack_sequence.22'}), (34, {'value': '$32unpack_sequence.15'}), (36, {'value': '$32unpack_sequence.16'}), (38, {'value': '$32unpack_sequence.17'}), (40, {'value': '$32unpack_sequence.18'}), (42, {'value': '$32unpack_sequence.19'}), (44, {'value': '$32unpack_sequence.20'}), (46, {'value': '$32unpack_sequence.21'}), (48, {'res': '$extra_args48.23'}), (50, {'item': '$extra_args48.23', 'res': '$50load_method.24'}), (52, {'res': '$const52.25'}), (54, {'res': '$default_status54.26'}), (56, {'func': '$50load_method.24', 'args': ['$const52.25', '$default_status54.26'], 'res': '$56call_method.27'}), (58, {'pred': '$56call_method.27'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 68: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$y_acf_list60.0'}), (62, {'res': '$const62.1'}), (64, {'index': '$const62.1', 'target': '$y_acf_list60.0', 'res': '$64binary_subscr.2'}), (66, {'value': '$64binary_subscr.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$extra_args68.0'}), (70, {'item': '$extra_args68.0', 'res': '$70load_method.1'}), (72, {'res': '$const72.2'}), (74, {'res': '$default_status74.3'}), (76, {'func': '$70load_method.1', 'args': ['$const72.2', '$default_status74.3'], 'res': '$76call_method.4'}), (78, {'pred': '$76call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 108: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$80load_global.0'}), (82, {'item': '$80load_global.0', 'res': '$82load_method.1'}), (84, {'res': '$84load_global.2'}), (86, {'item': '$84load_global.2', 'res': '$86load_method.3'}), (88, {'res': '$y_acf_list88.4'}), (90, {'func': '$86load_method.3', 'args': ['$y_acf_list88.4'], 'res': '$90call_method.5'}), (92, {'res': '$const92.6'}), (94, {'res': '$const94.7'}), (96, {'start': '$const92.6', 'stop': '$const94.7', 'step': None, 'res': '$96build_slice.9', 'slicevar': '$96build_slice.8'}), (98, {'index': '$96build_slice.9', 'target': '$90call_method.5', 'res': '$98binary_subscr.10'}), (100, {'res': '$const100.11'}), (102, {'lhs': '$98binary_subscr.10', 'rhs': '$const100.11', 'res': '$102binary_power.12'}), (104, {'func': '$82load_method.1', 'args': ['$102binary_power.12'], 'res': '$104call_method.13'}), (106, {'value': '$104call_method.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={108: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=108 nstack_initial=0):
AdaptBlockInfo(insts=((108, {'res': '$extra_args108.0'}), (110, {'item': '$extra_args108.0', 'res': '$110load_method.1'}), (112, {'res': '$const112.2'}), (114, {'res': '$default_status114.3'}), (116, {'func': '$110load_method.1', 'args': ['$const112.2', '$default_status114.3'], 'res': '$116call_method.4'}), (118, {'pred': '$116call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: (), 128: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$diff1y_acf_list120.0'}), (122, {'res': '$const122.1'}), (124, {'index': '$const122.1', 'target': '$diff1y_acf_list120.0', 'res': '$124binary_subscr.2'}), (126, {'value': '$124binary_subscr.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=128 nstack_initial=0):
AdaptBlockInfo(insts=((128, {'res': '$extra_args128.0'}), (130, {'item': '$extra_args128.0', 'res': '$130load_method.1'}), (132, {'res': '$const132.2'}), (134, {'res': '$default_status134.3'}), (136, {'func': '$130load_method.1', 'args': ['$const132.2', '$default_status134.3'], 'res': '$136call_method.4'}), (138, {'pred': '$136call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: (), 168: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$140load_global.0'}), (142, {'item': '$140load_global.0', 'res': '$142load_method.1'}), (144, {'res': '$144load_global.2'}), (146, {'item': '$144load_global.2', 'res': '$146load_method.3'}), (148, {'res': '$diff1y_acf_list148.4'}), (150, {'func': '$146load_method.3', 'args': ['$diff1y_acf_list148.4'], 'res': '$150call_method.5'}), (152, {'res': '$const152.6'}), (154, {'res': '$const154.7'}), (156, {'start': '$const152.6', 'stop': '$const154.7', 'step': None, 'res': '$156build_slice.9', 'slicevar': '$156build_slice.8'}), (158, {'index': '$156build_slice.9', 'target': '$150call_method.5', 'res': '$158binary_subscr.10'}), (160, {'res': '$const160.11'}), (162, {'lhs': '$158binary_subscr.10', 'rhs': '$const160.11', 'res': '$162binary_power.12'}), (164, {'func': '$142load_method.1', 'args': ['$162binary_power.12'], 'res': '$164call_method.13'}), (166, {'value': '$164call_method.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$extra_args168.0'}), (170, {'item': '$extra_args168.0', 'res': '$170load_method.1'}), (172, {'res': '$const172.2'}), (174, {'res': '$default_status174.3'}), (176, {'func': '$170load_method.1', 'args': ['$const172.2', '$default_status174.3'], 'res': '$176call_method.4'}), (178, {'pred': '$176call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={180: (), 188: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=180 nstack_initial=0):
AdaptBlockInfo(insts=((180, {'res': '$diff2y_acf_list180.0'}), (182, {'res': '$const182.1'}), (184, {'index': '$const182.1', 'target': '$diff2y_acf_list180.0', 'res': '$184binary_subscr.2'}), (186, {'value': '$184binary_subscr.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={188: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=188 nstack_initial=0):
AdaptBlockInfo(insts=((188, {'res': '$extra_args188.0'}), (190, {'item': '$extra_args188.0', 'res': '$190load_method.1'}), (192, {'res': '$const192.2'}), (194, {'res': '$default_status194.3'}), (196, {'func': '$190load_method.1', 'args': ['$const192.2', '$default_status194.3'], 'res': '$196call_method.4'}), (198, {'pred': '$196call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: (), 228: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=200 nstack_initial=0):
AdaptBlockInfo(insts=((200, {'res': '$200load_global.0'}), (202, {'item': '$200load_global.0', 'res': '$202load_method.1'}), (204, {'res': '$204load_global.2'}), (206, {'item': '$204load_global.2', 'res': '$206load_method.3'}), (208, {'res': '$diff2y_acf_list208.4'}), (210, {'func': '$206load_method.3', 'args': ['$diff2y_acf_list208.4'], 'res': '$210call_method.5'}), (212, {'res': '$const212.6'}), (214, {'res': '$const214.7'}), (216, {'start': '$const212.6', 'stop': '$const214.7', 'step': None, 'res': '$216build_slice.9', 'slicevar': '$216build_slice.8'}), (218, {'index': '$216build_slice.9', 'target': '$210call_method.5', 'res': '$218binary_subscr.10'}), (220, {'res': '$const220.11'}), (222, {'lhs': '$218binary_subscr.10', 'rhs': '$const220.11', 'res': '$222binary_power.12'}), (224, {'func': '$202load_method.1', 'args': ['$222binary_power.12'], 'res': '$224call_method.13'}), (226, {'value': '$224call_method.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={228: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=228 nstack_initial=0):
AdaptBlockInfo(insts=((228, {'res': '$extra_args228.0'}), (230, {'item': '$extra_args228.0', 'res': '$230load_method.1'}), (232, {'res': '$const232.2'}), (234, {'res': '$default_status234.3'}), (236, {'func': '$230load_method.1', 'args': ['$const232.2', '$default_status234.3'], 'res': '$236call_method.4'}), (238, {'pred': '$236call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={240: (), 248: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'res': '$y_acf_list240.0'}), (242, {'res': '$const242.1'}), (244, {'index': '$const242.1', 'target': '$y_acf_list240.0', 'res': '$244binary_subscr.2'}), (246, {'value': '$244binary_subscr.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={248: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=248 nstack_initial=0):
AdaptBlockInfo(insts=((248, {'res': '$y_acf1248.0'}), (250, {'res': '$y_acf5250.1'}), (252, {'res': '$diff1y_acf1252.2'}), (254, {'res': '$diff1y_acf5254.3'}), (256, {'res': '$diff2y_acf1256.4'}), (258, {'res': '$diff2y_acf5258.5'}), (260, {'res': '$seas_acf1260.6'}), (262, {'items': ['$y_acf1248.0', '$y_acf5250.1', '$diff1y_acf1252.2', '$diff1y_acf5254.3', '$diff2y_acf1256.4', '$diff2y_acf5258.5', '$seas_acf1260.6'], 'res': '$262build_tuple.7'}), (264, {'retval': '$262build_tuple.7', 'castval': '$264return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    extra_args = arg(0, name=extra_args)     ['extra_args']
    default_status = arg(1, name=default_status) ['default_status']
    y_acf_list = arg(2, name=y_acf_list)     ['y_acf_list']
    diff1y_acf_list = arg(3, name=diff1y_acf_list) ['diff1y_acf_list']
    diff2y_acf_list = arg(4, name=diff2y_acf_list) ['diff2y_acf_list']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=nan) ['$2load_global.0', '$4load_attr.1']
    $6load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.2']
    $8load_attr.3 = getattr(value=$6load_global.2, attr=nan) ['$6load_global.2', '$8load_attr.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=nan) ['$10load_global.4', '$12load_attr.5']
    $14load_global.6 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.6']
    $16load_attr.7 = getattr(value=$14load_global.6, attr=nan) ['$14load_global.6', '$16load_attr.7']
    $18load_global.8 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$18load_global.8']
    $20load_attr.9 = getattr(value=$18load_global.8, attr=nan) ['$18load_global.8', '$20load_attr.9']
    $22load_global.10 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$22load_global.10']
    $24load_attr.11 = getattr(value=$22load_global.10, attr=nan) ['$22load_global.10', '$24load_attr.11']
    $26load_global.12 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$26load_global.12']
    $28load_attr.13 = getattr(value=$26load_global.12, attr=nan) ['$26load_global.12', '$28load_attr.13']
    $30build_tuple.14 = build_tuple(items=[Var($4load_attr.1, tsfeatures.py:842), Var($8load_attr.3, tsfeatures.py:842), Var($12load_attr.5, tsfeatures.py:842), Var($16load_attr.7, tsfeatures.py:842), Var($20load_attr.9, tsfeatures.py:842), Var($24load_attr.11, tsfeatures.py:842), Var($28load_attr.13, tsfeatures.py:842)]) ['$12load_attr.5', '$16load_attr.7', '$20load_attr.9', '$24load_attr.11', '$28load_attr.13', '$30build_tuple.14', '$4load_attr.1', '$8load_attr.3']
    $32unpack_sequence.22 = exhaust_iter(value=$30build_tuple.14, count=7) ['$30build_tuple.14', '$32unpack_sequence.22']
    $32unpack_sequence.15 = static_getitem(value=$32unpack_sequence.22, index=0, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.15', '$32unpack_sequence.22']
    $32unpack_sequence.16 = static_getitem(value=$32unpack_sequence.22, index=1, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.16', '$32unpack_sequence.22']
    $32unpack_sequence.17 = static_getitem(value=$32unpack_sequence.22, index=2, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.17', '$32unpack_sequence.22']
    $32unpack_sequence.18 = static_getitem(value=$32unpack_sequence.22, index=3, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.18', '$32unpack_sequence.22']
    $32unpack_sequence.19 = static_getitem(value=$32unpack_sequence.22, index=4, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.19', '$32unpack_sequence.22']
    $32unpack_sequence.20 = static_getitem(value=$32unpack_sequence.22, index=5, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.20', '$32unpack_sequence.22']
    $32unpack_sequence.21 = static_getitem(value=$32unpack_sequence.22, index=6, index_var=None, fn=<built-in function getitem>) ['$32unpack_sequence.21', '$32unpack_sequence.22']
    y_acf1 = $32unpack_sequence.15           ['$32unpack_sequence.15', 'y_acf1']
    y_acf5 = $32unpack_sequence.16           ['$32unpack_sequence.16', 'y_acf5']
    diff1y_acf1 = $32unpack_sequence.17      ['$32unpack_sequence.17', 'diff1y_acf1']
    diff1y_acf5 = $32unpack_sequence.18      ['$32unpack_sequence.18', 'diff1y_acf5']
    diff2y_acf1 = $32unpack_sequence.19      ['$32unpack_sequence.19', 'diff2y_acf1']
    diff2y_acf5 = $32unpack_sequence.20      ['$32unpack_sequence.20', 'diff2y_acf5']
    seas_acf1 = $32unpack_sequence.21        ['$32unpack_sequence.21', 'seas_acf1']
    $50load_method.24 = getattr(value=extra_args, attr=get) ['$50load_method.24', 'extra_args']
    $const52.25 = const(str, y_acf1)         ['$const52.25']
    $56call_method.27 = call $50load_method.24($const52.25, default_status, func=$50load_method.24, args=[Var($const52.25, tsfeatures.py:845), Var(default_status, tsfeatures.py:842)], kws=(), vararg=None) ['$50load_method.24', '$56call_method.27', '$const52.25', 'default_status']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56call_method.27, func=bool58, args=(Var($56call_method.27, tsfeatures.py:845),), kws=(), vararg=None) ['$56call_method.27', '$58pred', 'bool58']
    branch $58pred, 60, 68                   ['$58pred']
label 60:
    $const62.1 = const(int, 0)               ['$const62.1']
    y_acf1 = getitem(value=y_acf_list, index=$const62.1, fn=<built-in function getitem>) ['$const62.1', 'y_acf1', 'y_acf_list']
    jump 68                                  []
label 68:
    $70load_method.1 = getattr(value=extra_args, attr=get) ['$70load_method.1', 'extra_args']
    $const72.2 = const(str, y_acf5)          ['$const72.2']
    $76call_method.4 = call $70load_method.1($const72.2, default_status, func=$70load_method.1, args=[Var($const72.2, tsfeatures.py:849), Var(default_status, tsfeatures.py:842)], kws=(), vararg=None) ['$70load_method.1', '$76call_method.4', '$const72.2', 'default_status']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76call_method.4, func=bool78, args=(Var($76call_method.4, tsfeatures.py:849),), kws=(), vararg=None) ['$76call_method.4', '$78pred', 'bool78']
    branch $78pred, 80, 108                  ['$78pred']
label 80:
    $80load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$80load_global.0']
    $82load_method.1 = getattr(value=$80load_global.0, attr=sum) ['$80load_global.0', '$82load_method.1']
    $84load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$84load_global.2']
    $86load_method.3 = getattr(value=$84load_global.2, attr=asarray) ['$84load_global.2', '$86load_method.3']
    $90call_method.5 = call $86load_method.3(y_acf_list, func=$86load_method.3, args=[Var(y_acf_list, tsfeatures.py:842)], kws=(), vararg=None) ['$86load_method.3', '$90call_method.5', 'y_acf_list']
    $const92.6 = const(NoneType, None)       ['$const92.6']
    $const94.7 = const(int, 5)               ['$const94.7']
    $96build_slice.8 = global(slice: <class 'slice'>) ['$96build_slice.8']
    $96build_slice.9 = call $96build_slice.8($const92.6, $const94.7, func=$96build_slice.8, args=(Var($const92.6, tsfeatures.py:850), Var($const94.7, tsfeatures.py:850)), kws=(), vararg=None) ['$96build_slice.8', '$96build_slice.9', '$const92.6', '$const94.7']
    $98binary_subscr.10 = getitem(value=$90call_method.5, index=$96build_slice.9, fn=<built-in function getitem>) ['$90call_method.5', '$96build_slice.9', '$98binary_subscr.10']
    $const100.11 = const(int, 2)             ['$const100.11']
    $102binary_power.12 = $98binary_subscr.10 ** $const100.11 ['$102binary_power.12', '$98binary_subscr.10', '$const100.11']
    y_acf5 = call $82load_method.1($102binary_power.12, func=$82load_method.1, args=[Var($102binary_power.12, tsfeatures.py:850)], kws=(), vararg=None) ['$102binary_power.12', '$82load_method.1', 'y_acf5']
    jump 108                                 []
label 108:
    $110load_method.1 = getattr(value=extra_args, attr=get) ['$110load_method.1', 'extra_args']
    $const112.2 = const(str, diff1y_acf1)    ['$const112.2']
    $116call_method.4 = call $110load_method.1($const112.2, default_status, func=$110load_method.1, args=[Var($const112.2, tsfeatures.py:853), Var(default_status, tsfeatures.py:842)], kws=(), vararg=None) ['$110load_method.1', '$116call_method.4', '$const112.2', 'default_status']
    bool118 = global(bool: <class 'bool'>)   ['bool118']
    $118pred = call bool118($116call_method.4, func=bool118, args=(Var($116call_method.4, tsfeatures.py:853),), kws=(), vararg=None) ['$116call_method.4', '$118pred', 'bool118']
    branch $118pred, 120, 128                ['$118pred']
label 120:
    $const122.1 = const(int, 0)              ['$const122.1']
    diff1y_acf1 = getitem(value=diff1y_acf_list, index=$const122.1, fn=<built-in function getitem>) ['$const122.1', 'diff1y_acf1', 'diff1y_acf_list']
    jump 128                                 []
label 128:
    $130load_method.1 = getattr(value=extra_args, attr=get) ['$130load_method.1', 'extra_args']
    $const132.2 = const(str, diff1y_acf5)    ['$const132.2']
    $136call_method.4 = call $130load_method.1($const132.2, default_status, func=$130load_method.1, args=[Var($const132.2, tsfeatures.py:857), Var(default_status, tsfeatures.py:842)], kws=(), vararg=None) ['$130load_method.1', '$136call_method.4', '$const132.2', 'default_status']
    bool138 = global(bool: <class 'bool'>)   ['bool138']
    $138pred = call bool138($136call_method.4, func=bool138, args=(Var($136call_method.4, tsfeatures.py:857),), kws=(), vararg=None) ['$136call_method.4', '$138pred', 'bool138']
    branch $138pred, 140, 168                ['$138pred']
label 140:
    $140load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$140load_global.0']
    $142load_method.1 = getattr(value=$140load_global.0, attr=sum) ['$140load_global.0', '$142load_method.1']
    $144load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$144load_global.2']
    $146load_method.3 = getattr(value=$144load_global.2, attr=asarray) ['$144load_global.2', '$146load_method.3']
    $150call_method.5 = call $146load_method.3(diff1y_acf_list, func=$146load_method.3, args=[Var(diff1y_acf_list, tsfeatures.py:842)], kws=(), vararg=None) ['$146load_method.3', '$150call_method.5', 'diff1y_acf_list']
    $const152.6 = const(NoneType, None)      ['$const152.6']
    $const154.7 = const(int, 5)              ['$const154.7']
    $156build_slice.8 = global(slice: <class 'slice'>) ['$156build_slice.8']
    $156build_slice.9 = call $156build_slice.8($const152.6, $const154.7, func=$156build_slice.8, args=(Var($const152.6, tsfeatures.py:858), Var($const154.7, tsfeatures.py:858)), kws=(), vararg=None) ['$156build_slice.8', '$156build_slice.9', '$const152.6', '$const154.7']
    $158binary_subscr.10 = getitem(value=$150call_method.5, index=$156build_slice.9, fn=<built-in function getitem>) ['$150call_method.5', '$156build_slice.9', '$158binary_subscr.10']
    $const160.11 = const(int, 2)             ['$const160.11']
    $162binary_power.12 = $158binary_subscr.10 ** $const160.11 ['$158binary_subscr.10', '$162binary_power.12', '$const160.11']
    diff1y_acf5 = call $142load_method.1($162binary_power.12, func=$142load_method.1, args=[Var($162binary_power.12, tsfeatures.py:858)], kws=(), vararg=None) ['$142load_method.1', '$162binary_power.12', 'diff1y_acf5']
    jump 168                                 []
label 168:
    $170load_method.1 = getattr(value=extra_args, attr=get) ['$170load_method.1', 'extra_args']
    $const172.2 = const(str, diff2y_acf1)    ['$const172.2']
    $176call_method.4 = call $170load_method.1($const172.2, default_status, func=$170load_method.1, args=[Var($const172.2, tsfeatures.py:861), Var(default_status, tsfeatures.py:842)], kws=(), vararg=None) ['$170load_method.1', '$176call_method.4', '$const172.2', 'default_status']
    bool178 = global(bool: <class 'bool'>)   ['bool178']
    $178pred = call bool178($176call_method.4, func=bool178, args=(Var($176call_method.4, tsfeatures.py:861),), kws=(), vararg=None) ['$176call_method.4', '$178pred', 'bool178']
    branch $178pred, 180, 188                ['$178pred']
label 180:
    $const182.1 = const(int, 0)              ['$const182.1']
    diff2y_acf1 = getitem(value=diff2y_acf_list, index=$const182.1, fn=<built-in function getitem>) ['$const182.1', 'diff2y_acf1', 'diff2y_acf_list']
    jump 188                                 []
label 188:
    $190load_method.1 = getattr(value=extra_args, attr=get) ['$190load_method.1', 'extra_args']
    $const192.2 = const(str, diff2y_acf5)    ['$const192.2']
    $196call_method.4 = call $190load_method.1($const192.2, default_status, func=$190load_method.1, args=[Var($const192.2, tsfeatures.py:865), Var(default_status, tsfeatures.py:842)], kws=(), vararg=None) ['$190load_method.1', '$196call_method.4', '$const192.2', 'default_status']
    bool198 = global(bool: <class 'bool'>)   ['bool198']
    $198pred = call bool198($196call_method.4, func=bool198, args=(Var($196call_method.4, tsfeatures.py:865),), kws=(), vararg=None) ['$196call_method.4', '$198pred', 'bool198']
    branch $198pred, 200, 228                ['$198pred']
label 200:
    $200load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$200load_global.0']
    $202load_method.1 = getattr(value=$200load_global.0, attr=sum) ['$200load_global.0', '$202load_method.1']
    $204load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$204load_global.2']
    $206load_method.3 = getattr(value=$204load_global.2, attr=asarray) ['$204load_global.2', '$206load_method.3']
    $210call_method.5 = call $206load_method.3(diff2y_acf_list, func=$206load_method.3, args=[Var(diff2y_acf_list, tsfeatures.py:842)], kws=(), vararg=None) ['$206load_method.3', '$210call_method.5', 'diff2y_acf_list']
    $const212.6 = const(NoneType, None)      ['$const212.6']
    $const214.7 = const(int, 5)              ['$const214.7']
    $216build_slice.8 = global(slice: <class 'slice'>) ['$216build_slice.8']
    $216build_slice.9 = call $216build_slice.8($const212.6, $const214.7, func=$216build_slice.8, args=(Var($const212.6, tsfeatures.py:866), Var($const214.7, tsfeatures.py:866)), kws=(), vararg=None) ['$216build_slice.8', '$216build_slice.9', '$const212.6', '$const214.7']
    $218binary_subscr.10 = getitem(value=$210call_method.5, index=$216build_slice.9, fn=<built-in function getitem>) ['$210call_method.5', '$216build_slice.9', '$218binary_subscr.10']
    $const220.11 = const(int, 2)             ['$const220.11']
    $222binary_power.12 = $218binary_subscr.10 ** $const220.11 ['$218binary_subscr.10', '$222binary_power.12', '$const220.11']
    diff2y_acf5 = call $202load_method.1($222binary_power.12, func=$202load_method.1, args=[Var($222binary_power.12, tsfeatures.py:866)], kws=(), vararg=None) ['$202load_method.1', '$222binary_power.12', 'diff2y_acf5']
    jump 228                                 []
label 228:
    $230load_method.1 = getattr(value=extra_args, attr=get) ['$230load_method.1', 'extra_args']
    $const232.2 = const(str, seas_acf1)      ['$const232.2']
    $236call_method.4 = call $230load_method.1($const232.2, default_status, func=$230load_method.1, args=[Var($const232.2, tsfeatures.py:869), Var(default_status, tsfeatures.py:842)], kws=(), vararg=None) ['$230load_method.1', '$236call_method.4', '$const232.2', 'default_status']
    bool238 = global(bool: <class 'bool'>)   ['bool238']
    $238pred = call bool238($236call_method.4, func=bool238, args=(Var($236call_method.4, tsfeatures.py:869),), kws=(), vararg=None) ['$236call_method.4', '$238pred', 'bool238']
    branch $238pred, 240, 248                ['$238pred']
label 240:
    $const242.1 = const(int, -1)             ['$const242.1']
    seas_acf1 = getitem(value=y_acf_list, index=$const242.1, fn=<built-in function getitem>) ['$const242.1', 'seas_acf1', 'y_acf_list']
    jump 248                                 []
label 248:
    $262build_tuple.7 = build_tuple(items=[Var(y_acf1, tsfeatures.py:835), Var(y_acf5, tsfeatures.py:836), Var(diff1y_acf1, tsfeatures.py:837), Var(diff1y_acf5, tsfeatures.py:838), Var(diff2y_acf1, tsfeatures.py:839), Var(diff2y_acf5, tsfeatures.py:840), Var(seas_acf1, tsfeatures.py:841)]) ['$262build_tuple.7', 'diff1y_acf1', 'diff1y_acf5', 'diff2y_acf1', 'diff2y_acf5', 'seas_acf1', 'y_acf1', 'y_acf5']
    $264return_value.8 = cast(value=$262build_tuple.7) ['$262build_tuple.7', '$264return_value.8']
    return $264return_value.8                ['$264return_value.8']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=913)
           2	LOAD_GLOBAL(arg=0, lineno=913)
           4	LOAD_ATTR(arg=1, lineno=913)
           6	LOAD_GLOBAL(arg=0, lineno=913)
           8	LOAD_ATTR(arg=1, lineno=913)
          10	LOAD_GLOBAL(arg=0, lineno=913)
          12	LOAD_ATTR(arg=1, lineno=913)
          14	LOAD_GLOBAL(arg=0, lineno=913)
          16	LOAD_ATTR(arg=1, lineno=913)
          18	BUILD_TUPLE(arg=4, lineno=913)
          20	UNPACK_SEQUENCE(arg=4, lineno=908)
          22	STORE_FAST(arg=5, lineno=909)
          24	STORE_FAST(arg=6, lineno=910)
          26	STORE_FAST(arg=7, lineno=911)
          28	STORE_FAST(arg=8, lineno=912)
          30	LOAD_FAST(arg=0, lineno=916)
          32	LOAD_METHOD(arg=2, lineno=916)
          34	LOAD_CONST(arg=1, lineno=916)
          36	LOAD_FAST(arg=1, lineno=916)
          38	CALL_METHOD(arg=2, lineno=916)
          40	POP_JUMP_IF_FALSE(arg=70, lineno=916)
          42	LOAD_GLOBAL(arg=0, lineno=917)
          44	LOAD_METHOD(arg=3, lineno=917)
          46	LOAD_GLOBAL(arg=0, lineno=917)
          48	LOAD_METHOD(arg=4, lineno=917)
          50	LOAD_FAST(arg=2, lineno=917)
          52	CALL_METHOD(arg=1, lineno=917)
          54	LOAD_CONST(arg=2, lineno=917)
          56	LOAD_CONST(arg=3, lineno=917)
          58	BUILD_SLICE(arg=2, lineno=917)
          60	BINARY_SUBSCR(arg=None, lineno=917)
          62	LOAD_CONST(arg=4, lineno=917)
          64	BINARY_POWER(arg=None, lineno=917)
          66	CALL_METHOD(arg=1, lineno=917)
          68	STORE_FAST(arg=5, lineno=917)
>         70	LOAD_FAST(arg=0, lineno=920)
          72	LOAD_METHOD(arg=2, lineno=920)
          74	LOAD_CONST(arg=5, lineno=920)
          76	LOAD_FAST(arg=1, lineno=920)
          78	CALL_METHOD(arg=2, lineno=920)
          80	POP_JUMP_IF_FALSE(arg=110, lineno=920)
          82	LOAD_GLOBAL(arg=0, lineno=921)
          84	LOAD_METHOD(arg=3, lineno=921)
          86	LOAD_GLOBAL(arg=0, lineno=921)
          88	LOAD_METHOD(arg=4, lineno=921)
          90	LOAD_FAST(arg=3, lineno=921)
          92	CALL_METHOD(arg=1, lineno=921)
          94	LOAD_CONST(arg=2, lineno=921)
          96	LOAD_CONST(arg=3, lineno=921)
          98	BUILD_SLICE(arg=2, lineno=921)
         100	BINARY_SUBSCR(arg=None, lineno=921)
         102	LOAD_CONST(arg=4, lineno=921)
         104	BINARY_POWER(arg=None, lineno=921)
         106	CALL_METHOD(arg=1, lineno=921)
         108	STORE_FAST(arg=6, lineno=921)
>        110	LOAD_FAST(arg=0, lineno=924)
         112	LOAD_METHOD(arg=2, lineno=924)
         114	LOAD_CONST(arg=6, lineno=924)
         116	LOAD_FAST(arg=1, lineno=924)
         118	CALL_METHOD(arg=2, lineno=924)
         120	POP_JUMP_IF_FALSE(arg=150, lineno=924)
         122	LOAD_GLOBAL(arg=0, lineno=925)
         124	LOAD_METHOD(arg=3, lineno=925)
         126	LOAD_GLOBAL(arg=0, lineno=925)
         128	LOAD_METHOD(arg=4, lineno=925)
         130	LOAD_FAST(arg=4, lineno=925)
         132	CALL_METHOD(arg=1, lineno=925)
         134	LOAD_CONST(arg=2, lineno=925)
         136	LOAD_CONST(arg=3, lineno=925)
         138	BUILD_SLICE(arg=2, lineno=925)
         140	BINARY_SUBSCR(arg=None, lineno=925)
         142	LOAD_CONST(arg=4, lineno=925)
         144	BINARY_POWER(arg=None, lineno=925)
         146	CALL_METHOD(arg=1, lineno=925)
         148	STORE_FAST(arg=7, lineno=925)
>        150	LOAD_FAST(arg=0, lineno=928)
         152	LOAD_METHOD(arg=2, lineno=928)
         154	LOAD_CONST(arg=7, lineno=928)
         156	LOAD_FAST(arg=1, lineno=928)
         158	CALL_METHOD(arg=2, lineno=928)
         160	POP_JUMP_IF_FALSE(arg=170, lineno=928)
         162	LOAD_FAST(arg=2, lineno=929)
         164	LOAD_CONST(arg=8, lineno=929)
         166	BINARY_SUBSCR(arg=None, lineno=929)
         168	STORE_FAST(arg=8, lineno=929)
>        170	LOAD_FAST(arg=5, lineno=932)
         172	LOAD_FAST(arg=6, lineno=933)
         174	LOAD_FAST(arg=7, lineno=934)
         176	LOAD_FAST(arg=8, lineno=935)
         178	BUILD_TUPLE(arg=4, lineno=931)
         180	RETURN_VALUE(arg=None, lineno=931)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=913)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=913)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=913)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=913)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=913)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=913)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=913)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=913)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=913)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$14load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=BUILD_TUPLE(arg=4, lineno=913)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=UNPACK_SEQUENCE(arg=4, lineno=908)
DEBUG:numba.core.byteflow:stack ['$18build_tuple.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=STORE_FAST(arg=5, lineno=909)
DEBUG:numba.core.byteflow:stack ['$20unpack_sequence.12', '$20unpack_sequence.11', '$20unpack_sequence.10', '$20unpack_sequence.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=6, lineno=910)
DEBUG:numba.core.byteflow:stack ['$20unpack_sequence.12', '$20unpack_sequence.11', '$20unpack_sequence.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=STORE_FAST(arg=7, lineno=911)
DEBUG:numba.core.byteflow:stack ['$20unpack_sequence.12', '$20unpack_sequence.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=8, lineno=912)
DEBUG:numba.core.byteflow:stack ['$20unpack_sequence.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=916)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_METHOD(arg=2, lineno=916)
DEBUG:numba.core.byteflow:stack ['$extra_args30.14']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=916)
DEBUG:numba.core.byteflow:stack ['$32load_method.15']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=916)
DEBUG:numba.core.byteflow:stack ['$32load_method.15', '$const34.16']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=CALL_METHOD(arg=2, lineno=916)
DEBUG:numba.core.byteflow:stack ['$32load_method.15', '$const34.16', '$default_status36.17']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=70, lineno=916)
DEBUG:numba.core.byteflow:stack ['$38call_method.18']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=917)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_METHOD(arg=3, lineno=917)
DEBUG:numba.core.byteflow:stack ['$42load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_GLOBAL(arg=0, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_METHOD(arg=4, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$46load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$48load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=CALL_METHOD(arg=1, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$48load_method.3', '$y_pacf_list50.4']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$52call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_CONST(arg=3, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$52call_method.5', '$const54.6']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=BUILD_SLICE(arg=2, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$52call_method.5', '$const54.6', '$const56.7']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$52call_method.5', '$58build_slice.9']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_CONST(arg=4, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$60binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=BINARY_POWER(arg=None, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$60binary_subscr.10', '$const62.11']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=CALL_METHOD(arg=1, lineno=917)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$64binary_power.12']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=STORE_FAST(arg=5, lineno=917)
DEBUG:numba.core.byteflow:stack ['$66call_method.13']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=920)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_METHOD(arg=2, lineno=920)
DEBUG:numba.core.byteflow:stack ['$extra_args70.0']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_CONST(arg=5, lineno=920)
DEBUG:numba.core.byteflow:stack ['$72load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=1, lineno=920)
DEBUG:numba.core.byteflow:stack ['$72load_method.1', '$const74.2']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=CALL_METHOD(arg=2, lineno=920)
DEBUG:numba.core.byteflow:stack ['$72load_method.1', '$const74.2', '$default_status76.3']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=110, lineno=920)
DEBUG:numba.core.byteflow:stack ['$78call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=110, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=921)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_METHOD(arg=3, lineno=921)
DEBUG:numba.core.byteflow:stack ['$82load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_GLOBAL(arg=0, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_METHOD(arg=4, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$86load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=3, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$88load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=CALL_METHOD(arg=1, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$88load_method.3', '$diff1y_pacf_list90.4']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_CONST(arg=2, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$92call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$92call_method.5', '$const94.6']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=BUILD_SLICE(arg=2, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$92call_method.5', '$const94.6', '$const96.7']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=BINARY_SUBSCR(arg=None, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$92call_method.5', '$98build_slice.9']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_CONST(arg=4, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$100binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=BINARY_POWER(arg=None, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$100binary_subscr.10', '$const102.11']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=CALL_METHOD(arg=1, lineno=921)
DEBUG:numba.core.byteflow:stack ['$84load_method.1', '$104binary_power.12']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=STORE_FAST(arg=6, lineno=921)
DEBUG:numba.core.byteflow:stack ['$106call_method.13']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=110, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=110 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_FAST(arg=0, lineno=924)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=924)
DEBUG:numba.core.byteflow:stack ['$extra_args110.0']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_CONST(arg=6, lineno=924)
DEBUG:numba.core.byteflow:stack ['$112load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_FAST(arg=1, lineno=924)
DEBUG:numba.core.byteflow:stack ['$112load_method.1', '$const114.2']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=CALL_METHOD(arg=2, lineno=924)
DEBUG:numba.core.byteflow:stack ['$112load_method.1', '$const114.2', '$default_status116.3']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=POP_JUMP_IF_FALSE(arg=150, lineno=924)
DEBUG:numba.core.byteflow:stack ['$118call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=122, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=110 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=925)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=124, inst=LOAD_METHOD(arg=3, lineno=925)
DEBUG:numba.core.byteflow:stack ['$122load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=LOAD_GLOBAL(arg=0, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=LOAD_METHOD(arg=4, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1', '$126load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1', '$128load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=CALL_METHOD(arg=1, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1', '$128load_method.3', '$diff2y_pacf_list130.4']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=LOAD_CONST(arg=2, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1', '$132call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=LOAD_CONST(arg=3, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1', '$132call_method.5', '$const134.6']
DEBUG:numba.core.byteflow:dispatch pc=138, inst=BUILD_SLICE(arg=2, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1', '$132call_method.5', '$const134.6', '$const136.7']
DEBUG:numba.core.byteflow:dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1', '$132call_method.5', '$138build_slice.9']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=LOAD_CONST(arg=4, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1', '$140binary_subscr.10']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=BINARY_POWER(arg=None, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1', '$140binary_subscr.10', '$const142.11']
DEBUG:numba.core.byteflow:dispatch pc=146, inst=CALL_METHOD(arg=1, lineno=925)
DEBUG:numba.core.byteflow:stack ['$124load_method.1', '$144binary_power.12']
DEBUG:numba.core.byteflow:dispatch pc=148, inst=STORE_FAST(arg=7, lineno=925)
DEBUG:numba.core.byteflow:stack ['$146call_method.13']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=150, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=150 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=150, inst=LOAD_FAST(arg=0, lineno=928)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=152, inst=LOAD_METHOD(arg=2, lineno=928)
DEBUG:numba.core.byteflow:stack ['$extra_args150.0']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=LOAD_CONST(arg=7, lineno=928)
DEBUG:numba.core.byteflow:stack ['$152load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=928)
DEBUG:numba.core.byteflow:stack ['$152load_method.1', '$const154.2']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=CALL_METHOD(arg=2, lineno=928)
DEBUG:numba.core.byteflow:stack ['$152load_method.1', '$const154.2', '$default_status156.3']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=POP_JUMP_IF_FALSE(arg=170, lineno=928)
DEBUG:numba.core.byteflow:stack ['$158call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=162, stack=(), blockstack=(), npush=0), Edge(pc=170, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=150 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=170 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=162 nstack_initial=0), State(pc_initial=170 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_FAST(arg=2, lineno=929)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_CONST(arg=8, lineno=929)
DEBUG:numba.core.byteflow:stack ['$y_pacf_list162.0']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=929)
DEBUG:numba.core.byteflow:stack ['$y_pacf_list162.0', '$const164.1']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=STORE_FAST(arg=8, lineno=929)
DEBUG:numba.core.byteflow:stack ['$166binary_subscr.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=170, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=170 nstack_initial=0), State(pc_initial=170 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=170, inst=LOAD_FAST(arg=5, lineno=932)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_FAST(arg=6, lineno=933)
DEBUG:numba.core.byteflow:stack ['$y_pacf5170.0']
DEBUG:numba.core.byteflow:dispatch pc=174, inst=LOAD_FAST(arg=7, lineno=934)
DEBUG:numba.core.byteflow:stack ['$y_pacf5170.0', '$diff1y_pacf5172.1']
DEBUG:numba.core.byteflow:dispatch pc=176, inst=LOAD_FAST(arg=8, lineno=935)
DEBUG:numba.core.byteflow:stack ['$y_pacf5170.0', '$diff1y_pacf5172.1', '$diff2y_pacf5174.2']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=BUILD_TUPLE(arg=4, lineno=931)
DEBUG:numba.core.byteflow:stack ['$y_pacf5170.0', '$diff1y_pacf5172.1', '$diff2y_pacf5174.2', '$seas_pacf1176.3']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=RETURN_VALUE(arg=None, lineno=931)
DEBUG:numba.core.byteflow:stack ['$178build_tuple.4']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=170 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=162 nstack_initial=0): set(),
             State(pc_initial=170 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_attr.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'res': '$14load_global.6'}), (16, {'item': '$14load_global.6', 'res': '$16load_attr.7'}), (18, {'items': ['$4load_attr.1', '$8load_attr.3', '$12load_attr.5', '$16load_attr.7'], 'res': '$18build_tuple.8'}), (20, {'iterable': '$18build_tuple.8', 'stores': ['$20unpack_sequence.9', '$20unpack_sequence.10', '$20unpack_sequence.11', '$20unpack_sequence.12'], 'tupleobj': '$20unpack_sequence.13'}), (22, {'value': '$20unpack_sequence.9'}), (24, {'value': '$20unpack_sequence.10'}), (26, {'value': '$20unpack_sequence.11'}), (28, {'value': '$20unpack_sequence.12'}), (30, {'res': '$extra_args30.14'}), (32, {'item': '$extra_args30.14', 'res': '$32load_method.15'}), (34, {'res': '$const34.16'}), (36, {'res': '$default_status36.17'}), (38, {'func': '$32load_method.15', 'args': ['$const34.16', '$default_status36.17'], 'res': '$38call_method.18'}), (40, {'pred': '$38call_method.18'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 70: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'item': '$42load_global.0', 'res': '$44load_method.1'}), (46, {'res': '$46load_global.2'}), (48, {'item': '$46load_global.2', 'res': '$48load_method.3'}), (50, {'res': '$y_pacf_list50.4'}), (52, {'func': '$48load_method.3', 'args': ['$y_pacf_list50.4'], 'res': '$52call_method.5'}), (54, {'res': '$const54.6'}), (56, {'res': '$const56.7'}), (58, {'start': '$const54.6', 'stop': '$const56.7', 'step': None, 'res': '$58build_slice.9', 'slicevar': '$58build_slice.8'}), (60, {'index': '$58build_slice.9', 'target': '$52call_method.5', 'res': '$60binary_subscr.10'}), (62, {'res': '$const62.11'}), (64, {'lhs': '$60binary_subscr.10', 'rhs': '$const62.11', 'res': '$64binary_power.12'}), (66, {'func': '$44load_method.1', 'args': ['$64binary_power.12'], 'res': '$66call_method.13'}), (68, {'value': '$66call_method.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$extra_args70.0'}), (72, {'item': '$extra_args70.0', 'res': '$72load_method.1'}), (74, {'res': '$const74.2'}), (76, {'res': '$default_status76.3'}), (78, {'func': '$72load_method.1', 'args': ['$const74.2', '$default_status76.3'], 'res': '$78call_method.4'}), (80, {'pred': '$78call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 110: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$86load_global.2'}), (88, {'item': '$86load_global.2', 'res': '$88load_method.3'}), (90, {'res': '$diff1y_pacf_list90.4'}), (92, {'func': '$88load_method.3', 'args': ['$diff1y_pacf_list90.4'], 'res': '$92call_method.5'}), (94, {'res': '$const94.6'}), (96, {'res': '$const96.7'}), (98, {'start': '$const94.6', 'stop': '$const96.7', 'step': None, 'res': '$98build_slice.9', 'slicevar': '$98build_slice.8'}), (100, {'index': '$98build_slice.9', 'target': '$92call_method.5', 'res': '$100binary_subscr.10'}), (102, {'res': '$const102.11'}), (104, {'lhs': '$100binary_subscr.10', 'rhs': '$const102.11', 'res': '$104binary_power.12'}), (106, {'func': '$84load_method.1', 'args': ['$104binary_power.12'], 'res': '$106call_method.13'}), (108, {'value': '$106call_method.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={110: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((110, {'res': '$extra_args110.0'}), (112, {'item': '$extra_args110.0', 'res': '$112load_method.1'}), (114, {'res': '$const114.2'}), (116, {'res': '$default_status116.3'}), (118, {'func': '$112load_method.1', 'args': ['$const114.2', '$default_status116.3'], 'res': '$118call_method.4'}), (120, {'pred': '$118call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={122: (), 150: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=((122, {'res': '$122load_global.0'}), (124, {'item': '$122load_global.0', 'res': '$124load_method.1'}), (126, {'res': '$126load_global.2'}), (128, {'item': '$126load_global.2', 'res': '$128load_method.3'}), (130, {'res': '$diff2y_pacf_list130.4'}), (132, {'func': '$128load_method.3', 'args': ['$diff2y_pacf_list130.4'], 'res': '$132call_method.5'}), (134, {'res': '$const134.6'}), (136, {'res': '$const136.7'}), (138, {'start': '$const134.6', 'stop': '$const136.7', 'step': None, 'res': '$138build_slice.9', 'slicevar': '$138build_slice.8'}), (140, {'index': '$138build_slice.9', 'target': '$132call_method.5', 'res': '$140binary_subscr.10'}), (142, {'res': '$const142.11'}), (144, {'lhs': '$140binary_subscr.10', 'rhs': '$const142.11', 'res': '$144binary_power.12'}), (146, {'func': '$124load_method.1', 'args': ['$144binary_power.12'], 'res': '$146call_method.13'}), (148, {'value': '$146call_method.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={150: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$extra_args150.0'}), (152, {'item': '$extra_args150.0', 'res': '$152load_method.1'}), (154, {'res': '$const154.2'}), (156, {'res': '$default_status156.3'}), (158, {'func': '$152load_method.1', 'args': ['$const154.2', '$default_status156.3'], 'res': '$158call_method.4'}), (160, {'pred': '$158call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={162: (), 170: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=162 nstack_initial=0):
AdaptBlockInfo(insts=((162, {'res': '$y_pacf_list162.0'}), (164, {'res': '$const164.1'}), (166, {'index': '$const164.1', 'target': '$y_pacf_list162.0', 'res': '$166binary_subscr.2'}), (168, {'value': '$166binary_subscr.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={170: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=170 nstack_initial=0):
AdaptBlockInfo(insts=((170, {'res': '$y_pacf5170.0'}), (172, {'res': '$diff1y_pacf5172.1'}), (174, {'res': '$diff2y_pacf5174.2'}), (176, {'res': '$seas_pacf1176.3'}), (178, {'items': ['$y_pacf5170.0', '$diff1y_pacf5172.1', '$diff2y_pacf5174.2', '$seas_pacf1176.3'], 'res': '$178build_tuple.4'}), (180, {'retval': '$178build_tuple.4', 'castval': '$180return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    extra_args = arg(0, name=extra_args)     ['extra_args']
    default_status = arg(1, name=default_status) ['default_status']
    y_pacf_list = arg(2, name=y_pacf_list)   ['y_pacf_list']
    diff1y_pacf_list = arg(3, name=diff1y_pacf_list) ['diff1y_pacf_list']
    diff2y_pacf_list = arg(4, name=diff2y_pacf_list) ['diff2y_pacf_list']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=nan) ['$2load_global.0', '$4load_attr.1']
    $6load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.2']
    $8load_attr.3 = getattr(value=$6load_global.2, attr=nan) ['$6load_global.2', '$8load_attr.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=nan) ['$10load_global.4', '$12load_attr.5']
    $14load_global.6 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.6']
    $16load_attr.7 = getattr(value=$14load_global.6, attr=nan) ['$14load_global.6', '$16load_attr.7']
    $18build_tuple.8 = build_tuple(items=[Var($4load_attr.1, tsfeatures.py:913), Var($8load_attr.3, tsfeatures.py:913), Var($12load_attr.5, tsfeatures.py:913), Var($16load_attr.7, tsfeatures.py:913)]) ['$12load_attr.5', '$16load_attr.7', '$18build_tuple.8', '$4load_attr.1', '$8load_attr.3']
    $20unpack_sequence.13 = exhaust_iter(value=$18build_tuple.8, count=4) ['$18build_tuple.8', '$20unpack_sequence.13']
    $20unpack_sequence.9 = static_getitem(value=$20unpack_sequence.13, index=0, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.13', '$20unpack_sequence.9']
    $20unpack_sequence.10 = static_getitem(value=$20unpack_sequence.13, index=1, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.10', '$20unpack_sequence.13']
    $20unpack_sequence.11 = static_getitem(value=$20unpack_sequence.13, index=2, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.11', '$20unpack_sequence.13']
    $20unpack_sequence.12 = static_getitem(value=$20unpack_sequence.13, index=3, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.12', '$20unpack_sequence.13']
    y_pacf5 = $20unpack_sequence.9           ['$20unpack_sequence.9', 'y_pacf5']
    diff1y_pacf5 = $20unpack_sequence.10     ['$20unpack_sequence.10', 'diff1y_pacf5']
    diff2y_pacf5 = $20unpack_sequence.11     ['$20unpack_sequence.11', 'diff2y_pacf5']
    seas_pacf1 = $20unpack_sequence.12       ['$20unpack_sequence.12', 'seas_pacf1']
    $32load_method.15 = getattr(value=extra_args, attr=get) ['$32load_method.15', 'extra_args']
    $const34.16 = const(str, y_pacf5)        ['$const34.16']
    $38call_method.18 = call $32load_method.15($const34.16, default_status, func=$32load_method.15, args=[Var($const34.16, tsfeatures.py:916), Var(default_status, tsfeatures.py:913)], kws=(), vararg=None) ['$32load_method.15', '$38call_method.18', '$const34.16', 'default_status']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38call_method.18, func=bool40, args=(Var($38call_method.18, tsfeatures.py:916),), kws=(), vararg=None) ['$38call_method.18', '$40pred', 'bool40']
    branch $40pred, 42, 70                   ['$40pred']
label 42:
    $42load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$42load_global.0']
    $44load_method.1 = getattr(value=$42load_global.0, attr=nansum) ['$42load_global.0', '$44load_method.1']
    $46load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$46load_global.2']
    $48load_method.3 = getattr(value=$46load_global.2, attr=asarray) ['$46load_global.2', '$48load_method.3']
    $52call_method.5 = call $48load_method.3(y_pacf_list, func=$48load_method.3, args=[Var(y_pacf_list, tsfeatures.py:913)], kws=(), vararg=None) ['$48load_method.3', '$52call_method.5', 'y_pacf_list']
    $const54.6 = const(NoneType, None)       ['$const54.6']
    $const56.7 = const(int, 5)               ['$const56.7']
    $58build_slice.8 = global(slice: <class 'slice'>) ['$58build_slice.8']
    $58build_slice.9 = call $58build_slice.8($const54.6, $const56.7, func=$58build_slice.8, args=(Var($const54.6, tsfeatures.py:917), Var($const56.7, tsfeatures.py:917)), kws=(), vararg=None) ['$58build_slice.8', '$58build_slice.9', '$const54.6', '$const56.7']
    $60binary_subscr.10 = getitem(value=$52call_method.5, index=$58build_slice.9, fn=<built-in function getitem>) ['$52call_method.5', '$58build_slice.9', '$60binary_subscr.10']
    $const62.11 = const(int, 2)              ['$const62.11']
    $64binary_power.12 = $60binary_subscr.10 ** $const62.11 ['$60binary_subscr.10', '$64binary_power.12', '$const62.11']
    y_pacf5 = call $44load_method.1($64binary_power.12, func=$44load_method.1, args=[Var($64binary_power.12, tsfeatures.py:917)], kws=(), vararg=None) ['$44load_method.1', '$64binary_power.12', 'y_pacf5']
    jump 70                                  []
label 70:
    $72load_method.1 = getattr(value=extra_args, attr=get) ['$72load_method.1', 'extra_args']
    $const74.2 = const(str, diff1y_pacf5)    ['$const74.2']
    $78call_method.4 = call $72load_method.1($const74.2, default_status, func=$72load_method.1, args=[Var($const74.2, tsfeatures.py:920), Var(default_status, tsfeatures.py:913)], kws=(), vararg=None) ['$72load_method.1', '$78call_method.4', '$const74.2', 'default_status']
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80($78call_method.4, func=bool80, args=(Var($78call_method.4, tsfeatures.py:920),), kws=(), vararg=None) ['$78call_method.4', '$80pred', 'bool80']
    branch $80pred, 82, 110                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=nansum) ['$82load_global.0', '$84load_method.1']
    $86load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$86load_global.2']
    $88load_method.3 = getattr(value=$86load_global.2, attr=asarray) ['$86load_global.2', '$88load_method.3']
    $92call_method.5 = call $88load_method.3(diff1y_pacf_list, func=$88load_method.3, args=[Var(diff1y_pacf_list, tsfeatures.py:913)], kws=(), vararg=None) ['$88load_method.3', '$92call_method.5', 'diff1y_pacf_list']
    $const94.6 = const(NoneType, None)       ['$const94.6']
    $const96.7 = const(int, 5)               ['$const96.7']
    $98build_slice.8 = global(slice: <class 'slice'>) ['$98build_slice.8']
    $98build_slice.9 = call $98build_slice.8($const94.6, $const96.7, func=$98build_slice.8, args=(Var($const94.6, tsfeatures.py:921), Var($const96.7, tsfeatures.py:921)), kws=(), vararg=None) ['$98build_slice.8', '$98build_slice.9', '$const94.6', '$const96.7']
    $100binary_subscr.10 = getitem(value=$92call_method.5, index=$98build_slice.9, fn=<built-in function getitem>) ['$100binary_subscr.10', '$92call_method.5', '$98build_slice.9']
    $const102.11 = const(int, 2)             ['$const102.11']
    $104binary_power.12 = $100binary_subscr.10 ** $const102.11 ['$100binary_subscr.10', '$104binary_power.12', '$const102.11']
    diff1y_pacf5 = call $84load_method.1($104binary_power.12, func=$84load_method.1, args=[Var($104binary_power.12, tsfeatures.py:921)], kws=(), vararg=None) ['$104binary_power.12', '$84load_method.1', 'diff1y_pacf5']
    jump 110                                 []
label 110:
    $112load_method.1 = getattr(value=extra_args, attr=get) ['$112load_method.1', 'extra_args']
    $const114.2 = const(str, diff2y_pacf5)   ['$const114.2']
    $118call_method.4 = call $112load_method.1($const114.2, default_status, func=$112load_method.1, args=[Var($const114.2, tsfeatures.py:924), Var(default_status, tsfeatures.py:913)], kws=(), vararg=None) ['$112load_method.1', '$118call_method.4', '$const114.2', 'default_status']
    bool120 = global(bool: <class 'bool'>)   ['bool120']
    $120pred = call bool120($118call_method.4, func=bool120, args=(Var($118call_method.4, tsfeatures.py:924),), kws=(), vararg=None) ['$118call_method.4', '$120pred', 'bool120']
    branch $120pred, 122, 150                ['$120pred']
label 122:
    $122load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$122load_global.0']
    $124load_method.1 = getattr(value=$122load_global.0, attr=nansum) ['$122load_global.0', '$124load_method.1']
    $126load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$126load_global.2']
    $128load_method.3 = getattr(value=$126load_global.2, attr=asarray) ['$126load_global.2', '$128load_method.3']
    $132call_method.5 = call $128load_method.3(diff2y_pacf_list, func=$128load_method.3, args=[Var(diff2y_pacf_list, tsfeatures.py:913)], kws=(), vararg=None) ['$128load_method.3', '$132call_method.5', 'diff2y_pacf_list']
    $const134.6 = const(NoneType, None)      ['$const134.6']
    $const136.7 = const(int, 5)              ['$const136.7']
    $138build_slice.8 = global(slice: <class 'slice'>) ['$138build_slice.8']
    $138build_slice.9 = call $138build_slice.8($const134.6, $const136.7, func=$138build_slice.8, args=(Var($const134.6, tsfeatures.py:925), Var($const136.7, tsfeatures.py:925)), kws=(), vararg=None) ['$138build_slice.8', '$138build_slice.9', '$const134.6', '$const136.7']
    $140binary_subscr.10 = getitem(value=$132call_method.5, index=$138build_slice.9, fn=<built-in function getitem>) ['$132call_method.5', '$138build_slice.9', '$140binary_subscr.10']
    $const142.11 = const(int, 2)             ['$const142.11']
    $144binary_power.12 = $140binary_subscr.10 ** $const142.11 ['$140binary_subscr.10', '$144binary_power.12', '$const142.11']
    diff2y_pacf5 = call $124load_method.1($144binary_power.12, func=$124load_method.1, args=[Var($144binary_power.12, tsfeatures.py:925)], kws=(), vararg=None) ['$124load_method.1', '$144binary_power.12', 'diff2y_pacf5']
    jump 150                                 []
label 150:
    $152load_method.1 = getattr(value=extra_args, attr=get) ['$152load_method.1', 'extra_args']
    $const154.2 = const(str, seas_pacf1)     ['$const154.2']
    $158call_method.4 = call $152load_method.1($const154.2, default_status, func=$152load_method.1, args=[Var($const154.2, tsfeatures.py:928), Var(default_status, tsfeatures.py:913)], kws=(), vararg=None) ['$152load_method.1', '$158call_method.4', '$const154.2', 'default_status']
    bool160 = global(bool: <class 'bool'>)   ['bool160']
    $160pred = call bool160($158call_method.4, func=bool160, args=(Var($158call_method.4, tsfeatures.py:928),), kws=(), vararg=None) ['$158call_method.4', '$160pred', 'bool160']
    branch $160pred, 162, 170                ['$160pred']
label 162:
    $const164.1 = const(int, -1)             ['$const164.1']
    seas_pacf1 = getitem(value=y_pacf_list, index=$const164.1, fn=<built-in function getitem>) ['$const164.1', 'seas_pacf1', 'y_pacf_list']
    jump 170                                 []
label 170:
    $178build_tuple.4 = build_tuple(items=[Var(y_pacf5, tsfeatures.py:909), Var(diff1y_pacf5, tsfeatures.py:910), Var(diff2y_pacf5, tsfeatures.py:911), Var(seas_pacf1, tsfeatures.py:912)]) ['$178build_tuple.4', 'diff1y_pacf5', 'diff2y_pacf5', 'seas_pacf1', 'y_pacf5']
    $180return_value.5 = cast(value=$178build_tuple.4) ['$178build_tuple.4', '$180return_value.5']
    return $180return_value.5                ['$180return_value.5']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1168)
           2	LOAD_GLOBAL(arg=0, lineno=1168)
           4	LOAD_ATTR(arg=1, lineno=1168)
           6	LOAD_GLOBAL(arg=0, lineno=1168)
           8	LOAD_ATTR(arg=1, lineno=1168)
          10	LOAD_CONST(arg=1, lineno=1168)
          12	BUILD_CONST_KEY_MAP(arg=2, lineno=1168)
          14	STORE_FAST(arg=3, lineno=1168)
          16	LOAD_GLOBAL(arg=2, lineno=1169)
          18	LOAD_FAST(arg=0, lineno=1169)
          20	LOAD_CONST(arg=2, lineno=1169)
          22	LOAD_CONST(arg=3, lineno=1169)
          24	LOAD_GLOBAL(arg=3, lineno=1169)
          26	LOAD_FAST(arg=0, lineno=1169)
          28	CALL_FUNCTION(arg=1, lineno=1169)
          30	LOAD_CONST(arg=4, lineno=1169)
          32	CALL_FUNCTION_KW(arg=4, lineno=1169)
          34	LOAD_CONST(arg=5, lineno=1169)
          36	LOAD_CONST(arg=6, lineno=1169)
          38	BUILD_SLICE(arg=2, lineno=1169)
          40	BINARY_SUBSCR(arg=None, lineno=1169)
          42	STORE_FAST(arg=4, lineno=1169)
          44	LOAD_FAST(arg=1, lineno=1170)
          46	LOAD_CONST(arg=6, lineno=1170)
          48	COMPARE_OP(arg=9, lineno=1170)
          50	POP_JUMP_IF_FALSE(arg=130, lineno=1170)
          52	LOAD_FAST(arg=1, lineno=1170)
          54	LOAD_METHOD(arg=4, lineno=1170)
          56	LOAD_CONST(arg=7, lineno=1170)
          58	LOAD_FAST(arg=2, lineno=1170)
          60	CALL_METHOD(arg=2, lineno=1170)
          62	POP_JUMP_IF_FALSE(arg=130, lineno=1170)
          64	LOAD_CONST(arg=8, lineno=1171)
          66	STORE_FAST(arg=5, lineno=1171)
>         68	LOAD_FAST(arg=5, lineno=1172)
          70	LOAD_GLOBAL(arg=3, lineno=1172)
          72	LOAD_FAST(arg=4, lineno=1172)
          74	CALL_FUNCTION(arg=1, lineno=1172)
          76	LOAD_CONST(arg=5, lineno=1172)
          78	BINARY_SUBTRACT(arg=None, lineno=1172)
          80	COMPARE_OP(arg=0, lineno=1172)
          82	POP_JUMP_IF_FALSE(arg=118, lineno=1172)
          84	LOAD_FAST(arg=4, lineno=1173)
          86	LOAD_FAST(arg=5, lineno=1173)
          88	BINARY_SUBSCR(arg=None, lineno=1173)
          90	LOAD_FAST(arg=4, lineno=1173)
          92	LOAD_FAST(arg=5, lineno=1173)
          94	LOAD_CONST(arg=5, lineno=1173)
          96	BINARY_ADD(arg=None, lineno=1173)
          98	BINARY_SUBSCR(arg=None, lineno=1173)
         100	COMPARE_OP(arg=4, lineno=1173)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1173)
         104	LOAD_FAST(arg=5, lineno=1174)
         106	LOAD_CONST(arg=5, lineno=1174)
         108	INPLACE_ADD(arg=None, lineno=1174)
         110	STORE_FAST(arg=5, lineno=1174)
         112	JUMP_ABSOLUTE(arg=68, lineno=1174)
         114	JUMP_ABSOLUTE(arg=118, lineno=1176)
         116	JUMP_ABSOLUTE(arg=68, lineno=1176)
>        118	LOAD_FAST(arg=5, lineno=1177)
         120	LOAD_CONST(arg=5, lineno=1177)
         122	BINARY_ADD(arg=None, lineno=1177)
         124	LOAD_FAST(arg=3, lineno=1177)
         126	LOAD_CONST(arg=7, lineno=1177)
         128	STORE_SUBSCR(arg=None, lineno=1177)
>        130	LOAD_FAST(arg=1, lineno=1180)
         132	LOAD_CONST(arg=6, lineno=1180)
         134	COMPARE_OP(arg=9, lineno=1180)
         136	POP_JUMP_IF_FALSE(arg=232, lineno=1180)
         138	LOAD_FAST(arg=1, lineno=1180)
         140	LOAD_METHOD(arg=4, lineno=1180)
         142	LOAD_CONST(arg=9, lineno=1180)
         144	LOAD_FAST(arg=2, lineno=1180)
         146	CALL_METHOD(arg=2, lineno=1180)
         148	POP_JUMP_IF_FALSE(arg=232, lineno=1180)
         150	LOAD_CONST(arg=8, lineno=1181)
         152	STORE_FAST(arg=6, lineno=1181)
>        154	LOAD_FAST(arg=6, lineno=1182)
         156	LOAD_GLOBAL(arg=3, lineno=1182)
         158	LOAD_FAST(arg=4, lineno=1182)
         160	CALL_FUNCTION(arg=1, lineno=1182)
         162	LOAD_CONST(arg=5, lineno=1182)
         164	BINARY_SUBTRACT(arg=None, lineno=1182)
         166	COMPARE_OP(arg=0, lineno=1182)
         168	POP_JUMP_IF_FALSE(arg=220, lineno=1182)
         170	LOAD_FAST(arg=4, lineno=1183)
         172	LOAD_FAST(arg=6, lineno=1183)
         174	BINARY_SUBSCR(arg=None, lineno=1183)
         176	LOAD_CONST(arg=8, lineno=1183)
         178	DUP_TOP(arg=None, lineno=1183)
         180	ROT_THREE(arg=None, lineno=1183)
         182	COMPARE_OP(arg=4, lineno=1183)
         184	POP_JUMP_IF_FALSE(arg=202, lineno=1183)
         186	LOAD_FAST(arg=4, lineno=1183)
         188	LOAD_FAST(arg=6, lineno=1183)
         190	LOAD_CONST(arg=5, lineno=1183)
         192	BINARY_ADD(arg=None, lineno=1183)
         194	BINARY_SUBSCR(arg=None, lineno=1183)
         196	COMPARE_OP(arg=4, lineno=1183)
         198	POP_JUMP_IF_FALSE(arg=210, lineno=1183)
         200	JUMP_ABSOLUTE(arg=220, lineno=1183)
>        202	POP_TOP(arg=None, lineno=1183)
         204	JUMP_FORWARD(arg=4, lineno=1183)
         206	JUMP_ABSOLUTE(arg=220, lineno=1184)
         208	JUMP_ABSOLUTE(arg=154, lineno=1184)
>        210	LOAD_FAST(arg=6, lineno=1186)
         212	LOAD_CONST(arg=5, lineno=1186)
         214	INPLACE_ADD(arg=None, lineno=1186)
         216	STORE_FAST(arg=6, lineno=1186)
         218	JUMP_ABSOLUTE(arg=154, lineno=1186)
>        220	LOAD_FAST(arg=6, lineno=1187)
         222	LOAD_CONST(arg=10, lineno=1187)
         224	BINARY_ADD(arg=None, lineno=1187)
         226	LOAD_FAST(arg=3, lineno=1187)
         228	LOAD_CONST(arg=9, lineno=1187)
         230	STORE_SUBSCR(arg=None, lineno=1187)
>        232	LOAD_FAST(arg=3, lineno=1188)
         234	RETURN_VALUE(arg=None, lineno=1188)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1168)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1168)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=1168)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=1168)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=1168)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1168)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=BUILD_CONST_KEY_MAP(arg=2, lineno=1168)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$8load_attr.3', '$const10.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=STORE_FAST(arg=3, lineno=1168)
DEBUG:numba.core.byteflow:stack ['$12build_const_key_map.7']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=1169)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$16load_global.8']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$16load_global.8', '$x18.9']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_CONST(arg=3, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$16load_global.8', '$x18.9', '$const20.10']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_GLOBAL(arg=3, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$16load_global.8', '$x18.9', '$const20.10', '$const22.11']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$16load_global.8', '$x18.9', '$const20.10', '$const22.11', '$24load_global.12']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=1, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$16load_global.8', '$x18.9', '$const20.10', '$const22.11', '$24load_global.12', '$x26.13']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_CONST(arg=4, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$16load_global.8', '$x18.9', '$const20.10', '$const22.11', '$28call_function.14']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=CALL_FUNCTION_KW(arg=4, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$16load_global.8', '$x18.9', '$const20.10', '$const22.11', '$28call_function.14', '$const30.15']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_CONST(arg=5, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$32call_function_kw.16']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=6, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$32call_function_kw.16', '$const34.17']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BUILD_SLICE(arg=2, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$32call_function_kw.16', '$const34.17', '$const36.18']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$32call_function_kw.16', '$38build_slice.20']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=STORE_FAST(arg=4, lineno=1169)
DEBUG:numba.core.byteflow:stack ['$40binary_subscr.21']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=1, lineno=1170)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_CONST(arg=6, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$extra_args44.22']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=COMPARE_OP(arg=9, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$extra_args44.22', '$const46.23']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=130, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$48compare_op.24']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=1170)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_METHOD(arg=4, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$extra_args52.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_CONST(arg=7, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$54load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$54load_method.1', '$const56.2']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=CALL_METHOD(arg=2, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$54load_method.1', '$const56.2', '$default_status58.3']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=130, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$60call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_FAST(arg=1, lineno=1180)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_CONST(arg=6, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$extra_args130.0']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=COMPARE_OP(arg=9, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$extra_args130.0', '$const132.1']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=232, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$134compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=232 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_CONST(arg=8, lineno=1171)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=STORE_FAST(arg=5, lineno=1171)
DEBUG:numba.core.byteflow:stack ['$const64.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=232 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=232 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=138, inst=LOAD_FAST(arg=1, lineno=1180)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_METHOD(arg=4, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$extra_args138.0']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=LOAD_CONST(arg=9, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$140load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=LOAD_FAST(arg=2, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$140load_method.1', '$const142.2']
DEBUG:numba.core.byteflow:dispatch pc=146, inst=CALL_METHOD(arg=2, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$140load_method.1', '$const142.2', '$default_status144.3']
DEBUG:numba.core.byteflow:dispatch pc=148, inst=POP_JUMP_IF_FALSE(arg=232, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$146call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=150, stack=(), blockstack=(), npush=0), Edge(pc=232, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=232 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=150 nstack_initial=0), State(pc_initial=232 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=232, inst=LOAD_FAST(arg=3, lineno=1188)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=234, inst=RETURN_VALUE(arg=None, lineno=1188)
DEBUG:numba.core.byteflow:stack ['$special_ac_features232.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=150 nstack_initial=0), State(pc_initial=232 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=1172)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_GLOBAL(arg=3, lineno=1172)
DEBUG:numba.core.byteflow:stack ['$i68.0']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=1172)
DEBUG:numba.core.byteflow:stack ['$i68.0', '$70load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=CALL_FUNCTION(arg=1, lineno=1172)
DEBUG:numba.core.byteflow:stack ['$i68.0', '$70load_global.1', '$AC72.2']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_CONST(arg=5, lineno=1172)
DEBUG:numba.core.byteflow:stack ['$i68.0', '$74call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_SUBTRACT(arg=None, lineno=1172)
DEBUG:numba.core.byteflow:stack ['$i68.0', '$74call_function.3', '$const76.4']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=COMPARE_OP(arg=0, lineno=1172)
DEBUG:numba.core.byteflow:stack ['$i68.0', '$78binary_subtract.5']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1172)
DEBUG:numba.core.byteflow:stack ['$80compare_op.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=150 nstack_initial=0), State(pc_initial=232 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=150, inst=LOAD_CONST(arg=8, lineno=1181)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=152, inst=STORE_FAST(arg=6, lineno=1181)
DEBUG:numba.core.byteflow:stack ['$const150.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=232 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=4, lineno=1173)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_FAST(arg=5, lineno=1173)
DEBUG:numba.core.byteflow:stack ['$AC84.0']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=BINARY_SUBSCR(arg=None, lineno=1173)
DEBUG:numba.core.byteflow:stack ['$AC84.0', '$i86.1']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=1173)
DEBUG:numba.core.byteflow:stack ['$88binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_FAST(arg=5, lineno=1173)
DEBUG:numba.core.byteflow:stack ['$88binary_subscr.2', '$AC90.3']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_CONST(arg=5, lineno=1173)
DEBUG:numba.core.byteflow:stack ['$88binary_subscr.2', '$AC90.3', '$i92.4']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=BINARY_ADD(arg=None, lineno=1173)
DEBUG:numba.core.byteflow:stack ['$88binary_subscr.2', '$AC90.3', '$i92.4', '$const94.5']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=1173)
DEBUG:numba.core.byteflow:stack ['$88binary_subscr.2', '$AC90.3', '$96binary_add.6']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=COMPARE_OP(arg=4, lineno=1173)
DEBUG:numba.core.byteflow:stack ['$88binary_subscr.2', '$98binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1173)
DEBUG:numba.core.byteflow:stack ['$100compare_op.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=118, inst=LOAD_FAST(arg=5, lineno=1177)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_CONST(arg=5, lineno=1177)
DEBUG:numba.core.byteflow:stack ['$i118.0']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=BINARY_ADD(arg=None, lineno=1177)
DEBUG:numba.core.byteflow:stack ['$i118.0', '$const120.1']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=LOAD_FAST(arg=3, lineno=1177)
DEBUG:numba.core.byteflow:stack ['$122binary_add.2']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=LOAD_CONST(arg=7, lineno=1177)
DEBUG:numba.core.byteflow:stack ['$122binary_add.2', '$special_ac_features124.3']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=STORE_SUBSCR(arg=None, lineno=1177)
DEBUG:numba.core.byteflow:stack ['$122binary_add.2', '$special_ac_features124.3', '$const126.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1182)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_GLOBAL(arg=3, lineno=1182)
DEBUG:numba.core.byteflow:stack ['$j154.0']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=LOAD_FAST(arg=4, lineno=1182)
DEBUG:numba.core.byteflow:stack ['$j154.0', '$156load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=CALL_FUNCTION(arg=1, lineno=1182)
DEBUG:numba.core.byteflow:stack ['$j154.0', '$156load_global.1', '$AC158.2']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_CONST(arg=5, lineno=1182)
DEBUG:numba.core.byteflow:stack ['$j154.0', '$160call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=164, inst=BINARY_SUBTRACT(arg=None, lineno=1182)
DEBUG:numba.core.byteflow:stack ['$j154.0', '$160call_function.3', '$const162.4']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=COMPARE_OP(arg=0, lineno=1182)
DEBUG:numba.core.byteflow:stack ['$j154.0', '$164binary_subtract.5']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=POP_JUMP_IF_FALSE(arg=220, lineno=1182)
DEBUG:numba.core.byteflow:stack ['$166compare_op.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=170, stack=(), blockstack=(), npush=0), Edge(pc=220, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=170 nstack_initial=0), State(pc_initial=220 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_FAST(arg=5, lineno=1174)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_CONST(arg=5, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$i104.0']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$i104.0', '$const106.1']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=STORE_FAST(arg=5, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$108inplace_add.2']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=JUMP_ABSOLUTE(arg=68, lineno=1174)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=170 nstack_initial=0), State(pc_initial=220 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=170 nstack_initial=0), State(pc_initial=220 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=170 nstack_initial=0), State(pc_initial=220 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=170, inst=LOAD_FAST(arg=4, lineno=1183)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_FAST(arg=6, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$AC170.0']
DEBUG:numba.core.byteflow:dispatch pc=174, inst=BINARY_SUBSCR(arg=None, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$AC170.0', '$j172.1']
DEBUG:numba.core.byteflow:dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$174binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=DUP_TOP(arg=None, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$174binary_subscr.2', '$const176.3']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=ROT_THREE(arg=None, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$174binary_subscr.2', '$const176.3', '$178dup_top.4']
DEBUG:numba.core.byteflow:dispatch pc=182, inst=COMPARE_OP(arg=4, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$178dup_top.4', '$174binary_subscr.2', '$const176.3']
DEBUG:numba.core.byteflow:dispatch pc=184, inst=POP_JUMP_IF_FALSE(arg=202, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$178dup_top.4', '$182compare_op.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=186, stack=('$178dup_top.4',), blockstack=(), npush=0), Edge(pc=202, stack=('$178dup_top.4',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=220 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=186 nstack_initial=1), State(pc_initial=202 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=220, inst=LOAD_FAST(arg=6, lineno=1187)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=222, inst=LOAD_CONST(arg=10, lineno=1187)
DEBUG:numba.core.byteflow:stack ['$j220.0']
DEBUG:numba.core.byteflow:dispatch pc=224, inst=BINARY_ADD(arg=None, lineno=1187)
DEBUG:numba.core.byteflow:stack ['$j220.0', '$const222.1']
DEBUG:numba.core.byteflow:dispatch pc=226, inst=LOAD_FAST(arg=3, lineno=1187)
DEBUG:numba.core.byteflow:stack ['$224binary_add.2']
DEBUG:numba.core.byteflow:dispatch pc=228, inst=LOAD_CONST(arg=9, lineno=1187)
DEBUG:numba.core.byteflow:stack ['$224binary_add.2', '$special_ac_features226.3']
DEBUG:numba.core.byteflow:dispatch pc=230, inst=STORE_SUBSCR(arg=None, lineno=1187)
DEBUG:numba.core.byteflow:stack ['$224binary_add.2', '$special_ac_features226.3', '$const228.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=232, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=186 nstack_initial=1), State(pc_initial=202 nstack_initial=1), State(pc_initial=232 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=186 nstack_initial=1), State(pc_initial=202 nstack_initial=1), State(pc_initial=232 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi186.0']
DEBUG:numba.core.byteflow:dispatch pc=186, inst=LOAD_FAST(arg=4, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$phi186.0']
DEBUG:numba.core.byteflow:dispatch pc=188, inst=LOAD_FAST(arg=6, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$phi186.0', '$AC186.1']
DEBUG:numba.core.byteflow:dispatch pc=190, inst=LOAD_CONST(arg=5, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$phi186.0', '$AC186.1', '$j188.2']
DEBUG:numba.core.byteflow:dispatch pc=192, inst=BINARY_ADD(arg=None, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$phi186.0', '$AC186.1', '$j188.2', '$const190.3']
DEBUG:numba.core.byteflow:dispatch pc=194, inst=BINARY_SUBSCR(arg=None, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$phi186.0', '$AC186.1', '$192binary_add.4']
DEBUG:numba.core.byteflow:dispatch pc=196, inst=COMPARE_OP(arg=4, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$phi186.0', '$194binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=210, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$196compare_op.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=200, stack=(), blockstack=(), npush=0), Edge(pc=210, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=202 nstack_initial=1), State(pc_initial=232 nstack_initial=0), State(pc_initial=200 nstack_initial=0), State(pc_initial=210 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi202.0']
DEBUG:numba.core.byteflow:dispatch pc=202, inst=POP_TOP(arg=None, lineno=1183)
DEBUG:numba.core.byteflow:stack ['$phi202.0']
DEBUG:numba.core.byteflow:dispatch pc=204, inst=JUMP_FORWARD(arg=4, lineno=1183)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=210, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=232 nstack_initial=0), State(pc_initial=200 nstack_initial=0), State(pc_initial=210 nstack_initial=0), State(pc_initial=210 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=200 nstack_initial=0), State(pc_initial=210 nstack_initial=0), State(pc_initial=210 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=200, inst=JUMP_ABSOLUTE(arg=220, lineno=1183)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=220, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=210 nstack_initial=0), State(pc_initial=210 nstack_initial=0), State(pc_initial=220 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=210, inst=LOAD_FAST(arg=6, lineno=1186)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=212, inst=LOAD_CONST(arg=5, lineno=1186)
DEBUG:numba.core.byteflow:stack ['$j210.0']
DEBUG:numba.core.byteflow:dispatch pc=214, inst=INPLACE_ADD(arg=None, lineno=1186)
DEBUG:numba.core.byteflow:stack ['$j210.0', '$const212.1']
DEBUG:numba.core.byteflow:dispatch pc=216, inst=STORE_FAST(arg=6, lineno=1186)
DEBUG:numba.core.byteflow:stack ['$214inplace_add.2']
DEBUG:numba.core.byteflow:dispatch pc=218, inst=JUMP_ABSOLUTE(arg=154, lineno=1186)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=210 nstack_initial=0), State(pc_initial=220 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=220 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=154 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=170 nstack_initial=0): set(),
             State(pc_initial=186 nstack_initial=1): {'$phi186.0'},
             State(pc_initial=200 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=1): set(),
             State(pc_initial=210 nstack_initial=0): set(),
             State(pc_initial=220 nstack_initial=0): set(),
             State(pc_initial=232 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi186.0': State(pc_initial=170 nstack_initial=0),
 '$phi202.0': State(pc_initial=170 nstack_initial=0)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi186.0': {('$178dup_top.4',
                            State(pc_initial=170 nstack_initial=0))},
             '$phi202.0': {('$178dup_top.4',
                            State(pc_initial=170 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi186.0': {('$178dup_top.4',
                            State(pc_initial=170 nstack_initial=0))},
             '$phi202.0': {('$178dup_top.4',
                            State(pc_initial=170 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi186.0': {('$178dup_top.4', State(pc_initial=170 nstack_initial=0))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=170 nstack_initial=0): {'$phi186.0': '$178dup_top.4'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_attr.3'}), (10, {'res': '$const10.4'}), (12, {'keys': '$const10.4', 'keytmps': ['$12build_const_key_map.5', '$12build_const_key_map.6'], 'values': ['$4load_attr.1', '$8load_attr.3'], 'res': '$12build_const_key_map.7'}), (14, {'value': '$12build_const_key_map.7'}), (16, {'res': '$16load_global.8'}), (18, {'res': '$x18.9'}), (20, {'res': '$const20.10'}), (22, {'res': '$const22.11'}), (24, {'res': '$24load_global.12'}), (26, {'res': '$x26.13'}), (28, {'func': '$24load_global.12', 'args': ['$x26.13'], 'res': '$28call_function.14'}), (30, {'res': '$const30.15'}), (32, {'func': '$16load_global.8', 'args': ['$x18.9', '$const20.10', '$const22.11', '$28call_function.14'], 'names': '$const30.15', 'res': '$32call_function_kw.16'}), (34, {'res': '$const34.17'}), (36, {'res': '$const36.18'}), (38, {'start': '$const34.17', 'stop': '$const36.18', 'step': None, 'res': '$38build_slice.20', 'slicevar': '$38build_slice.19'}), (40, {'index': '$38build_slice.20', 'target': '$32call_function_kw.16', 'res': '$40binary_subscr.21'}), (42, {'value': '$40binary_subscr.21'}), (44, {'res': '$extra_args44.22'}), (46, {'res': '$const46.23'}), (48, {'lhs': '$extra_args44.22', 'rhs': '$const46.23', 'res': '$48compare_op.24'}), (50, {'pred': '$48compare_op.24'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 130: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$extra_args52.0'}), (54, {'item': '$extra_args52.0', 'res': '$54load_method.1'}), (56, {'res': '$const56.2'}), (58, {'res': '$default_status58.3'}), (60, {'func': '$54load_method.1', 'args': ['$const56.2', '$default_status58.3'], 'res': '$60call_method.4'}), (62, {'pred': '$60call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 130: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$const64.0'}), (66, {'value': '$const64.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$i68.0'}), (70, {'res': '$70load_global.1'}), (72, {'res': '$AC72.2'}), (74, {'func': '$70load_global.1', 'args': ['$AC72.2'], 'res': '$74call_function.3'}), (76, {'res': '$const76.4'}), (78, {'lhs': '$74call_function.3', 'rhs': '$const76.4', 'res': '$78binary_subtract.5'}), (80, {'lhs': '$i68.0', 'rhs': '$78binary_subtract.5', 'res': '$80compare_op.6'}), (82, {'pred': '$80compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 118: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$AC84.0'}), (86, {'res': '$i86.1'}), (88, {'index': '$i86.1', 'target': '$AC84.0', 'res': '$88binary_subscr.2'}), (90, {'res': '$AC90.3'}), (92, {'res': '$i92.4'}), (94, {'res': '$const94.5'}), (96, {'lhs': '$i92.4', 'rhs': '$const94.5', 'res': '$96binary_add.6'}), (98, {'index': '$96binary_add.6', 'target': '$AC90.3', 'res': '$98binary_subscr.7'}), (100, {'lhs': '$88binary_subscr.2', 'rhs': '$98binary_subscr.7', 'res': '$100compare_op.8'}), (102, {'pred': '$100compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$i104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$i104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$i118.0'}), (120, {'res': '$const120.1'}), (122, {'lhs': '$i118.0', 'rhs': '$const120.1', 'res': '$122binary_add.2'}), (124, {'res': '$special_ac_features124.3'}), (126, {'res': '$const126.4'}), (128, {'target': '$special_ac_features124.3', 'index': '$const126.4', 'value': '$122binary_add.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$extra_args130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$extra_args130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 232: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$extra_args138.0'}), (140, {'item': '$extra_args138.0', 'res': '$140load_method.1'}), (142, {'res': '$const142.2'}), (144, {'res': '$default_status144.3'}), (146, {'func': '$140load_method.1', 'args': ['$const142.2', '$default_status144.3'], 'res': '$146call_method.4'}), (148, {'pred': '$146call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={150: (), 232: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$const150.0'}), (152, {'value': '$const150.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$j154.0'}), (156, {'res': '$156load_global.1'}), (158, {'res': '$AC158.2'}), (160, {'func': '$156load_global.1', 'args': ['$AC158.2'], 'res': '$160call_function.3'}), (162, {'res': '$const162.4'}), (164, {'lhs': '$160call_function.3', 'rhs': '$const162.4', 'res': '$164binary_subtract.5'}), (166, {'lhs': '$j154.0', 'rhs': '$164binary_subtract.5', 'res': '$166compare_op.6'}), (168, {'pred': '$166compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={170: (), 220: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=170 nstack_initial=0):
AdaptBlockInfo(insts=((170, {'res': '$AC170.0'}), (172, {'res': '$j172.1'}), (174, {'index': '$j172.1', 'target': '$AC170.0', 'res': '$174binary_subscr.2'}), (176, {'res': '$const176.3'}), (178, {'orig': ['$const176.3'], 'duped': ['$178dup_top.4']}), (182, {'lhs': '$174binary_subscr.2', 'rhs': '$const176.3', 'res': '$182compare_op.5'}), (184, {'pred': '$182compare_op.5'})), outgoing_phis={'$phi186.0': '$178dup_top.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={186: ('$178dup_top.4',), 202: ('$178dup_top.4',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=186 nstack_initial=1):
AdaptBlockInfo(insts=((186, {'res': '$AC186.1'}), (188, {'res': '$j188.2'}), (190, {'res': '$const190.3'}), (192, {'lhs': '$j188.2', 'rhs': '$const190.3', 'res': '$192binary_add.4'}), (194, {'index': '$192binary_add.4', 'target': '$AC186.1', 'res': '$194binary_subscr.5'}), (196, {'lhs': '$phi186.0', 'rhs': '$194binary_subscr.5', 'res': '$196compare_op.6'}), (198, {'pred': '$196compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: (), 210: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=200 nstack_initial=0):
AdaptBlockInfo(insts=((200, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={220: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=202 nstack_initial=1):
AdaptBlockInfo(insts=((204, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={210: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=210 nstack_initial=0):
AdaptBlockInfo(insts=((210, {'res': '$j210.0'}), (212, {'res': '$const212.1'}), (214, {'lhs': '$j210.0', 'rhs': '$const212.1', 'res': '$214inplace_add.2'}), (216, {'value': '$214inplace_add.2'}), (218, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=220 nstack_initial=0):
AdaptBlockInfo(insts=((220, {'res': '$j220.0'}), (222, {'res': '$const222.1'}), (224, {'lhs': '$j220.0', 'rhs': '$const222.1', 'res': '$224binary_add.2'}), (226, {'res': '$special_ac_features226.3'}), (228, {'res': '$const228.4'}), (230, {'target': '$special_ac_features226.3', 'index': '$const228.4', 'value': '$224binary_add.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={232: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=232 nstack_initial=0):
AdaptBlockInfo(insts=((232, {'res': '$special_ac_features232.0'}), (234, {'retval': '$special_ac_features232.0', 'castval': '$234return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    extra_args = arg(1, name=extra_args)     ['extra_args']
    default_status = arg(2, name=default_status) ['default_status']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=nan) ['$2load_global.0', '$4load_attr.1']
    $6load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.2']
    $8load_attr.3 = getattr(value=$6load_global.2, attr=nan) ['$6load_global.2', '$8load_attr.3']
    $12build_const_key_map.5 = const(str, firstmin_ac) ['$12build_const_key_map.5']
    $12build_const_key_map.6 = const(str, firstzero_ac) ['$12build_const_key_map.6']
    special_ac_features = build_map(items=[(Var($12build_const_key_map.5, tsfeatures.py:1168), Var($4load_attr.1, tsfeatures.py:1168)), (Var($12build_const_key_map.6, tsfeatures.py:1168), Var($8load_attr.3, tsfeatures.py:1168))], size=2, literal_value={'firstmin_ac': _UNKNOWN_VALUE($4load_attr.1), 'firstzero_ac': _UNKNOWN_VALUE($8load_attr.3)}, value_indexes={'firstmin_ac': 0, 'firstzero_ac': 1}) ['$12build_const_key_map.5', '$12build_const_key_map.6', '$4load_attr.1', '$8load_attr.3', 'special_ac_features']
    $16load_global.8 = global(acf: <function acf at 0x7faabc0f9310>) ['$16load_global.8']
    $const20.10 = const(bool, False)         ['$const20.10']
    $const22.11 = const(bool, True)          ['$const22.11']
    $24load_global.12 = global(len: <built-in function len>) ['$24load_global.12']
    $28call_function.14 = call $24load_global.12(x, func=$24load_global.12, args=[Var(x, tsfeatures.py:1168)], kws=(), vararg=None) ['$24load_global.12', '$28call_function.14', 'x']
    $32call_function_kw.16 = call $16load_global.8(x, func=$16load_global.8, args=[Var(x, tsfeatures.py:1168)], kws=[('unbiased', Var($const20.10, tsfeatures.py:1169)), ('fft', Var($const22.11, tsfeatures.py:1169)), ('nlags', Var($28call_function.14, tsfeatures.py:1169))], vararg=None) ['$16load_global.8', '$28call_function.14', '$32call_function_kw.16', '$const20.10', '$const22.11', 'x']
    $const34.17 = const(int, 1)              ['$const34.17']
    $const36.18 = const(NoneType, None)      ['$const36.18']
    $38build_slice.19 = global(slice: <class 'slice'>) ['$38build_slice.19']
    $38build_slice.20 = call $38build_slice.19($const34.17, $const36.18, func=$38build_slice.19, args=(Var($const34.17, tsfeatures.py:1169), Var($const36.18, tsfeatures.py:1169)), kws=(), vararg=None) ['$38build_slice.19', '$38build_slice.20', '$const34.17', '$const36.18']
    AC = getitem(value=$32call_function_kw.16, index=$38build_slice.20, fn=<built-in function getitem>) ['$32call_function_kw.16', '$38build_slice.20', 'AC']
    $const46.23 = const(NoneType, None)      ['$const46.23']
    $48compare_op.24 = extra_args is not $const46.23 ['$48compare_op.24', '$const46.23', 'extra_args']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48compare_op.24, func=bool50, args=(Var($48compare_op.24, tsfeatures.py:1170),), kws=(), vararg=None) ['$48compare_op.24', '$50pred', 'bool50']
    branch $50pred, 52, 130                  ['$50pred']
label 52:
    $54load_method.1 = getattr(value=extra_args, attr=get) ['$54load_method.1', 'extra_args']
    $const56.2 = const(str, firstmin_ac)     ['$const56.2']
    $60call_method.4 = call $54load_method.1($const56.2, default_status, func=$54load_method.1, args=[Var($const56.2, tsfeatures.py:1170), Var(default_status, tsfeatures.py:1168)], kws=(), vararg=None) ['$54load_method.1', '$60call_method.4', '$const56.2', 'default_status']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60call_method.4, func=bool62, args=(Var($60call_method.4, tsfeatures.py:1170),), kws=(), vararg=None) ['$60call_method.4', '$62pred', 'bool62']
    branch $62pred, 64, 130                  ['$62pred']
label 64:
    i = const(int, 0)                        ['i']
    jump 68                                  []
label 68:
    $70load_global.1 = global(len: <built-in function len>) ['$70load_global.1']
    $74call_function.3 = call $70load_global.1(AC, func=$70load_global.1, args=[Var(AC, tsfeatures.py:1169)], kws=(), vararg=None) ['$70load_global.1', '$74call_function.3', 'AC']
    $const76.4 = const(int, 1)               ['$const76.4']
    $78binary_subtract.5 = $74call_function.3 - $const76.4 ['$74call_function.3', '$78binary_subtract.5', '$const76.4']
    $80compare_op.6 = i < $78binary_subtract.5 ['$78binary_subtract.5', '$80compare_op.6', 'i']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.6, func=bool82, args=(Var($80compare_op.6, tsfeatures.py:1172),), kws=(), vararg=None) ['$80compare_op.6', '$82pred', 'bool82']
    branch $82pred, 84, 118                  ['$82pred']
label 84:
    $88binary_subscr.2 = getitem(value=AC, index=i, fn=<built-in function getitem>) ['$88binary_subscr.2', 'AC', 'i']
    $const94.5 = const(int, 1)               ['$const94.5']
    $96binary_add.6 = i + $const94.5         ['$96binary_add.6', '$const94.5', 'i']
    $98binary_subscr.7 = getitem(value=AC, index=$96binary_add.6, fn=<built-in function getitem>) ['$96binary_add.6', '$98binary_subscr.7', 'AC']
    $100compare_op.8 = $88binary_subscr.2 > $98binary_subscr.7 ['$100compare_op.8', '$88binary_subscr.2', '$98binary_subscr.7']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.8, func=bool102, args=(Var($100compare_op.8, tsfeatures.py:1173),), kws=(), vararg=None) ['$100compare_op.8', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'i']
    i = $108inplace_add.2                    ['$108inplace_add.2', 'i']
    jump 68                                  []
label 118:
    $const120.1 = const(int, 1)              ['$const120.1']
    $122binary_add.2 = i + $const120.1       ['$122binary_add.2', '$const120.1', 'i']
    $const126.4 = const(str, firstmin_ac)    ['$const126.4']
    special_ac_features[$const126.4] = $122binary_add.2 ['$122binary_add.2', '$const126.4', 'special_ac_features']
    jump 130                                 []
label 130:
    $const132.1 = const(NoneType, None)      ['$const132.1']
    $134compare_op.2 = extra_args is not $const132.1 ['$134compare_op.2', '$const132.1', 'extra_args']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, tsfeatures.py:1180),), kws=(), vararg=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 232                ['$136pred']
label 138:
    $140load_method.1 = getattr(value=extra_args, attr=get) ['$140load_method.1', 'extra_args']
    $const142.2 = const(str, firstzero_ac)   ['$const142.2']
    $146call_method.4 = call $140load_method.1($const142.2, default_status, func=$140load_method.1, args=[Var($const142.2, tsfeatures.py:1180), Var(default_status, tsfeatures.py:1168)], kws=(), vararg=None) ['$140load_method.1', '$146call_method.4', '$const142.2', 'default_status']
    bool148 = global(bool: <class 'bool'>)   ['bool148']
    $148pred = call bool148($146call_method.4, func=bool148, args=(Var($146call_method.4, tsfeatures.py:1180),), kws=(), vararg=None) ['$146call_method.4', '$148pred', 'bool148']
    branch $148pred, 150, 232                ['$148pred']
label 150:
    j = const(int, 0)                        ['j']
    jump 154                                 []
label 154:
    $156load_global.1 = global(len: <built-in function len>) ['$156load_global.1']
    $160call_function.3 = call $156load_global.1(AC, func=$156load_global.1, args=[Var(AC, tsfeatures.py:1169)], kws=(), vararg=None) ['$156load_global.1', '$160call_function.3', 'AC']
    $const162.4 = const(int, 1)              ['$const162.4']
    $164binary_subtract.5 = $160call_function.3 - $const162.4 ['$160call_function.3', '$164binary_subtract.5', '$const162.4']
    $166compare_op.6 = j < $164binary_subtract.5 ['$164binary_subtract.5', '$166compare_op.6', 'j']
    bool168 = global(bool: <class 'bool'>)   ['bool168']
    $168pred = call bool168($166compare_op.6, func=bool168, args=(Var($166compare_op.6, tsfeatures.py:1182),), kws=(), vararg=None) ['$166compare_op.6', '$168pred', 'bool168']
    branch $168pred, 170, 220                ['$168pred']
label 170:
    $174binary_subscr.2 = getitem(value=AC, index=j, fn=<built-in function getitem>) ['$174binary_subscr.2', 'AC', 'j']
    $const176.3 = const(int, 0)              ['$const176.3']
    $182compare_op.5 = $174binary_subscr.2 > $const176.3 ['$174binary_subscr.2', '$182compare_op.5', '$const176.3']
    bool184 = global(bool: <class 'bool'>)   ['bool184']
    $184pred = call bool184($182compare_op.5, func=bool184, args=(Var($182compare_op.5, tsfeatures.py:1183),), kws=(), vararg=None) ['$182compare_op.5', '$184pred', 'bool184']
    $phi186.0 = $const176.3                  ['$const176.3', '$phi186.0']
    branch $184pred, 186, 202                ['$184pred']
label 186:
    $const190.3 = const(int, 1)              ['$const190.3']
    $192binary_add.4 = j + $const190.3       ['$192binary_add.4', '$const190.3', 'j']
    $194binary_subscr.5 = getitem(value=AC, index=$192binary_add.4, fn=<built-in function getitem>) ['$192binary_add.4', '$194binary_subscr.5', 'AC']
    $196compare_op.6 = $phi186.0 > $194binary_subscr.5 ['$194binary_subscr.5', '$196compare_op.6', '$phi186.0']
    bool198 = global(bool: <class 'bool'>)   ['bool198']
    $198pred = call bool198($196compare_op.6, func=bool198, args=(Var($196compare_op.6, tsfeatures.py:1183),), kws=(), vararg=None) ['$196compare_op.6', '$198pred', 'bool198']
    branch $198pred, 200, 210                ['$198pred']
label 200:
    jump 220                                 []
label 202:
    jump 210                                 []
label 210:
    $const212.1 = const(int, 1)              ['$const212.1']
    $214inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=j, rhs=$const212.1, static_lhs=Undefined, static_rhs=Undefined) ['$214inplace_add.2', '$const212.1', 'j']
    j = $214inplace_add.2                    ['$214inplace_add.2', 'j']
    jump 154                                 []
label 220:
    $const222.1 = const(int, 2)              ['$const222.1']
    $224binary_add.2 = j + $const222.1       ['$224binary_add.2', '$const222.1', 'j']
    $const228.4 = const(str, firstzero_ac)   ['$const228.4']
    special_ac_features[$const228.4] = $224binary_add.2 ['$224binary_add.2', '$const228.4', 'special_ac_features']
    jump 232                                 []
label 232:
    $234return_value.1 = cast(value=special_ac_features) ['$234return_value.1', 'special_ac_features']
    return $234return_value.1                ['$234return_value.1']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.transforms:top-level loop: Loop(entries={64}, exits={118}, header=68, body={104, 68, 84})
DEBUG:numba.core.transforms:same_exit_point=True ({130})
DEBUG:numba.core.transforms:one_entry=True
DEBUG:numba.core.transforms:no yield
DEBUG:numba.core.transforms:add candidate: Loop(entries={64}, exits={118}, header=68, body={104, 68, 84})
DEBUG:numba.core.transforms:top-level loop: Loop(entries={150}, exits={220}, header=154, body={210, 170, 202, 154, 186, 200})
DEBUG:numba.core.transforms:same_exit_point=True ({232})
DEBUG:numba.core.transforms:one_entry=True
DEBUG:numba.core.transforms:no yield
DEBUG:numba.core.transforms:add candidate: Loop(entries={150}, exits={220}, header=154, body={210, 170, 202, 154, 186, 200})
DEBUG:numba.core.transforms:loop lifting this IR with 2 candidates:
label 0:
    x = arg(0, name=x)                       ['x']
    extra_args = arg(1, name=extra_args)     ['extra_args']
    default_status = arg(2, name=default_status) ['default_status']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=nan) ['$2load_global.0', '$4load_attr.1']
    $6load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.2']
    $8load_attr.3 = getattr(value=$6load_global.2, attr=nan) ['$6load_global.2', '$8load_attr.3']
    $12build_const_key_map.5 = const(str, firstmin_ac) ['$12build_const_key_map.5']
    $12build_const_key_map.6 = const(str, firstzero_ac) ['$12build_const_key_map.6']
    special_ac_features = build_map(items=[(Var($12build_const_key_map.5, tsfeatures.py:1168), Var($4load_attr.1, tsfeatures.py:1168)), (Var($12build_const_key_map.6, tsfeatures.py:1168), Var($8load_attr.3, tsfeatures.py:1168))], size=2, literal_value={'firstmin_ac': _UNKNOWN_VALUE($4load_attr.1), 'firstzero_ac': _UNKNOWN_VALUE($8load_attr.3)}, value_indexes={'firstmin_ac': 0, 'firstzero_ac': 1}) ['$12build_const_key_map.5', '$12build_const_key_map.6', '$4load_attr.1', '$8load_attr.3', 'special_ac_features']
    $16load_global.8 = global(acf: <function acf at 0x7faabc0f9310>) ['$16load_global.8']
    $const20.10 = const(bool, False)         ['$const20.10']
    $const22.11 = const(bool, True)          ['$const22.11']
    $24load_global.12 = global(len: <built-in function len>) ['$24load_global.12']
    $28call_function.14 = call $24load_global.12(x, func=$24load_global.12, args=[Var(x, tsfeatures.py:1168)], kws=(), vararg=None) ['$24load_global.12', '$28call_function.14', 'x']
    $32call_function_kw.16 = call $16load_global.8(x, func=$16load_global.8, args=[Var(x, tsfeatures.py:1168)], kws=[('unbiased', Var($const20.10, tsfeatures.py:1169)), ('fft', Var($const22.11, tsfeatures.py:1169)), ('nlags', Var($28call_function.14, tsfeatures.py:1169))], vararg=None) ['$16load_global.8', '$28call_function.14', '$32call_function_kw.16', '$const20.10', '$const22.11', 'x']
    $const34.17 = const(int, 1)              ['$const34.17']
    $const36.18 = const(NoneType, None)      ['$const36.18']
    $38build_slice.19 = global(slice: <class 'slice'>) ['$38build_slice.19']
    $38build_slice.20 = call $38build_slice.19($const34.17, $const36.18, func=$38build_slice.19, args=(Var($const34.17, tsfeatures.py:1169), Var($const36.18, tsfeatures.py:1169)), kws=(), vararg=None) ['$38build_slice.19', '$38build_slice.20', '$const34.17', '$const36.18']
    AC = getitem(value=$32call_function_kw.16, index=$38build_slice.20, fn=<built-in function getitem>) ['$32call_function_kw.16', '$38build_slice.20', 'AC']
    $const46.23 = const(NoneType, None)      ['$const46.23']
    $48compare_op.24 = extra_args is not $const46.23 ['$48compare_op.24', '$const46.23', 'extra_args']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48compare_op.24, func=bool50, args=(Var($48compare_op.24, tsfeatures.py:1170),), kws=(), vararg=None) ['$48compare_op.24', '$50pred', 'bool50']
    branch $50pred, 52, 130                  ['$50pred']
label 52:
    $54load_method.1 = getattr(value=extra_args, attr=get) ['$54load_method.1', 'extra_args']
    $const56.2 = const(str, firstmin_ac)     ['$const56.2']
    $60call_method.4 = call $54load_method.1($const56.2, default_status, func=$54load_method.1, args=[Var($const56.2, tsfeatures.py:1170), Var(default_status, tsfeatures.py:1168)], kws=(), vararg=None) ['$54load_method.1', '$60call_method.4', '$const56.2', 'default_status']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60call_method.4, func=bool62, args=(Var($60call_method.4, tsfeatures.py:1170),), kws=(), vararg=None) ['$60call_method.4', '$62pred', 'bool62']
    branch $62pred, 64, 130                  ['$62pred']
label 64:
    i = const(int, 0)                        ['i']
    jump 68                                  []
label 68:
    $70load_global.1 = global(len: <built-in function len>) ['$70load_global.1']
    $74call_function.3 = call $70load_global.1(AC, func=$70load_global.1, args=[Var(AC, tsfeatures.py:1169)], kws=(), vararg=None) ['$70load_global.1', '$74call_function.3', 'AC']
    $const76.4 = const(int, 1)               ['$const76.4']
    $78binary_subtract.5 = $74call_function.3 - $const76.4 ['$74call_function.3', '$78binary_subtract.5', '$const76.4']
    $80compare_op.6 = i < $78binary_subtract.5 ['$78binary_subtract.5', '$80compare_op.6', 'i']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.6, func=bool82, args=(Var($80compare_op.6, tsfeatures.py:1172),), kws=(), vararg=None) ['$80compare_op.6', '$82pred', 'bool82']
    branch $82pred, 84, 118                  ['$82pred']
label 84:
    $88binary_subscr.2 = getitem(value=AC, index=i, fn=<built-in function getitem>) ['$88binary_subscr.2', 'AC', 'i']
    $const94.5 = const(int, 1)               ['$const94.5']
    $96binary_add.6 = i + $const94.5         ['$96binary_add.6', '$const94.5', 'i']
    $98binary_subscr.7 = getitem(value=AC, index=$96binary_add.6, fn=<built-in function getitem>) ['$96binary_add.6', '$98binary_subscr.7', 'AC']
    $100compare_op.8 = $88binary_subscr.2 > $98binary_subscr.7 ['$100compare_op.8', '$88binary_subscr.2', '$98binary_subscr.7']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.8, func=bool102, args=(Var($100compare_op.8, tsfeatures.py:1173),), kws=(), vararg=None) ['$100compare_op.8', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'i']
    i = $108inplace_add.2                    ['$108inplace_add.2', 'i']
    jump 68                                  []
label 118:
    $const120.1 = const(int, 1)              ['$const120.1']
    $122binary_add.2 = i + $const120.1       ['$122binary_add.2', '$const120.1', 'i']
    $const126.4 = const(str, firstmin_ac)    ['$const126.4']
    special_ac_features[$const126.4] = $122binary_add.2 ['$122binary_add.2', '$const126.4', 'special_ac_features']
    jump 130                                 []
label 130:
    $const132.1 = const(NoneType, None)      ['$const132.1']
    $134compare_op.2 = extra_args is not $const132.1 ['$134compare_op.2', '$const132.1', 'extra_args']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, tsfeatures.py:1180),), kws=(), vararg=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 232                ['$136pred']
label 138:
    $140load_method.1 = getattr(value=extra_args, attr=get) ['$140load_method.1', 'extra_args']
    $const142.2 = const(str, firstzero_ac)   ['$const142.2']
    $146call_method.4 = call $140load_method.1($const142.2, default_status, func=$140load_method.1, args=[Var($const142.2, tsfeatures.py:1180), Var(default_status, tsfeatures.py:1168)], kws=(), vararg=None) ['$140load_method.1', '$146call_method.4', '$const142.2', 'default_status']
    bool148 = global(bool: <class 'bool'>)   ['bool148']
    $148pred = call bool148($146call_method.4, func=bool148, args=(Var($146call_method.4, tsfeatures.py:1180),), kws=(), vararg=None) ['$146call_method.4', '$148pred', 'bool148']
    branch $148pred, 150, 232                ['$148pred']
label 150:
    j = const(int, 0)                        ['j']
    jump 154                                 []
label 154:
    $156load_global.1 = global(len: <built-in function len>) ['$156load_global.1']
    $160call_function.3 = call $156load_global.1(AC, func=$156load_global.1, args=[Var(AC, tsfeatures.py:1169)], kws=(), vararg=None) ['$156load_global.1', '$160call_function.3', 'AC']
    $const162.4 = const(int, 1)              ['$const162.4']
    $164binary_subtract.5 = $160call_function.3 - $const162.4 ['$160call_function.3', '$164binary_subtract.5', '$const162.4']
    $166compare_op.6 = j < $164binary_subtract.5 ['$164binary_subtract.5', '$166compare_op.6', 'j']
    bool168 = global(bool: <class 'bool'>)   ['bool168']
    $168pred = call bool168($166compare_op.6, func=bool168, args=(Var($166compare_op.6, tsfeatures.py:1182),), kws=(), vararg=None) ['$166compare_op.6', '$168pred', 'bool168']
    branch $168pred, 170, 220                ['$168pred']
label 170:
    $174binary_subscr.2 = getitem(value=AC, index=j, fn=<built-in function getitem>) ['$174binary_subscr.2', 'AC', 'j']
    $const176.3 = const(int, 0)              ['$const176.3']
    $182compare_op.5 = $174binary_subscr.2 > $const176.3 ['$174binary_subscr.2', '$182compare_op.5', '$const176.3']
    bool184 = global(bool: <class 'bool'>)   ['bool184']
    $184pred = call bool184($182compare_op.5, func=bool184, args=(Var($182compare_op.5, tsfeatures.py:1183),), kws=(), vararg=None) ['$182compare_op.5', '$184pred', 'bool184']
    $phi186.0 = $const176.3                  ['$const176.3', '$phi186.0']
    branch $184pred, 186, 202                ['$184pred']
label 186:
    $const190.3 = const(int, 1)              ['$const190.3']
    $192binary_add.4 = j + $const190.3       ['$192binary_add.4', '$const190.3', 'j']
    $194binary_subscr.5 = getitem(value=AC, index=$192binary_add.4, fn=<built-in function getitem>) ['$192binary_add.4', '$194binary_subscr.5', 'AC']
    $196compare_op.6 = $phi186.0 > $194binary_subscr.5 ['$194binary_subscr.5', '$196compare_op.6', '$phi186.0']
    bool198 = global(bool: <class 'bool'>)   ['bool198']
    $198pred = call bool198($196compare_op.6, func=bool198, args=(Var($196compare_op.6, tsfeatures.py:1183),), kws=(), vararg=None) ['$196compare_op.6', '$198pred', 'bool198']
    branch $198pred, 200, 210                ['$198pred']
label 200:
    jump 220                                 []
label 202:
    jump 210                                 []
label 210:
    $const212.1 = const(int, 1)              ['$const212.1']
    $214inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=j, rhs=$const212.1, static_lhs=Undefined, static_rhs=Undefined) ['$214inplace_add.2', '$const212.1', 'j']
    j = $214inplace_add.2                    ['$214inplace_add.2', 'j']
    jump 154                                 []
label 220:
    $const222.1 = const(int, 2)              ['$const222.1']
    $224binary_add.2 = j + $const222.1       ['$224binary_add.2', '$const222.1', 'j']
    $const228.4 = const(str, firstzero_ac)   ['$const228.4']
    special_ac_features[$const228.4] = $224binary_add.2 ['$224binary_add.2', '$const228.4', 'special_ac_features']
    jump 232                                 []
label 232:
    $234return_value.1 = cast(value=special_ac_features) ['$234return_value.1', 'special_ac_features']
    return $234return_value.1                ['$234return_value.1']

DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=541)
           2	LOAD_GLOBAL(arg=0, lineno=541)
           4	LOAD_FAST(arg=0, lineno=541)
           6	CALL_FUNCTION(arg=1, lineno=541)
           8	RETURN_VALUE(arg=None, lineno=541)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=541)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=541)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=541)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=541)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=541)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, tsfeatures.py:541)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'x']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241a3a00>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, tsfeatures.py:541)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7fa9e01e1f10>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7faa1c54bd30>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7faa1c551550>],
             'x': [<numba.core.ir.Assign object at 0x7faa246a7df0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=557)
           2	LOAD_GLOBAL(arg=0, lineno=557)
           4	LOAD_METHOD(arg=1, lineno=557)
           6	LOAD_FAST(arg=0, lineno=557)
           8	CALL_METHOD(arg=1, lineno=557)
          10	RETURN_VALUE(arg=None, lineno=557)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=557)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=557)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=557)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=557)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=557)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$x6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=557)
DEBUG:numba.core.byteflow:stack ['$8call_method.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'func': '$4load_method.1', 'args': ['$x6.2'], 'res': '$8call_method.3'}), (10, {'retval': '$8call_method.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=mean) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, tsfeatures.py:557)], kws=(), vararg=None) ['$4load_method.1', '$8call_method.3', 'x']
    $10return_value.4 = cast(value=$8call_method.3) ['$10return_value.4', '$8call_method.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e01d3a60>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=mean)
DEBUG:numba.core.ssa:on stmt: $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, tsfeatures.py:557)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_method.3)
DEBUG:numba.core.ssa:on stmt: return $10return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa9e01cb3d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa9e01cb0d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa9e01cbe20>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x7fa9e01cb520>],
             'x': [<numba.core.ir.Assign object at 0x7fa9e01cb220>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=411)
           2	LOAD_DEREF(arg=0, lineno=411)
           4	STORE_FAST(arg=1, lineno=411)
           6	LOAD_GLOBAL(arg=0, lineno=412)
           8	LOAD_METHOD(arg=1, lineno=412)
          10	LOAD_FAST(arg=0, lineno=412)
          12	CALL_METHOD(arg=1, lineno=412)
          14	GET_ITER(arg=None, lineno=412)
>         16	FOR_ITER(arg=16, lineno=412)
          18	STORE_FAST(arg=2, lineno=412)
          20	LOAD_FAST(arg=1, lineno=413)
          22	LOAD_FAST(arg=2, lineno=413)
          24	LOAD_METHOD(arg=2, lineno=413)
          26	CALL_METHOD(arg=0, lineno=413)
          28	INPLACE_ADD(arg=None, lineno=413)
          30	STORE_FAST(arg=1, lineno=413)
          32	JUMP_ABSOLUTE(arg=16, lineno=413)
>         34	LOAD_FAST(arg=1, lineno=414)
          36	LOAD_FAST(arg=0, lineno=414)
          38	LOAD_ATTR(arg=3, lineno=414)
          40	BINARY_TRUE_DIVIDE(arg=None, lineno=414)
          42	RETURN_VALUE(arg=None, lineno=414)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=411)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=411)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=STORE_FAST(arg=1, lineno=411)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=412)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=412)
DEBUG:numba.core.byteflow:stack ['$6load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=412)
DEBUG:numba.core.byteflow:stack ['$8load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=412)
DEBUG:numba.core.byteflow:stack ['$8load_method.2', '$arr10.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=GET_ITER(arg=None, lineno=412)
DEBUG:numba.core.byteflow:stack ['$12call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=FOR_ITER(arg=16, lineno=412)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=414)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=414)
DEBUG:numba.core.byteflow:stack ['$c34.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=414)
DEBUG:numba.core.byteflow:stack ['$c34.0', '$arr36.1']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=414)
DEBUG:numba.core.byteflow:stack ['$c34.0', '$38load_attr.2']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=414)
DEBUG:numba.core.byteflow:stack ['$40binary_true_divide.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi18.0', '$phi18.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=STORE_FAST(arg=2, lineno=412)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$phi18.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$v22.3']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$24load_method.4']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$26call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=1, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$28inplace_add.6']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=JUMP_ABSOLUTE(arg=16, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$arr10.3'}), (12, {'func': '$8load_method.2', 'args': ['$arr10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'res': '$arr36.1'}), (38, {'item': '$arr36.1', 'res': '$38load_attr.2'}), (40, {'lhs': '$c34.0', 'rhs': '$38load_attr.2', 'res': '$40binary_true_divide.3'}), (42, {'retval': '$40binary_true_divide.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0.0)                   ['c']
    $6load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:411)], kws=(), vararg=None) ['$12call_method.4', '$8load_method.2', 'arr']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $38load_attr.2 = getattr(value=arr, attr=size) ['$38load_attr.2', 'arr']
    $40binary_true_divide.3 = c / $38load_attr.2 ['$38load_attr.2', '$40binary_true_divide.3', 'c']
    $42return_value.4 = cast(value=$40binary_true_divide.3) ['$40binary_true_divide.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241a4250>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:411)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241a4250>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block analysis pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241a4250>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241a4250>
DEBUG:numba.core.ssa:on stmt: $38load_attr.2 = getattr(value=arr, attr=size)
DEBUG:numba.core.ssa:on stmt: $40binary_true_divide.3 = c / $38load_attr.2
DEBUG:numba.core.ssa:on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
DEBUG:numba.core.ssa:on stmt: return $42return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x7faa241a3e20>],
             '$14get_iter.5': [<numba.core.ir.Assign object at 0x7faa24181a30>],
             '$16for_iter.1': [<numba.core.ir.Assign object at 0x7faa24181dc0>],
             '$16for_iter.2': [<numba.core.ir.Assign object at 0x7faa24181970>],
             '$16for_iter.3': [<numba.core.ir.Assign object at 0x7faa24181eb0>],
             '$24load_method.4': [<numba.core.ir.Assign object at 0x7faa241813a0>],
             '$26call_method.5': [<numba.core.ir.Assign object at 0x7faa241811f0>],
             '$28inplace_add.6': [<numba.core.ir.Assign object at 0x7faa24181040>],
             '$38load_attr.2': [<numba.core.ir.Assign object at 0x7faa246a7790>],
             '$40binary_true_divide.3': [<numba.core.ir.Assign object at 0x7faa246a7fd0>],
             '$42return_value.4': [<numba.core.ir.Assign object at 0x7faa246a74f0>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x7faa241a3970>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x7faa241a3460>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x7faa241a3ca0>],
             '$phi18.1': [<numba.core.ir.Assign object at 0x7faa24181c70>],
             'arr': [<numba.core.ir.Assign object at 0x7faa241965e0>],
             'c': [<numba.core.ir.Assign object at 0x7faa24196670>,
                   <numba.core.ir.Assign object at 0x7faa246a72e0>],
             'v': [<numba.core.ir.Assign object at 0x7faa24181730>]})
DEBUG:numba.core.ssa:SSA violators {'c'}
DEBUG:numba.core.ssa:Fix SSA violator on var c
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241a47f0>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:first assign: c
DEBUG:numba.core.ssa:replaced with: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:411)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241a47f0>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241a47f0>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c = $28inplace_add.6
DEBUG:numba.core.ssa:replaced with: c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241a47f0>
DEBUG:numba.core.ssa:on stmt: $38load_attr.2 = getattr(value=arr, attr=size)
DEBUG:numba.core.ssa:on stmt: $40binary_true_divide.3 = c / $38load_attr.2
DEBUG:numba.core.ssa:on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
DEBUG:numba.core.ssa:on stmt: return $42return_value.4
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7faa24198f70>],
             18: [<numba.core.ir.Assign object at 0x7faa24198ca0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24198f10>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:411)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24198f10>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24198f10>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 18
DEBUG:numba.core.ssa:idom 16 from label 18
DEBUG:numba.core.ssa:find_def_from_bottom label 16
DEBUG:numba.core.ssa:find_def_from_top label 16
DEBUG:numba.core.ssa:insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:incoming_def c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24198f10>
DEBUG:numba.core.ssa:on stmt: $38load_attr.2 = getattr(value=arr, attr=size)
DEBUG:numba.core.ssa:on stmt: $40binary_true_divide.3 = c / $38load_attr.2
DEBUG:numba.core.ssa:find_def var='c' stmt=$40binary_true_divide.3 = c / $38load_attr.2
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 16 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 16
DEBUG:numba.core.ssa:replaced with: $40binary_true_divide.3 = c.2 / $38load_attr.2
DEBUG:numba.core.ssa:on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
DEBUG:numba.core.ssa:on stmt: return $42return_value.4
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=2716)
           2	LOAD_GLOBAL(arg=0, lineno=2716)
           4	LOAD_FAST(arg=0, lineno=2716)
           6	CALL_FUNCTION(arg=1, lineno=2716)
           8	STORE_FAST(arg=2, lineno=2716)
          10	LOAD_GLOBAL(arg=1, lineno=2717)
          12	LOAD_FAST(arg=2, lineno=2717)
          14	CALL_FUNCTION(arg=1, lineno=2717)
          16	GET_ITER(arg=None, lineno=2717)
>         18	FOR_ITER(arg=40, lineno=2717)
          20	STORE_FAST(arg=3, lineno=2717)
          22	LOAD_FAST(arg=0, lineno=2718)
          24	LOAD_FAST(arg=3, lineno=2718)
          26	BINARY_SUBSCR(arg=None, lineno=2718)
          28	LOAD_FAST(arg=1, lineno=2718)
          30	LOAD_GLOBAL(arg=0, lineno=2718)
          32	LOAD_FAST(arg=1, lineno=2718)
          34	CALL_FUNCTION(arg=1, lineno=2718)
          36	LOAD_FAST(arg=2, lineno=2718)
          38	BINARY_SUBTRACT(arg=None, lineno=2718)
          40	LOAD_FAST(arg=3, lineno=2718)
          42	BINARY_ADD(arg=None, lineno=2718)
          44	BINARY_SUBSCR(arg=None, lineno=2718)
          46	COMPARE_OP(arg=3, lineno=2718)
          48	POP_JUMP_IF_FALSE(arg=18, lineno=2718)
          50	LOAD_GLOBAL(arg=2, lineno=2719)
          52	LOAD_CONST(arg=1, lineno=2719)
          54	CALL_FUNCTION(arg=1, lineno=2719)
          56	RAISE_VARARGS(arg=1, lineno=2719)
          58	JUMP_ABSOLUTE(arg=18, lineno=2719)
>         60	LOAD_CONST(arg=0, lineno=2719)
          62	RETURN_VALUE(arg=None, lineno=2719)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=2716)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2716)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2716)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2716)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$shape4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=2716)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2717)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=2717)
DEBUG:numba.core.byteflow:stack ['$10load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=2717)
DEBUG:numba.core.byteflow:stack ['$10load_global.3', '$n12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=GET_ITER(arg=None, lineno=2717)
DEBUG:numba.core.byteflow:stack ['$14call_function.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi18.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=FOR_ITER(arg=40, lineno=2717)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=2719)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=2719)
DEBUG:numba.core.byteflow:stack ['$const60.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=20 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi20.0', '$phi20.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=STORE_FAST(arg=3, lineno=2717)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$phi20.1']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$shape22.2']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$shape22.2', '$i24.3']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=18, lineno=2718)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$46compare_op.14']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=18, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi50.0']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=2719)
DEBUG:numba.core.byteflow:stack ['$phi50.0']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=2719)
DEBUG:numba.core.byteflow:stack ['$phi50.0', '$50load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=2719)
DEBUG:numba.core.byteflow:stack ['$phi50.0', '$50load_global.1', '$const52.2']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=2719)
DEBUG:numba.core.byteflow:stack ['$phi50.0', '$54call_function.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 18: ('$phi20.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:2716)], kws=(), vararg=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:2716)], kws=(), vararg=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2718),), kws=(), vararg=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 18                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2719)], kws=(), vararg=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2468c280>
DEBUG:numba.core.ssa:on stmt: shape = arg(0, name=shape)
DEBUG:numba.core.ssa:on stmt: main_shape = arg(1, name=main_shape)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: n = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.3 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:2716)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.6
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block analysis pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2468c280>
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2468c280>
DEBUG:numba.core.ssa:on stmt: i = $phi20.1
DEBUG:numba.core.ssa:on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $30load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $34call_function.8 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38binary_subtract.10 = $34call_function.8 - n
DEBUG:numba.core.ssa:on stmt: $42binary_add.12 = $38binary_subtract.10 + i
DEBUG:numba.core.ssa:on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
DEBUG:numba.core.ssa:on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:2718),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $48pred, 50, 18
DEBUG:numba.core.ssa:==== SSA block analysis pass on 50
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2468c280>
DEBUG:numba.core.ssa:on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
DEBUG:numba.core.ssa:on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:2719)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2468c280>
DEBUG:numba.core.ssa:on stmt: $const60.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $62return_value.1 = cast(value=$const60.0)
DEBUG:numba.core.ssa:on stmt: return $62return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x7fa9c42d93d0>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x7fa9c42d95b0>],
             '$16get_iter.6': [<numba.core.ir.Assign object at 0x7fa9c42d93a0>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x7fa9c42d96a0>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x7fa9c42d9d30>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x7fa9c42d9550>],
             '$26binary_subscr.4': [<numba.core.ir.Assign object at 0x7fa9c42d0ca0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa9c42cb370>],
             '$30load_global.6': [<numba.core.ir.Assign object at 0x7fa9c42d0be0>],
             '$34call_function.8': [<numba.core.ir.Assign object at 0x7fa9c424e670>],
             '$38binary_subtract.10': [<numba.core.ir.Assign object at 0x7fa9c424e070>],
             '$42binary_add.12': [<numba.core.ir.Assign object at 0x7fa9c424e5b0>],
             '$44binary_subscr.13': [<numba.core.ir.Assign object at 0x7fa9c42d0310>],
             '$46compare_op.14': [<numba.core.ir.Assign object at 0x7fa9c42d0880>],
             '$48pred': [<numba.core.ir.Assign object at 0x7fa9c42d0610>],
             '$50load_global.1': [<numba.core.ir.Assign object at 0x7fa9c42d02e0>],
             '$54call_function.3': [<numba.core.ir.Assign object at 0x7fa9c42d0e80>],
             '$62return_value.1': [<numba.core.ir.Assign object at 0x7faa2468cb50>],
             '$const52.2': [<numba.core.ir.Assign object at 0x7fa9c42d0c40>],
             '$const60.0': [<numba.core.ir.Assign object at 0x7faa2468c2b0>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x7fa9c42cb760>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7fa9c42d9310>],
             'bool48': [<numba.core.ir.Assign object at 0x7fa9c42d0af0>],
             'i': [<numba.core.ir.Assign object at 0x7fa9c42d9850>],
             'main_shape': [<numba.core.ir.Assign object at 0x7fa9c42cb1f0>],
             'n': [<numba.core.ir.Assign object at 0x7fa9c42cb2e0>],
             'shape': [<numba.core.ir.Assign object at 0x7fa9c42cbe80>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=573)
           2	LOAD_GLOBAL(arg=0, lineno=573)
           4	LOAD_METHOD(arg=1, lineno=573)
           6	LOAD_FAST(arg=0, lineno=573)
           8	CALL_METHOD(arg=1, lineno=573)
          10	RETURN_VALUE(arg=None, lineno=573)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=573)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=573)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=573)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=573)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=573)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$x6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=573)
DEBUG:numba.core.byteflow:stack ['$8call_method.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'func': '$4load_method.1', 'args': ['$x6.2'], 'res': '$8call_method.3'}), (10, {'retval': '$8call_method.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=var) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, tsfeatures.py:573)], kws=(), vararg=None) ['$4load_method.1', '$8call_method.3', 'x']
    $10return_value.4 = cast(value=$8call_method.3) ['$10return_value.4', '$8call_method.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa1c409dc0>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=var)
DEBUG:numba.core.ssa:on stmt: $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, tsfeatures.py:573)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_method.3)
DEBUG:numba.core.ssa:on stmt: return $10return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7faa244405e0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7faa244402e0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7faa244403a0>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x7faa24440790>],
             'x': [<numba.core.ir.Assign object at 0x7fa9e01e1760>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=426)
           2	LOAD_FAST(arg=0, lineno=426)
           4	LOAD_METHOD(arg=0, lineno=426)
           6	CALL_METHOD(arg=0, lineno=426)
           8	STORE_FAST(arg=1, lineno=426)
          10	LOAD_CONST(arg=1, lineno=429)
          12	STORE_FAST(arg=2, lineno=429)
          14	LOAD_GLOBAL(arg=1, lineno=430)
          16	LOAD_METHOD(arg=2, lineno=430)
          18	LOAD_FAST(arg=0, lineno=430)
          20	CALL_METHOD(arg=1, lineno=430)
          22	GET_ITER(arg=None, lineno=430)
>         24	FOR_ITER(arg=40, lineno=430)
          26	STORE_FAST(arg=3, lineno=430)
          28	LOAD_FAST(arg=3, lineno=431)
          30	LOAD_METHOD(arg=3, lineno=431)
          32	CALL_METHOD(arg=0, lineno=431)
          34	LOAD_FAST(arg=1, lineno=431)
          36	BINARY_SUBTRACT(arg=None, lineno=431)
          38	STORE_FAST(arg=4, lineno=431)
          40	LOAD_FAST(arg=2, lineno=432)
          42	LOAD_GLOBAL(arg=1, lineno=432)
          44	LOAD_METHOD(arg=4, lineno=432)
          46	LOAD_FAST(arg=4, lineno=432)
          48	LOAD_GLOBAL(arg=1, lineno=432)
          50	LOAD_METHOD(arg=5, lineno=432)
          52	LOAD_FAST(arg=4, lineno=432)
          54	CALL_METHOD(arg=1, lineno=432)
          56	BINARY_MULTIPLY(arg=None, lineno=432)
          58	CALL_METHOD(arg=1, lineno=432)
          60	INPLACE_ADD(arg=None, lineno=432)
          62	STORE_FAST(arg=2, lineno=432)
          64	JUMP_ABSOLUTE(arg=24, lineno=432)
>         66	LOAD_FAST(arg=2, lineno=433)
          68	LOAD_FAST(arg=0, lineno=433)
          70	LOAD_ATTR(arg=6, lineno=433)
          72	BINARY_TRUE_DIVIDE(arg=None, lineno=433)
          74	RETURN_VALUE(arg=None, lineno=433)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=426)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=426)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=426)
DEBUG:numba.core.byteflow:stack ['$arr2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=426)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=1, lineno=426)
DEBUG:numba.core.byteflow:stack ['$6call_method.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=429)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=STORE_FAST(arg=2, lineno=429)
DEBUG:numba.core.byteflow:stack ['$const10.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=430)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=430)
DEBUG:numba.core.byteflow:stack ['$14load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=430)
DEBUG:numba.core.byteflow:stack ['$16load_method.5']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_METHOD(arg=1, lineno=430)
DEBUG:numba.core.byteflow:stack ['$16load_method.5', '$arr18.6']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=GET_ITER(arg=None, lineno=430)
DEBUG:numba.core.byteflow:stack ['$20call_method.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=24, stack=('$22get_iter.8',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=24 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi24.0']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=FOR_ITER(arg=40, lineno=430)
DEBUG:numba.core.byteflow:stack ['$phi24.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=('$phi24.0', '$24for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=26 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=2, lineno=433)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=433)
DEBUG:numba.core.byteflow:stack ['$ssd66.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_ATTR(arg=6, lineno=433)
DEBUG:numba.core.byteflow:stack ['$ssd66.0', '$arr68.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=433)
DEBUG:numba.core.byteflow:stack ['$ssd66.0', '$70load_attr.2']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=433)
DEBUG:numba.core.byteflow:stack ['$72binary_true_divide.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi26.0', '$phi26.1']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=STORE_FAST(arg=3, lineno=430)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$phi26.1']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_FAST(arg=3, lineno=431)
DEBUG:numba.core.byteflow:stack ['$phi26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_METHOD(arg=3, lineno=431)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$v28.2']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=CALL_METHOD(arg=0, lineno=431)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$30load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=431)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$32call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=BINARY_SUBTRACT(arg=None, lineno=431)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$32call_method.4', '$m34.5']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=STORE_FAST(arg=4, lineno=431)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$36binary_subtract.6']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=2, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_GLOBAL(arg=1, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$ssd40.7']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_METHOD(arg=4, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$ssd40.7', '$42load_global.8']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=4, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$ssd40.7', '$44load_method.9']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$ssd40.7', '$44load_method.9', '$val46.10']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_METHOD(arg=5, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$ssd40.7', '$44load_method.9', '$val46.10', '$48load_global.11']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$ssd40.7', '$44load_method.9', '$val46.10', '$50load_method.12']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=CALL_METHOD(arg=1, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$ssd40.7', '$44load_method.9', '$val46.10', '$50load_method.12', '$val52.13']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=BINARY_MULTIPLY(arg=None, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$ssd40.7', '$44load_method.9', '$val46.10', '$54call_method.14']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=CALL_METHOD(arg=1, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$ssd40.7', '$44load_method.9', '$56binary_multiply.15']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=INPLACE_ADD(arg=None, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$ssd40.7', '$58call_method.16']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=STORE_FAST(arg=2, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0', '$60inplace_add.17']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=JUMP_ABSOLUTE(arg=24, lineno=432)
DEBUG:numba.core.byteflow:stack ['$phi26.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=24, stack=('$phi26.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=24 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=26 nstack_initial=2): {'$phi26.1'},
             State(pc_initial=66 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi26.1': State(pc_initial=24 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$22get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi26.0': {('$phi24.0', State(pc_initial=24 nstack_initial=1))},
             '$phi26.1': {('$24for_iter.2',
                           State(pc_initial=24 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$22get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1))},
             '$phi26.0': {('$22get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$24for_iter.2',
                           State(pc_initial=24 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$22get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$22get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$24for_iter.2',
                           State(pc_initial=24 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$22get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$22get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$24for_iter.2',
                           State(pc_initial=24 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi24.0': {('$22get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi26.1': {('$24for_iter.2', State(pc_initial=24 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$22get_iter.8'},
             State(pc_initial=24 nstack_initial=1): {'$phi26.1': '$24for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'item': '$arr2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'value': '$6call_method.2'}), (10, {'res': '$const10.3'}), (12, {'value': '$const10.3'}), (14, {'res': '$14load_global.4'}), (16, {'item': '$14load_global.4', 'res': '$16load_method.5'}), (18, {'res': '$arr18.6'}), (20, {'func': '$16load_method.5', 'args': ['$arr18.6'], 'res': '$20call_method.7'}), (22, {'value': '$20call_method.7', 'res': '$22get_iter.8'})), outgoing_phis={'$phi24.0': '$22get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$22get_iter.8',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'iterator': '$phi24.0', 'pair': '$24for_iter.1', 'indval': '$24for_iter.2', 'pred': '$24for_iter.3'}),), outgoing_phis={'$phi26.1': '$24for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 26: ('$phi24.0', '$24for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=2):
AdaptBlockInfo(insts=((26, {'value': '$phi26.1'}), (28, {'res': '$v28.2'}), (30, {'item': '$v28.2', 'res': '$30load_method.3'}), (32, {'func': '$30load_method.3', 'args': [], 'res': '$32call_method.4'}), (34, {'res': '$m34.5'}), (36, {'lhs': '$32call_method.4', 'rhs': '$m34.5', 'res': '$36binary_subtract.6'}), (38, {'value': '$36binary_subtract.6'}), (40, {'res': '$ssd40.7'}), (42, {'res': '$42load_global.8'}), (44, {'item': '$42load_global.8', 'res': '$44load_method.9'}), (46, {'res': '$val46.10'}), (48, {'res': '$48load_global.11'}), (50, {'item': '$48load_global.11', 'res': '$50load_method.12'}), (52, {'res': '$val52.13'}), (54, {'func': '$50load_method.12', 'args': ['$val52.13'], 'res': '$54call_method.14'}), (56, {'lhs': '$val46.10', 'rhs': '$54call_method.14', 'res': '$56binary_multiply.15'}), (58, {'func': '$44load_method.9', 'args': ['$56binary_multiply.15'], 'res': '$58call_method.16'}), (60, {'lhs': '$ssd40.7', 'rhs': '$58call_method.16', 'res': '$60inplace_add.17'}), (62, {'value': '$60inplace_add.17'}), (64, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$phi26.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$ssd66.0'}), (68, {'res': '$arr68.1'}), (70, {'item': '$arr68.1', 'res': '$70load_attr.2'}), (72, {'lhs': '$ssd66.0', 'rhs': '$70load_attr.2', 'res': '$72binary_true_divide.3'}), (74, {'retval': '$72binary_true_divide.3', 'castval': '$74return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arr = arg(0, name=arr)                   ['arr']
    $4load_method.1 = getattr(value=arr, attr=mean) ['$4load_method.1', 'arr']
    m = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None) ['$4load_method.1', 'm']
    ssd = const(int, 0)                      ['ssd']
    $14load_global.4 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.4']
    $16load_method.5 = getattr(value=$14load_global.4, attr=nditer) ['$14load_global.4', '$16load_method.5']
    $20call_method.7 = call $16load_method.5(arr, func=$16load_method.5, args=[Var(arr, arraymath.py:426)], kws=(), vararg=None) ['$16load_method.5', '$20call_method.7', 'arr']
    $22get_iter.8 = getiter(value=$20call_method.7) ['$20call_method.7', '$22get_iter.8']
    $phi24.0 = $22get_iter.8                 ['$22get_iter.8', '$phi24.0']
    jump 24                                  []
label 24:
    $24for_iter.1 = iternext(value=$phi24.0) ['$24for_iter.1', '$phi24.0']
    $24for_iter.2 = pair_first(value=$24for_iter.1) ['$24for_iter.1', '$24for_iter.2']
    $24for_iter.3 = pair_second(value=$24for_iter.1) ['$24for_iter.1', '$24for_iter.3']
    $phi26.1 = $24for_iter.2                 ['$24for_iter.2', '$phi26.1']
    branch $24for_iter.3, 26, 66             ['$24for_iter.3']
label 26:
    v = $phi26.1                             ['$phi26.1', 'v']
    $30load_method.3 = getattr(value=v, attr=item) ['$30load_method.3', 'v']
    $32call_method.4 = call $30load_method.3(func=$30load_method.3, args=[], kws=(), vararg=None) ['$30load_method.3', '$32call_method.4']
    val = $32call_method.4 - m               ['$32call_method.4', 'm', 'val']
    $42load_global.8 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$42load_global.8']
    $44load_method.9 = getattr(value=$42load_global.8, attr=real) ['$42load_global.8', '$44load_method.9']
    $48load_global.11 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$48load_global.11']
    $50load_method.12 = getattr(value=$48load_global.11, attr=conj) ['$48load_global.11', '$50load_method.12']
    $54call_method.14 = call $50load_method.12(val, func=$50load_method.12, args=[Var(val, arraymath.py:431)], kws=(), vararg=None) ['$50load_method.12', '$54call_method.14', 'val']
    $56binary_multiply.15 = val * $54call_method.14 ['$54call_method.14', '$56binary_multiply.15', 'val']
    $58call_method.16 = call $44load_method.9($56binary_multiply.15, func=$44load_method.9, args=[Var($56binary_multiply.15, arraymath.py:432)], kws=(), vararg=None) ['$44load_method.9', '$56binary_multiply.15', '$58call_method.16']
    $60inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=ssd, rhs=$58call_method.16, static_lhs=Undefined, static_rhs=Undefined) ['$58call_method.16', '$60inplace_add.17', 'ssd']
    ssd = $60inplace_add.17                  ['$60inplace_add.17', 'ssd']
    jump 24                                  []
label 66:
    $70load_attr.2 = getattr(value=arr, attr=size) ['$70load_attr.2', 'arr']
    $72binary_true_divide.3 = ssd / $70load_attr.2 ['$70load_attr.2', '$72binary_true_divide.3', 'ssd']
    $74return_value.4 = cast(value=$72binary_true_divide.3) ['$72binary_true_divide.3', '$74return_value.4']
    return $74return_value.4                 ['$74return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24638c70>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=arr, attr=mean)
DEBUG:numba.core.ssa:on stmt: m = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: ssd = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $16load_method.5 = getattr(value=$14load_global.4, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $20call_method.7 = call $16load_method.5(arr, func=$16load_method.5, args=[Var(arr, arraymath.py:426)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $22get_iter.8 = getiter(value=$20call_method.7)
DEBUG:numba.core.ssa:on stmt: $phi24.0 = $22get_iter.8
DEBUG:numba.core.ssa:on stmt: jump 24
DEBUG:numba.core.ssa:==== SSA block analysis pass on 24
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24638c70>
DEBUG:numba.core.ssa:on stmt: $24for_iter.1 = iternext(value=$phi24.0)
DEBUG:numba.core.ssa:on stmt: $24for_iter.2 = pair_first(value=$24for_iter.1)
DEBUG:numba.core.ssa:on stmt: $24for_iter.3 = pair_second(value=$24for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi26.1 = $24for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $24for_iter.3, 26, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24638c70>
DEBUG:numba.core.ssa:on stmt: v = $phi26.1
DEBUG:numba.core.ssa:on stmt: $30load_method.3 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $32call_method.4 = call $30load_method.3(func=$30load_method.3, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: val = $32call_method.4 - m
DEBUG:numba.core.ssa:on stmt: $42load_global.8 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $44load_method.9 = getattr(value=$42load_global.8, attr=real)
DEBUG:numba.core.ssa:on stmt: $48load_global.11 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $50load_method.12 = getattr(value=$48load_global.11, attr=conj)
DEBUG:numba.core.ssa:on stmt: $54call_method.14 = call $50load_method.12(val, func=$50load_method.12, args=[Var(val, arraymath.py:431)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $56binary_multiply.15 = val * $54call_method.14
DEBUG:numba.core.ssa:on stmt: $58call_method.16 = call $44load_method.9($56binary_multiply.15, func=$44load_method.9, args=[Var($56binary_multiply.15, arraymath.py:432)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $60inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=ssd, rhs=$58call_method.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: ssd = $60inplace_add.17
DEBUG:numba.core.ssa:on stmt: jump 24
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24638c70>
DEBUG:numba.core.ssa:on stmt: $70load_attr.2 = getattr(value=arr, attr=size)
DEBUG:numba.core.ssa:on stmt: $72binary_true_divide.3 = ssd / $70load_attr.2
DEBUG:numba.core.ssa:on stmt: $74return_value.4 = cast(value=$72binary_true_divide.3)
DEBUG:numba.core.ssa:on stmt: return $74return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$14load_global.4': [<numba.core.ir.Assign object at 0x7faa246e5dc0>],
             '$16load_method.5': [<numba.core.ir.Assign object at 0x7faa245feaf0>],
             '$20call_method.7': [<numba.core.ir.Assign object at 0x7faa245fe520>],
             '$22get_iter.8': [<numba.core.ir.Assign object at 0x7faa245fe640>],
             '$24for_iter.1': [<numba.core.ir.Assign object at 0x7faa245fe5e0>],
             '$24for_iter.2': [<numba.core.ir.Assign object at 0x7faa245fe970>],
             '$24for_iter.3': [<numba.core.ir.Assign object at 0x7faa245fefd0>],
             '$30load_method.3': [<numba.core.ir.Assign object at 0x7faa245fe2b0>],
             '$32call_method.4': [<numba.core.ir.Assign object at 0x7faa2462b4c0>],
             '$42load_global.8': [<numba.core.ir.Assign object at 0x7faa2462bd90>],
             '$44load_method.9': [<numba.core.ir.Assign object at 0x7faa2462b760>],
             '$48load_global.11': [<numba.core.ir.Assign object at 0x7faa2462b790>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7faa246e53d0>],
             '$50load_method.12': [<numba.core.ir.Assign object at 0x7faa2462bfd0>],
             '$54call_method.14': [<numba.core.ir.Assign object at 0x7faa246bcf10>],
             '$56binary_multiply.15': [<numba.core.ir.Assign object at 0x7fa9c41d7430>],
             '$58call_method.16': [<numba.core.ir.Assign object at 0x7fa9c41d74f0>],
             '$60inplace_add.17': [<numba.core.ir.Assign object at 0x7fa9c41d7070>],
             '$70load_attr.2': [<numba.core.ir.Assign object at 0x7fa9c41d76a0>],
             '$72binary_true_divide.3': [<numba.core.ir.Assign object at 0x7fa9c41d71c0>],
             '$74return_value.4': [<numba.core.ir.Assign object at 0x7fa9c41d7340>],
             '$phi24.0': [<numba.core.ir.Assign object at 0x7faa246e59d0>],
             '$phi26.1': [<numba.core.ir.Assign object at 0x7faa245fe5b0>],
             'arr': [<numba.core.ir.Assign object at 0x7faa246e5d00>],
             'm': [<numba.core.ir.Assign object at 0x7faa246e5f10>],
             'ssd': [<numba.core.ir.Assign object at 0x7faa246e5df0>,
                     <numba.core.ir.Assign object at 0x7fa9c41d7e50>],
             'v': [<numba.core.ir.Assign object at 0x7faa245feb80>],
             'val': [<numba.core.ir.Assign object at 0x7faa2462bb80>]})
DEBUG:numba.core.ssa:SSA violators {'ssd'}
DEBUG:numba.core.ssa:Fix SSA violator on var ssd
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa24638c10>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=arr, attr=mean)
DEBUG:numba.core.ssa:on stmt: m = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: ssd = const(int, 0)
DEBUG:numba.core.ssa:first assign: ssd
DEBUG:numba.core.ssa:replaced with: ssd = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $16load_method.5 = getattr(value=$14load_global.4, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $20call_method.7 = call $16load_method.5(arr, func=$16load_method.5, args=[Var(arr, arraymath.py:426)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $22get_iter.8 = getiter(value=$20call_method.7)
DEBUG:numba.core.ssa:on stmt: $phi24.0 = $22get_iter.8
DEBUG:numba.core.ssa:on stmt: jump 24
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 24
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa24638c10>
DEBUG:numba.core.ssa:on stmt: $24for_iter.1 = iternext(value=$phi24.0)
DEBUG:numba.core.ssa:on stmt: $24for_iter.2 = pair_first(value=$24for_iter.1)
DEBUG:numba.core.ssa:on stmt: $24for_iter.3 = pair_second(value=$24for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi26.1 = $24for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $24for_iter.3, 26, 66
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa24638c10>
DEBUG:numba.core.ssa:on stmt: v = $phi26.1
DEBUG:numba.core.ssa:on stmt: $30load_method.3 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $32call_method.4 = call $30load_method.3(func=$30load_method.3, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: val = $32call_method.4 - m
DEBUG:numba.core.ssa:on stmt: $42load_global.8 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $44load_method.9 = getattr(value=$42load_global.8, attr=real)
DEBUG:numba.core.ssa:on stmt: $48load_global.11 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $50load_method.12 = getattr(value=$48load_global.11, attr=conj)
DEBUG:numba.core.ssa:on stmt: $54call_method.14 = call $50load_method.12(val, func=$50load_method.12, args=[Var(val, arraymath.py:431)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $56binary_multiply.15 = val * $54call_method.14
DEBUG:numba.core.ssa:on stmt: $58call_method.16 = call $44load_method.9($56binary_multiply.15, func=$44load_method.9, args=[Var($56binary_multiply.15, arraymath.py:432)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $60inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=ssd, rhs=$58call_method.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: ssd = $60inplace_add.17
DEBUG:numba.core.ssa:replaced with: ssd.1 = $60inplace_add.17
DEBUG:numba.core.ssa:on stmt: jump 24
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa24638c10>
DEBUG:numba.core.ssa:on stmt: $70load_attr.2 = getattr(value=arr, attr=size)
DEBUG:numba.core.ssa:on stmt: $72binary_true_divide.3 = ssd / $70load_attr.2
DEBUG:numba.core.ssa:on stmt: $74return_value.4 = cast(value=$72binary_true_divide.3)
DEBUG:numba.core.ssa:on stmt: return $74return_value.4
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7faa24638400>],
             26: [<numba.core.ir.Assign object at 0x7faa24638580>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24638c10>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=arr, attr=mean)
DEBUG:numba.core.ssa:on stmt: m = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: ssd = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $14load_global.4 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $16load_method.5 = getattr(value=$14load_global.4, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $20call_method.7 = call $16load_method.5(arr, func=$16load_method.5, args=[Var(arr, arraymath.py:426)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $22get_iter.8 = getiter(value=$20call_method.7)
DEBUG:numba.core.ssa:on stmt: $phi24.0 = $22get_iter.8
DEBUG:numba.core.ssa:on stmt: jump 24
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 24
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24638c10>
DEBUG:numba.core.ssa:on stmt: $24for_iter.1 = iternext(value=$phi24.0)
DEBUG:numba.core.ssa:on stmt: $24for_iter.2 = pair_first(value=$24for_iter.1)
DEBUG:numba.core.ssa:on stmt: $24for_iter.3 = pair_second(value=$24for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi26.1 = $24for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $24for_iter.3, 26, 66
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24638c10>
DEBUG:numba.core.ssa:on stmt: v = $phi26.1
DEBUG:numba.core.ssa:on stmt: $30load_method.3 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $32call_method.4 = call $30load_method.3(func=$30load_method.3, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: val = $32call_method.4 - m
DEBUG:numba.core.ssa:on stmt: $42load_global.8 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $44load_method.9 = getattr(value=$42load_global.8, attr=real)
DEBUG:numba.core.ssa:on stmt: $48load_global.11 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $50load_method.12 = getattr(value=$48load_global.11, attr=conj)
DEBUG:numba.core.ssa:on stmt: $54call_method.14 = call $50load_method.12(val, func=$50load_method.12, args=[Var(val, arraymath.py:431)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $56binary_multiply.15 = val * $54call_method.14
DEBUG:numba.core.ssa:on stmt: $58call_method.16 = call $44load_method.9($56binary_multiply.15, func=$44load_method.9, args=[Var($56binary_multiply.15, arraymath.py:432)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $60inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=ssd, rhs=$58call_method.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='ssd' stmt=$60inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=ssd, rhs=$58call_method.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 26
DEBUG:numba.core.ssa:idom 24 from label 26
DEBUG:numba.core.ssa:find_def_from_bottom label 24
DEBUG:numba.core.ssa:find_def_from_top label 24
DEBUG:numba.core.ssa:insert phi node ssd.2 = phi(incoming_values=[], incoming_blocks=[]) at 24
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def ssd = const(int, 0)
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:incoming_def ssd.1 = $60inplace_add.17
DEBUG:numba.core.ssa:replaced with: $60inplace_add.17 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=ssd.2, rhs=$58call_method.16, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: ssd.1 = $60inplace_add.17
DEBUG:numba.core.ssa:on stmt: jump 24
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24638c10>
DEBUG:numba.core.ssa:on stmt: $70load_attr.2 = getattr(value=arr, attr=size)
DEBUG:numba.core.ssa:on stmt: $72binary_true_divide.3 = ssd / $70load_attr.2
DEBUG:numba.core.ssa:find_def var='ssd' stmt=$72binary_true_divide.3 = ssd / $70load_attr.2
DEBUG:numba.core.ssa:find_def_from_top label 66
DEBUG:numba.core.ssa:idom 24 from label 66
DEBUG:numba.core.ssa:find_def_from_bottom label 24
DEBUG:numba.core.ssa:replaced with: $72binary_true_divide.3 = ssd.2 / $70load_attr.2
DEBUG:numba.core.ssa:on stmt: $74return_value.4 = cast(value=$72binary_true_divide.3)
DEBUG:numba.core.ssa:on stmt: return $74return_value.4
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3292)
           2	LOAD_FAST(arg=0, lineno=3292)
           4	LOAD_ATTR(arg=0, lineno=3292)
           6	RETURN_VALUE(arg=None, lineno=3292)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3292)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3292)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=3292)
DEBUG:numba.core.byteflow:stack ['$a2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=3292)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'retval': '$4load_attr.1', 'castval': '$6return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=real) ['$4load_attr.1', 'a']
    $6return_value.2 = cast(value=$4load_attr.1) ['$4load_attr.1', '$6return_value.2']
    return $6return_value.2                  ['$6return_value.2']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa245f9e80>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=a, attr=real)
DEBUG:numba.core.ssa:on stmt: $6return_value.2 = cast(value=$4load_attr.1)
DEBUG:numba.core.ssa:on stmt: return $6return_value.2
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$4load_attr.1': [<numba.core.ir.Assign object at 0x7faa1c4099a0>],
             '$6return_value.2': [<numba.core.ir.Assign object at 0x7fa9c41d7ca0>],
             'a': [<numba.core.ir.Assign object at 0x7faa245f9a30>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=593)
           2	LOAD_GLOBAL(arg=0, lineno=593)
           4	LOAD_FAST(arg=0, lineno=593)
           6	LOAD_FAST(arg=1, lineno=593)
           8	CALL_FUNCTION(arg=2, lineno=593)
          10	UNPACK_SEQUENCE(arg=2, lineno=593)
          12	STORE_FAST(arg=2, lineno=593)
          14	STORE_FAST(arg=3, lineno=593)
          16	LOAD_FAST(arg=3, lineno=596)
          18	LOAD_GLOBAL(arg=1, lineno=596)
          20	LOAD_METHOD(arg=2, lineno=596)
          22	LOAD_FAST(arg=3, lineno=596)
          24	CALL_METHOD(arg=1, lineno=596)
          26	BINARY_TRUE_DIVIDE(arg=None, lineno=596)
          28	STORE_FAST(arg=4, lineno=596)
          30	LOAD_GLOBAL(arg=1, lineno=597)
          32	LOAD_METHOD(arg=3, lineno=597)
          34	LOAD_FAST(arg=4, lineno=597)
          36	LOAD_GLOBAL(arg=1, lineno=597)
          38	LOAD_METHOD(arg=4, lineno=597)
          40	LOAD_FAST(arg=4, lineno=597)
          42	CALL_METHOD(arg=1, lineno=597)
          44	BINARY_MULTIPLY(arg=None, lineno=597)
          46	CALL_METHOD(arg=1, lineno=597)
          48	STORE_FAST(arg=5, lineno=597)
          50	LOAD_FAST(arg=5, lineno=599)
          52	LOAD_GLOBAL(arg=1, lineno=599)
          54	LOAD_METHOD(arg=4, lineno=599)
          56	LOAD_FAST(arg=4, lineno=599)
          58	LOAD_ATTR(arg=5, lineno=599)
          60	CALL_METHOD(arg=1, lineno=599)
          62	BINARY_TRUE_DIVIDE(arg=None, lineno=599)
          64	UNARY_NEGATIVE(arg=None, lineno=599)
          66	RETURN_VALUE(arg=None, lineno=599)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=593)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=593)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=593)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=593)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=593)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$freq6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=UNPACK_SEQUENCE(arg=2, lineno=593)
DEBUG:numba.core.byteflow:stack ['$8call_function.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=STORE_FAST(arg=2, lineno=593)
DEBUG:numba.core.byteflow:stack ['$10unpack_sequence.5', '$10unpack_sequence.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=STORE_FAST(arg=3, lineno=593)
DEBUG:numba.core.byteflow:stack ['$10unpack_sequence.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=3, lineno=596)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=596)
DEBUG:numba.core.byteflow:stack ['$psd16.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=596)
DEBUG:numba.core.byteflow:stack ['$psd16.7', '$18load_global.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=596)
DEBUG:numba.core.byteflow:stack ['$psd16.7', '$20load_method.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=596)
DEBUG:numba.core.byteflow:stack ['$psd16.7', '$20load_method.9', '$psd22.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=596)
DEBUG:numba.core.byteflow:stack ['$psd16.7', '$24call_method.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=4, lineno=596)
DEBUG:numba.core.byteflow:stack ['$26binary_true_divide.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=1, lineno=597)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_METHOD(arg=3, lineno=597)
DEBUG:numba.core.byteflow:stack ['$30load_global.13']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=597)
DEBUG:numba.core.byteflow:stack ['$32load_method.14']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_GLOBAL(arg=1, lineno=597)
DEBUG:numba.core.byteflow:stack ['$32load_method.14', '$psd_norm34.15']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_METHOD(arg=4, lineno=597)
DEBUG:numba.core.byteflow:stack ['$32load_method.14', '$psd_norm34.15', '$36load_global.16']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=597)
DEBUG:numba.core.byteflow:stack ['$32load_method.14', '$psd_norm34.15', '$38load_method.17']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=CALL_METHOD(arg=1, lineno=597)
DEBUG:numba.core.byteflow:stack ['$32load_method.14', '$psd_norm34.15', '$38load_method.17', '$psd_norm40.18']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BINARY_MULTIPLY(arg=None, lineno=597)
DEBUG:numba.core.byteflow:stack ['$32load_method.14', '$psd_norm34.15', '$42call_method.19']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=CALL_METHOD(arg=1, lineno=597)
DEBUG:numba.core.byteflow:stack ['$32load_method.14', '$44binary_multiply.20']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=5, lineno=597)
DEBUG:numba.core.byteflow:stack ['$46call_method.21']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=599)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_GLOBAL(arg=1, lineno=599)
DEBUG:numba.core.byteflow:stack ['$entropy50.22']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_METHOD(arg=4, lineno=599)
DEBUG:numba.core.byteflow:stack ['$entropy50.22', '$52load_global.23']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=599)
DEBUG:numba.core.byteflow:stack ['$entropy50.22', '$54load_method.24']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_ATTR(arg=5, lineno=599)
DEBUG:numba.core.byteflow:stack ['$entropy50.22', '$54load_method.24', '$psd_norm56.25']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=CALL_METHOD(arg=1, lineno=599)
DEBUG:numba.core.byteflow:stack ['$entropy50.22', '$54load_method.24', '$58load_attr.26']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=599)
DEBUG:numba.core.byteflow:stack ['$entropy50.22', '$60call_method.27']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=UNARY_NEGATIVE(arg=None, lineno=599)
DEBUG:numba.core.byteflow:stack ['$62binary_true_divide.28']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=599)
DEBUG:numba.core.byteflow:stack ['$64unary_negative.29']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$freq6.2'}), (8, {'func': '$2load_global.0', 'args': ['$x4.1', '$freq6.2'], 'res': '$8call_function.3'}), (10, {'iterable': '$8call_function.3', 'stores': ['$10unpack_sequence.4', '$10unpack_sequence.5'], 'tupleobj': '$10unpack_sequence.6'}), (12, {'value': '$10unpack_sequence.4'}), (14, {'value': '$10unpack_sequence.5'}), (16, {'res': '$psd16.7'}), (18, {'res': '$18load_global.8'}), (20, {'item': '$18load_global.8', 'res': '$20load_method.9'}), (22, {'res': '$psd22.10'}), (24, {'func': '$20load_method.9', 'args': ['$psd22.10'], 'res': '$24call_method.11'}), (26, {'lhs': '$psd16.7', 'rhs': '$24call_method.11', 'res': '$26binary_true_divide.12'}), (28, {'value': '$26binary_true_divide.12'}), (30, {'res': '$30load_global.13'}), (32, {'item': '$30load_global.13', 'res': '$32load_method.14'}), (34, {'res': '$psd_norm34.15'}), (36, {'res': '$36load_global.16'}), (38, {'item': '$36load_global.16', 'res': '$38load_method.17'}), (40, {'res': '$psd_norm40.18'}), (42, {'func': '$38load_method.17', 'args': ['$psd_norm40.18'], 'res': '$42call_method.19'}), (44, {'lhs': '$psd_norm34.15', 'rhs': '$42call_method.19', 'res': '$44binary_multiply.20'}), (46, {'func': '$32load_method.14', 'args': ['$44binary_multiply.20'], 'res': '$46call_method.21'}), (48, {'value': '$46call_method.21'}), (50, {'res': '$entropy50.22'}), (52, {'res': '$52load_global.23'}), (54, {'item': '$52load_global.23', 'res': '$54load_method.24'}), (56, {'res': '$psd_norm56.25'}), (58, {'item': '$psd_norm56.25', 'res': '$58load_attr.26'}), (60, {'func': '$54load_method.24', 'args': ['$58load_attr.26'], 'res': '$60call_method.27'}), (62, {'lhs': '$entropy50.22', 'rhs': '$60call_method.27', 'res': '$62binary_true_divide.28'}), (64, {'value': '$62binary_true_divide.28', 'res': '$64unary_negative.29'}), (66, {'retval': '$64unary_negative.29', 'castval': '$66return_value.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    freq = arg(1, name=freq)                 ['freq']
    $2load_global.0 = global(periodogram: <function periodogram at 0x7fab35105790>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(x, freq, func=$2load_global.0, args=[Var(x, tsfeatures.py:593), Var(freq, tsfeatures.py:593)], kws=(), vararg=None) ['$2load_global.0', '$8call_function.3', 'freq', 'x']
    $10unpack_sequence.6 = exhaust_iter(value=$8call_function.3, count=2) ['$10unpack_sequence.6', '$8call_function.3']
    $10unpack_sequence.4 = static_getitem(value=$10unpack_sequence.6, index=0, index_var=None, fn=<built-in function getitem>) ['$10unpack_sequence.4', '$10unpack_sequence.6']
    $10unpack_sequence.5 = static_getitem(value=$10unpack_sequence.6, index=1, index_var=None, fn=<built-in function getitem>) ['$10unpack_sequence.5', '$10unpack_sequence.6']
    _ = $10unpack_sequence.4                 ['$10unpack_sequence.4', '_']
    psd = $10unpack_sequence.5               ['$10unpack_sequence.5', 'psd']
    $18load_global.8 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$18load_global.8']
    $20load_method.9 = getattr(value=$18load_global.8, attr=sum) ['$18load_global.8', '$20load_method.9']
    $24call_method.11 = call $20load_method.9(psd, func=$20load_method.9, args=[Var(psd, tsfeatures.py:593)], kws=(), vararg=None) ['$20load_method.9', '$24call_method.11', 'psd']
    psd_norm = psd / $24call_method.11       ['$24call_method.11', 'psd', 'psd_norm']
    $30load_global.13 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$30load_global.13']
    $32load_method.14 = getattr(value=$30load_global.13, attr=nansum) ['$30load_global.13', '$32load_method.14']
    $36load_global.16 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$36load_global.16']
    $38load_method.17 = getattr(value=$36load_global.16, attr=log2) ['$36load_global.16', '$38load_method.17']
    $42call_method.19 = call $38load_method.17(psd_norm, func=$38load_method.17, args=[Var(psd_norm, tsfeatures.py:596)], kws=(), vararg=None) ['$38load_method.17', '$42call_method.19', 'psd_norm']
    $44binary_multiply.20 = psd_norm * $42call_method.19 ['$42call_method.19', '$44binary_multiply.20', 'psd_norm']
    entropy = call $32load_method.14($44binary_multiply.20, func=$32load_method.14, args=[Var($44binary_multiply.20, tsfeatures.py:597)], kws=(), vararg=None) ['$32load_method.14', '$44binary_multiply.20', 'entropy']
    $52load_global.23 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$52load_global.23']
    $54load_method.24 = getattr(value=$52load_global.23, attr=log2) ['$52load_global.23', '$54load_method.24']
    $58load_attr.26 = getattr(value=psd_norm, attr=size) ['$58load_attr.26', 'psd_norm']
    $60call_method.27 = call $54load_method.24($58load_attr.26, func=$54load_method.24, args=[Var($58load_attr.26, tsfeatures.py:599)], kws=(), vararg=None) ['$54load_method.24', '$58load_attr.26', '$60call_method.27']
    $62binary_true_divide.28 = entropy / $60call_method.27 ['$60call_method.27', '$62binary_true_divide.28', 'entropy']
    $64unary_negative.29 = unary(fn=<built-in function neg>, value=$62binary_true_divide.28) ['$62binary_true_divide.28', '$64unary_negative.29']
    $66return_value.30 = cast(value=$64unary_negative.29) ['$64unary_negative.29', '$66return_value.30']
    return $66return_value.30                ['$66return_value.30']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=618)
           2	LOAD_CONST(arg=1, lineno=618)
           4	LOAD_CONST(arg=2, lineno=618)
           6	MAKE_FUNCTION(arg=0, lineno=618)
           8	LOAD_GLOBAL(arg=0, lineno=618)
          10	LOAD_METHOD(arg=1, lineno=618)
          12	LOAD_FAST(arg=0, lineno=618)
          14	LOAD_GLOBAL(arg=2, lineno=618)
          16	LOAD_FAST(arg=0, lineno=618)
          18	CALL_FUNCTION(arg=1, lineno=618)
          20	LOAD_FAST(arg=1, lineno=618)
          22	BINARY_FLOOR_DIVIDE(arg=None, lineno=618)
          24	LOAD_CONST(arg=3, lineno=618)
          26	BINARY_ADD(arg=None, lineno=618)
          28	CALL_METHOD(arg=2, lineno=618)
          30	GET_ITER(arg=None, lineno=618)
          32	CALL_FUNCTION(arg=1, lineno=618)
          34	STORE_FAST(arg=2, lineno=618)
          36	LOAD_GLOBAL(arg=0, lineno=619)
          38	LOAD_METHOD(arg=3, lineno=619)
          40	LOAD_FAST(arg=2, lineno=619)
          42	CALL_METHOD(arg=1, lineno=619)
          44	RETURN_VALUE(arg=None, lineno=619)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=618)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=618)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=618)
DEBUG:numba.core.byteflow:stack ['$const2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=MAKE_FUNCTION(arg=0, lineno=618)
DEBUG:numba.core.byteflow:stack ['$const2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$8load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=2, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$14load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$14load_global.6', '$x16.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$18call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$18call_function.8', '$window_size20.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$22binary_floor_divide.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_ADD(arg=None, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$22binary_floor_divide.10', '$const24.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_METHOD(arg=2, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$26binary_add.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=GET_ITER(arg=None, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$28call_method.13']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=618)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$30get_iter.14']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=2, lineno=618)
DEBUG:numba.core.byteflow:stack ['$32call_function.15']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_GLOBAL(arg=0, lineno=619)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_METHOD(arg=3, lineno=619)
DEBUG:numba.core.byteflow:stack ['$36load_global.16']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=2, lineno=619)
DEBUG:numba.core.byteflow:stack ['$38load_method.17']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=CALL_METHOD(arg=1, lineno=619)
DEBUG:numba.core.byteflow:stack ['$38load_method.17', '$v40.18']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=619)
DEBUG:numba.core.byteflow:stack ['$42call_method.19']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'name': '$const4.1', 'code': '$const2.0', 'closure': None, 'annotations': None, 'kwdefaults': None, 'defaults': None, 'res': '$6make_function.2'}), (8, {'res': '$8load_global.3'}), (10, {'item': '$8load_global.3', 'res': '$10load_method.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$14load_global.6'}), (16, {'res': '$x16.7'}), (18, {'func': '$14load_global.6', 'args': ['$x16.7'], 'res': '$18call_function.8'}), (20, {'res': '$window_size20.9'}), (22, {'lhs': '$18call_function.8', 'rhs': '$window_size20.9', 'res': '$22binary_floor_divide.10'}), (24, {'res': '$const24.11'}), (26, {'lhs': '$22binary_floor_divide.10', 'rhs': '$const24.11', 'res': '$26binary_add.12'}), (28, {'func': '$10load_method.4', 'args': ['$x12.5', '$26binary_add.12'], 'res': '$28call_method.13'}), (30, {'value': '$28call_method.13', 'res': '$30get_iter.14'}), (32, {'func': '$6make_function.2', 'args': ['$30get_iter.14'], 'res': '$32call_function.15'}), (34, {'value': '$32call_function.15'}), (36, {'res': '$36load_global.16'}), (38, {'item': '$36load_global.16', 'res': '$38load_method.17'}), (40, {'res': '$v40.18'}), (42, {'func': '$38load_method.17', 'args': ['$v40.18'], 'res': '$42call_method.19'}), (44, {'retval': '$42call_method.19', 'castval': '$44return_value.20'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    window_size = arg(1, name=window_size)   ['window_size']
    $const2.0 = const(code, <code object <listcomp> at 0x7faab67095b0, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 618>) ['$const2.0']
    $const4.1 = const(str, TsFeatures.get_lumpiness.<locals>.<listcomp>) ['$const4.1']
    $6make_function.2 = make_function(name=$const4.1, code=<code object <listcomp> at 0x7faab67095b0, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 618>, closure=None, defaults=None) ['$6make_function.2', '$const4.1']
    $8load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.3']
    $10load_method.4 = getattr(value=$8load_global.3, attr=array_split) ['$10load_method.4', '$8load_global.3']
    $14load_global.6 = global(len: <built-in function len>) ['$14load_global.6']
    $18call_function.8 = call $14load_global.6(x, func=$14load_global.6, args=[Var(x, tsfeatures.py:618)], kws=(), vararg=None) ['$14load_global.6', '$18call_function.8', 'x']
    $22binary_floor_divide.10 = $18call_function.8 // window_size ['$18call_function.8', '$22binary_floor_divide.10', 'window_size']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_add.12 = $22binary_floor_divide.10 + $const24.11 ['$22binary_floor_divide.10', '$26binary_add.12', '$const24.11']
    $28call_method.13 = call $10load_method.4(x, $26binary_add.12, func=$10load_method.4, args=[Var(x, tsfeatures.py:618), Var($26binary_add.12, tsfeatures.py:618)], kws=(), vararg=None) ['$10load_method.4', '$26binary_add.12', '$28call_method.13', 'x']
    $30get_iter.14 = getiter(value=$28call_method.13) ['$28call_method.13', '$30get_iter.14']
    v = call $6make_function.2($30get_iter.14, func=$6make_function.2, args=[Var($30get_iter.14, tsfeatures.py:618)], kws=(), vararg=None) ['$30get_iter.14', '$6make_function.2', 'v']
    $36load_global.16 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$36load_global.16']
    $38load_method.17 = getattr(value=$36load_global.16, attr=var) ['$36load_global.16', '$38load_method.17']
    $42call_method.19 = call $38load_method.17(v, func=$38load_method.17, args=[Var(v, tsfeatures.py:618)], kws=(), vararg=None) ['$38load_method.17', '$42call_method.19', 'v']
    $44return_value.20 = cast(value=$42call_method.19) ['$42call_method.19', '$44return_value.20']
    return $44return_value.20                ['$44return_value.20']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=618)
           2	BUILD_LIST(arg=0, lineno=618)
           4	LOAD_FAST(arg=0, lineno=618)
>          6	FOR_ITER(arg=14, lineno=618)
           8	STORE_FAST(arg=1, lineno=618)
          10	LOAD_GLOBAL(arg=0, lineno=618)
          12	LOAD_METHOD(arg=1, lineno=618)
          14	LOAD_FAST(arg=1, lineno=618)
          16	CALL_METHOD(arg=1, lineno=618)
          18	LIST_APPEND(arg=2, lineno=618)
          20	JUMP_ABSOLUTE(arg=6, lineno=618)
>         22	RETURN_VALUE(arg=None, lineno=618)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=618)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=618)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=618)
DEBUG:numba.core.byteflow:stack ['$2build_list.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$2build_list.0', '$.04.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=FOR_ITER(arg=14, lineno=618)
DEBUG:numba.core.byteflow:stack ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=22, stack=('$phi6.0',), blockstack=(), npush=0), Edge(pc=8, stack=('$phi6.0', '$phi6.1', '$6for_iter.3'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=22 nstack_initial=1), State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi22.0']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=618)
DEBUG:numba.core.byteflow:stack ['$phi22.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=1, lineno=618)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=618)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_METHOD(arg=1, lineno=618)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$10load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=618)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=CALL_METHOD(arg=1, lineno=618)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$x_w14.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LIST_APPEND(arg=2, lineno=618)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$16call_method.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=JUMP_ABSOLUTE(arg=6, lineno=618)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$phi8.0', '$phi8.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=2): {'$phi6.1'},
             State(pc_initial=8 nstack_initial=3): {'$phi8.2', '$phi8.0'},
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'}})
DEBUG:numba.core.byteflow:defmap: {'$phi6.0': State(pc_initial=0 nstack_initial=0),
 '$phi6.1': State(pc_initial=0 nstack_initial=0),
 '$phi8.2': State(pc_initial=6 nstack_initial=2)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.1', State(pc_initial=8 nstack_initial=3))},
             '$phi8.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi8.1': {('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi22.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
 '$phi8.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi8.2': {('$6for_iter.3', State(pc_initial=6 nstack_initial=2))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$2build_list.0',
                                                    '$phi6.1': '$.04.1',
                                                    '$phi8.0': '$2build_list.0'},
             State(pc_initial=6 nstack_initial=2): {'$phi8.2': '$6for_iter.3'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'res': '$.04.1'})), outgoing_phis={'$phi22.0': '$2build_list.0', '$phi8.0': '$2build_list.0', '$phi6.1': '$.04.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$2build_list.0', '$.04.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=6 nstack_initial=2):
AdaptBlockInfo(insts=((6, {'iterator': '$phi6.1', 'pair': '$6for_iter.2', 'indval': '$6for_iter.3', 'pred': '$6for_iter.4'}),), outgoing_phis={'$phi8.2': '$6for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi6.0',), 8: ('$phi6.0', '$phi6.1', '$6for_iter.3')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=8 nstack_initial=3):
AdaptBlockInfo(insts=((8, {'value': '$phi8.2'}), (10, {'res': '$10load_global.3'}), (12, {'item': '$10load_global.3', 'res': '$12load_method.4'}), (14, {'res': '$x_w14.5'}), (16, {'func': '$12load_method.4', 'args': ['$x_w14.5'], 'res': '$16call_method.6'}), (18, {'target': '$phi8.0', 'value': '$16call_method.6', 'appendvar': '$18list_append.7', 'res': '$18list_append.8'}), (20, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$phi8.0', '$phi8.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'retval': '$phi22.0', 'castval': '$22return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    implicit0 = arg(0, name=implicit0)       ['implicit0']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    $phi22.0 = $2build_list.0                ['$2build_list.0', '$phi22.0']
    $phi8.0 = $2build_list.0                 ['$2build_list.0', '$phi8.0']
    $phi6.1 = implicit0                      ['$phi6.1', 'implicit0']
    jump 6                                   []
label 6:
    $6for_iter.2 = iternext(value=$phi6.1)   ['$6for_iter.2', '$phi6.1']
    $6for_iter.3 = pair_first(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.3']
    $6for_iter.4 = pair_second(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.4']
    $phi8.2 = $6for_iter.3                   ['$6for_iter.3', '$phi8.2']
    branch $6for_iter.4, 8, 22               ['$6for_iter.4']
label 8:
    x_w = $phi8.2                            ['$phi8.2', 'x_w']
    $10load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$10load_global.3']
    $12load_method.4 = getattr(value=$10load_global.3, attr=var) ['$10load_global.3', '$12load_method.4']
    $16call_method.6 = call $12load_method.4(x_w, func=$12load_method.4, args=[Var(x_w, tsfeatures.py:618)], kws=(), vararg=None) ['$12load_method.4', '$16call_method.6', 'x_w']
    $18list_append.7 = getattr(value=$phi8.0, attr=append) ['$18list_append.7', '$phi8.0']
    $18list_append.8 = call $18list_append.7($16call_method.6, func=$18list_append.7, args=(Var($16call_method.6, tsfeatures.py:618),), kws=(), vararg=None) ['$16call_method.6', '$18list_append.7', '$18list_append.8']
    jump 6                                   []
label 22:
    $22return_value.1 = cast(value=$phi22.0) ['$22return_value.1', '$phi22.0']
    return $22return_value.1                 ['$22return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2445e550>
DEBUG:numba.core.ssa:on stmt: implicit0 = arg(0, name=implicit0)
DEBUG:numba.core.ssa:on stmt: $2build_list.0 = build_list(items=[])
DEBUG:numba.core.ssa:on stmt: $phi22.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: $phi8.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: $phi6.1 = implicit0
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 6
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2445e550>
DEBUG:numba.core.ssa:on stmt: $6for_iter.2 = iternext(value=$phi6.1)
DEBUG:numba.core.ssa:on stmt: $6for_iter.3 = pair_first(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $6for_iter.4 = pair_second(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi8.2 = $6for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $6for_iter.4, 8, 22
DEBUG:numba.core.ssa:==== SSA block analysis pass on 8
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2445e550>
DEBUG:numba.core.ssa:on stmt: x_w = $phi8.2
DEBUG:numba.core.ssa:on stmt: $10load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $12load_method.4 = getattr(value=$10load_global.3, attr=var)
DEBUG:numba.core.ssa:on stmt: $16call_method.6 = call $12load_method.4(x_w, func=$12load_method.4, args=[Var(x_w, tsfeatures.py:618)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $18list_append.7 = getattr(value=$phi8.0, attr=append)
DEBUG:numba.core.ssa:on stmt: $18list_append.8 = call $18list_append.7($16call_method.6, func=$18list_append.7, args=(Var($16call_method.6, tsfeatures.py:618),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2445e550>
DEBUG:numba.core.ssa:on stmt: $22return_value.1 = cast(value=$phi22.0)
DEBUG:numba.core.ssa:on stmt: return $22return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x7faa24447940>],
             '$12load_method.4': [<numba.core.ir.Assign object at 0x7faa24447ac0>],
             '$16call_method.6': [<numba.core.ir.Assign object at 0x7faa24447d90>],
             '$18list_append.7': [<numba.core.ir.Assign object at 0x7faa24447f40>],
             '$18list_append.8': [<numba.core.ir.Assign object at 0x7faa2445e0a0>],
             '$22return_value.1': [<numba.core.ir.Assign object at 0x7faa2445e2e0>],
             '$2build_list.0': [<numba.core.ir.Assign object at 0x7faa244461c0>],
             '$6for_iter.2': [<numba.core.ir.Assign object at 0x7faa244472e0>],
             '$6for_iter.3': [<numba.core.ir.Assign object at 0x7faa24447400>],
             '$6for_iter.4': [<numba.core.ir.Assign object at 0x7faa24447520>],
             '$phi22.0': [<numba.core.ir.Assign object at 0x7faa24446370>],
             '$phi6.1': [<numba.core.ir.Assign object at 0x7faa244464c0>],
             '$phi8.0': [<numba.core.ir.Assign object at 0x7faa24446550>],
             '$phi8.2': [<numba.core.ir.Assign object at 0x7faa244471f0>],
             'implicit0': [<numba.core.ir.Assign object at 0x7faa24446430>],
             'x_w': [<numba.core.ir.Assign object at 0x7faa244477c0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=638)
           2	LOAD_CONST(arg=1, lineno=638)
           4	LOAD_CONST(arg=2, lineno=638)
           6	MAKE_FUNCTION(arg=0, lineno=638)
           8	LOAD_GLOBAL(arg=0, lineno=638)
          10	LOAD_METHOD(arg=1, lineno=638)
          12	LOAD_FAST(arg=0, lineno=638)
          14	LOAD_GLOBAL(arg=2, lineno=638)
          16	LOAD_FAST(arg=0, lineno=638)
          18	CALL_FUNCTION(arg=1, lineno=638)
          20	LOAD_FAST(arg=1, lineno=638)
          22	BINARY_FLOOR_DIVIDE(arg=None, lineno=638)
          24	LOAD_CONST(arg=3, lineno=638)
          26	BINARY_ADD(arg=None, lineno=638)
          28	CALL_METHOD(arg=2, lineno=638)
          30	GET_ITER(arg=None, lineno=638)
          32	CALL_FUNCTION(arg=1, lineno=638)
          34	STORE_FAST(arg=2, lineno=638)
          36	LOAD_GLOBAL(arg=0, lineno=639)
          38	LOAD_METHOD(arg=3, lineno=639)
          40	LOAD_FAST(arg=2, lineno=639)
          42	CALL_METHOD(arg=1, lineno=639)
          44	RETURN_VALUE(arg=None, lineno=639)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=638)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=638)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=2, lineno=638)
DEBUG:numba.core.byteflow:stack ['$const2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=MAKE_FUNCTION(arg=0, lineno=638)
DEBUG:numba.core.byteflow:stack ['$const2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$8load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=2, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$14load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$14load_global.6', '$x16.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$18call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$18call_function.8', '$window_size20.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$22binary_floor_divide.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_ADD(arg=None, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$22binary_floor_divide.10', '$const24.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_METHOD(arg=2, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$10load_method.4', '$x12.5', '$26binary_add.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=GET_ITER(arg=None, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$28call_method.13']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=638)
DEBUG:numba.core.byteflow:stack ['$6make_function.2', '$30get_iter.14']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=2, lineno=638)
DEBUG:numba.core.byteflow:stack ['$32call_function.15']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_GLOBAL(arg=0, lineno=639)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_METHOD(arg=3, lineno=639)
DEBUG:numba.core.byteflow:stack ['$36load_global.16']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=2, lineno=639)
DEBUG:numba.core.byteflow:stack ['$38load_method.17']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=CALL_METHOD(arg=1, lineno=639)
DEBUG:numba.core.byteflow:stack ['$38load_method.17', '$v40.18']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=639)
DEBUG:numba.core.byteflow:stack ['$42call_method.19']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$const4.1'}), (6, {'name': '$const4.1', 'code': '$const2.0', 'closure': None, 'annotations': None, 'kwdefaults': None, 'defaults': None, 'res': '$6make_function.2'}), (8, {'res': '$8load_global.3'}), (10, {'item': '$8load_global.3', 'res': '$10load_method.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$14load_global.6'}), (16, {'res': '$x16.7'}), (18, {'func': '$14load_global.6', 'args': ['$x16.7'], 'res': '$18call_function.8'}), (20, {'res': '$window_size20.9'}), (22, {'lhs': '$18call_function.8', 'rhs': '$window_size20.9', 'res': '$22binary_floor_divide.10'}), (24, {'res': '$const24.11'}), (26, {'lhs': '$22binary_floor_divide.10', 'rhs': '$const24.11', 'res': '$26binary_add.12'}), (28, {'func': '$10load_method.4', 'args': ['$x12.5', '$26binary_add.12'], 'res': '$28call_method.13'}), (30, {'value': '$28call_method.13', 'res': '$30get_iter.14'}), (32, {'func': '$6make_function.2', 'args': ['$30get_iter.14'], 'res': '$32call_function.15'}), (34, {'value': '$32call_function.15'}), (36, {'res': '$36load_global.16'}), (38, {'item': '$36load_global.16', 'res': '$38load_method.17'}), (40, {'res': '$v40.18'}), (42, {'func': '$38load_method.17', 'args': ['$v40.18'], 'res': '$42call_method.19'}), (44, {'retval': '$42call_method.19', 'castval': '$44return_value.20'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    window_size = arg(1, name=window_size)   ['window_size']
    $const2.0 = const(code, <code object <listcomp> at 0x7faab6709710, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 638>) ['$const2.0']
    $const4.1 = const(str, TsFeatures.get_stability.<locals>.<listcomp>) ['$const4.1']
    $6make_function.2 = make_function(name=$const4.1, code=<code object <listcomp> at 0x7faab6709710, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 638>, closure=None, defaults=None) ['$6make_function.2', '$const4.1']
    $8load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$8load_global.3']
    $10load_method.4 = getattr(value=$8load_global.3, attr=array_split) ['$10load_method.4', '$8load_global.3']
    $14load_global.6 = global(len: <built-in function len>) ['$14load_global.6']
    $18call_function.8 = call $14load_global.6(x, func=$14load_global.6, args=[Var(x, tsfeatures.py:638)], kws=(), vararg=None) ['$14load_global.6', '$18call_function.8', 'x']
    $22binary_floor_divide.10 = $18call_function.8 // window_size ['$18call_function.8', '$22binary_floor_divide.10', 'window_size']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_add.12 = $22binary_floor_divide.10 + $const24.11 ['$22binary_floor_divide.10', '$26binary_add.12', '$const24.11']
    $28call_method.13 = call $10load_method.4(x, $26binary_add.12, func=$10load_method.4, args=[Var(x, tsfeatures.py:638), Var($26binary_add.12, tsfeatures.py:638)], kws=(), vararg=None) ['$10load_method.4', '$26binary_add.12', '$28call_method.13', 'x']
    $30get_iter.14 = getiter(value=$28call_method.13) ['$28call_method.13', '$30get_iter.14']
    v = call $6make_function.2($30get_iter.14, func=$6make_function.2, args=[Var($30get_iter.14, tsfeatures.py:638)], kws=(), vararg=None) ['$30get_iter.14', '$6make_function.2', 'v']
    $36load_global.16 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$36load_global.16']
    $38load_method.17 = getattr(value=$36load_global.16, attr=var) ['$36load_global.16', '$38load_method.17']
    $42call_method.19 = call $38load_method.17(v, func=$38load_method.17, args=[Var(v, tsfeatures.py:638)], kws=(), vararg=None) ['$38load_method.17', '$42call_method.19', 'v']
    $44return_value.20 = cast(value=$42call_method.19) ['$42call_method.19', '$44return_value.20']
    return $44return_value.20                ['$44return_value.20']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=638)
           2	BUILD_LIST(arg=0, lineno=638)
           4	LOAD_FAST(arg=0, lineno=638)
>          6	FOR_ITER(arg=14, lineno=638)
           8	STORE_FAST(arg=1, lineno=638)
          10	LOAD_GLOBAL(arg=0, lineno=638)
          12	LOAD_METHOD(arg=1, lineno=638)
          14	LOAD_FAST(arg=1, lineno=638)
          16	CALL_METHOD(arg=1, lineno=638)
          18	LIST_APPEND(arg=2, lineno=638)
          20	JUMP_ABSOLUTE(arg=6, lineno=638)
>         22	RETURN_VALUE(arg=None, lineno=638)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=638)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=638)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=638)
DEBUG:numba.core.byteflow:stack ['$2build_list.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$2build_list.0', '$.04.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=FOR_ITER(arg=14, lineno=638)
DEBUG:numba.core.byteflow:stack ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=22, stack=('$phi6.0',), blockstack=(), npush=0), Edge(pc=8, stack=('$phi6.0', '$phi6.1', '$6for_iter.3'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=22 nstack_initial=1), State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi22.0']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=RETURN_VALUE(arg=None, lineno=638)
DEBUG:numba.core.byteflow:stack ['$phi22.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=1, lineno=638)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=638)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_METHOD(arg=1, lineno=638)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$10load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=638)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=CALL_METHOD(arg=1, lineno=638)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$x_w14.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LIST_APPEND(arg=2, lineno=638)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$16call_method.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=JUMP_ABSOLUTE(arg=6, lineno=638)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$phi8.0', '$phi8.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=2): {'$phi6.1'},
             State(pc_initial=8 nstack_initial=3): {'$phi8.2', '$phi8.0'},
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'}})
DEBUG:numba.core.byteflow:defmap: {'$phi6.0': State(pc_initial=0 nstack_initial=0),
 '$phi6.1': State(pc_initial=0 nstack_initial=0),
 '$phi8.2': State(pc_initial=6 nstack_initial=2)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.1', State(pc_initial=8 nstack_initial=3))},
             '$phi8.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi8.1': {('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi22.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
 '$phi8.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi8.2': {('$6for_iter.3', State(pc_initial=6 nstack_initial=2))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$2build_list.0',
                                                    '$phi6.1': '$.04.1',
                                                    '$phi8.0': '$2build_list.0'},
             State(pc_initial=6 nstack_initial=2): {'$phi8.2': '$6for_iter.3'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'res': '$.04.1'})), outgoing_phis={'$phi22.0': '$2build_list.0', '$phi8.0': '$2build_list.0', '$phi6.1': '$.04.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$2build_list.0', '$.04.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=6 nstack_initial=2):
AdaptBlockInfo(insts=((6, {'iterator': '$phi6.1', 'pair': '$6for_iter.2', 'indval': '$6for_iter.3', 'pred': '$6for_iter.4'}),), outgoing_phis={'$phi8.2': '$6for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi6.0',), 8: ('$phi6.0', '$phi6.1', '$6for_iter.3')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=8 nstack_initial=3):
AdaptBlockInfo(insts=((8, {'value': '$phi8.2'}), (10, {'res': '$10load_global.3'}), (12, {'item': '$10load_global.3', 'res': '$12load_method.4'}), (14, {'res': '$x_w14.5'}), (16, {'func': '$12load_method.4', 'args': ['$x_w14.5'], 'res': '$16call_method.6'}), (18, {'target': '$phi8.0', 'value': '$16call_method.6', 'appendvar': '$18list_append.7', 'res': '$18list_append.8'}), (20, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$phi8.0', '$phi8.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'retval': '$phi22.0', 'castval': '$22return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    implicit0 = arg(0, name=implicit0)       ['implicit0']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    $phi22.0 = $2build_list.0                ['$2build_list.0', '$phi22.0']
    $phi8.0 = $2build_list.0                 ['$2build_list.0', '$phi8.0']
    $phi6.1 = implicit0                      ['$phi6.1', 'implicit0']
    jump 6                                   []
label 6:
    $6for_iter.2 = iternext(value=$phi6.1)   ['$6for_iter.2', '$phi6.1']
    $6for_iter.3 = pair_first(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.3']
    $6for_iter.4 = pair_second(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.4']
    $phi8.2 = $6for_iter.3                   ['$6for_iter.3', '$phi8.2']
    branch $6for_iter.4, 8, 22               ['$6for_iter.4']
label 8:
    x_w = $phi8.2                            ['$phi8.2', 'x_w']
    $10load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$10load_global.3']
    $12load_method.4 = getattr(value=$10load_global.3, attr=mean) ['$10load_global.3', '$12load_method.4']
    $16call_method.6 = call $12load_method.4(x_w, func=$12load_method.4, args=[Var(x_w, tsfeatures.py:638)], kws=(), vararg=None) ['$12load_method.4', '$16call_method.6', 'x_w']
    $18list_append.7 = getattr(value=$phi8.0, attr=append) ['$18list_append.7', '$phi8.0']
    $18list_append.8 = call $18list_append.7($16call_method.6, func=$18list_append.7, args=(Var($16call_method.6, tsfeatures.py:638),), kws=(), vararg=None) ['$16call_method.6', '$18list_append.7', '$18list_append.8']
    jump 6                                   []
label 22:
    $22return_value.1 = cast(value=$phi22.0) ['$22return_value.1', '$phi22.0']
    return $22return_value.1                 ['$22return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24131e20>
DEBUG:numba.core.ssa:on stmt: implicit0 = arg(0, name=implicit0)
DEBUG:numba.core.ssa:on stmt: $2build_list.0 = build_list(items=[])
DEBUG:numba.core.ssa:on stmt: $phi22.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: $phi8.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: $phi6.1 = implicit0
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 6
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24131e20>
DEBUG:numba.core.ssa:on stmt: $6for_iter.2 = iternext(value=$phi6.1)
DEBUG:numba.core.ssa:on stmt: $6for_iter.3 = pair_first(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $6for_iter.4 = pair_second(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi8.2 = $6for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $6for_iter.4, 8, 22
DEBUG:numba.core.ssa:==== SSA block analysis pass on 8
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24131e20>
DEBUG:numba.core.ssa:on stmt: x_w = $phi8.2
DEBUG:numba.core.ssa:on stmt: $10load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $12load_method.4 = getattr(value=$10load_global.3, attr=mean)
DEBUG:numba.core.ssa:on stmt: $16call_method.6 = call $12load_method.4(x_w, func=$12load_method.4, args=[Var(x_w, tsfeatures.py:638)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $18list_append.7 = getattr(value=$phi8.0, attr=append)
DEBUG:numba.core.ssa:on stmt: $18list_append.8 = call $18list_append.7($16call_method.6, func=$18list_append.7, args=(Var($16call_method.6, tsfeatures.py:638),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24131e20>
DEBUG:numba.core.ssa:on stmt: $22return_value.1 = cast(value=$phi22.0)
DEBUG:numba.core.ssa:on stmt: return $22return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x7faa24131460>],
             '$12load_method.4': [<numba.core.ir.Assign object at 0x7faa241315e0>],
             '$16call_method.6': [<numba.core.ir.Assign object at 0x7faa241318b0>],
             '$18list_append.7': [<numba.core.ir.Assign object at 0x7faa24131a60>],
             '$18list_append.8': [<numba.core.ir.Assign object at 0x7fa9c42ef6d0>],
             '$22return_value.1': [<numba.core.ir.Assign object at 0x7faa24131bb0>],
             '$2build_list.0': [<numba.core.ir.Assign object at 0x7faa241137f0>],
             '$6for_iter.2': [<numba.core.ir.Assign object at 0x7faa24113dc0>],
             '$6for_iter.3': [<numba.core.ir.Assign object at 0x7faa24113ee0>],
             '$6for_iter.4': [<numba.core.ir.Assign object at 0x7faa24131040>],
             '$phi22.0': [<numba.core.ir.Assign object at 0x7faa24113520>],
             '$phi6.1': [<numba.core.ir.Assign object at 0x7faa24113a90>],
             '$phi8.0': [<numba.core.ir.Assign object at 0x7faa241139d0>],
             '$phi8.2': [<numba.core.ir.Assign object at 0x7faa24113cd0>],
             'implicit0': [<numba.core.ir.Assign object at 0x7faa241132e0>],
             'x_w': [<numba.core.ir.Assign object at 0x7faa241312e0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=764)
           2	LOAD_GLOBAL(arg=0, lineno=764)
           4	LOAD_FAST(arg=0, lineno=764)
           6	CALL_FUNCTION(arg=1, lineno=764)
           8	LOAD_FAST(arg=1, lineno=764)
          10	COMPARE_OP(arg=1, lineno=764)
          12	POP_JUMP_IF_FALSE(arg=34, lineno=764)
          14	LOAD_CONST(arg=1, lineno=765)
          16	STORE_FAST(arg=2, lineno=765)
          18	LOAD_GLOBAL(arg=1, lineno=766)
          20	LOAD_METHOD(arg=2, lineno=766)
          22	LOAD_FAST(arg=2, lineno=766)
          24	CALL_METHOD(arg=1, lineno=766)
          26	POP_TOP(arg=None, lineno=766)
          28	LOAD_GLOBAL(arg=3, lineno=767)
          30	LOAD_ATTR(arg=4, lineno=767)
          32	RETURN_VALUE(arg=None, lineno=767)
>         34	LOAD_CONST(arg=2, lineno=769)
          36	STORE_FAST(arg=3, lineno=769)
          38	LOAD_GLOBAL(arg=5, lineno=770)
          40	LOAD_GLOBAL(arg=0, lineno=770)
          42	LOAD_FAST(arg=0, lineno=770)
          44	CALL_FUNCTION(arg=1, lineno=770)
          46	LOAD_FAST(arg=1, lineno=770)
          48	BINARY_TRUE_DIVIDE(arg=None, lineno=770)
          50	CALL_FUNCTION(arg=1, lineno=770)
          52	STORE_FAST(arg=4, lineno=770)
          54	LOAD_GLOBAL(arg=6, lineno=771)
          56	LOAD_CONST(arg=2, lineno=771)
          58	LOAD_GLOBAL(arg=0, lineno=771)
          60	LOAD_FAST(arg=0, lineno=771)
          62	CALL_FUNCTION(arg=1, lineno=771)
          64	LOAD_FAST(arg=4, lineno=771)
          66	CALL_FUNCTION(arg=3, lineno=771)
          68	GET_ITER(arg=None, lineno=771)
>         70	FOR_ITER(arg=52, lineno=771)
          72	STORE_FAST(arg=5, lineno=771)
          74	LOAD_GLOBAL(arg=3, lineno=772)
          76	LOAD_METHOD(arg=7, lineno=772)
          78	LOAD_CONST(arg=3, lineno=773)
          80	LOAD_CONST(arg=4, lineno=773)
          82	MAKE_FUNCTION(arg=0, lineno=773)
          84	LOAD_GLOBAL(arg=8, lineno=773)
          86	LOAD_FAST(arg=0, lineno=773)
          88	LOAD_FAST(arg=5, lineno=773)
          90	LOAD_FAST(arg=5, lineno=773)
          92	LOAD_FAST(arg=4, lineno=773)
          94	BINARY_ADD(arg=None, lineno=773)
          96	BUILD_SLICE(arg=2, lineno=773)
          98	BINARY_SUBSCR(arg=None, lineno=773)
         100	CALL_FUNCTION(arg=1, lineno=773)
         102	GET_ITER(arg=None, lineno=773)
         104	CALL_FUNCTION(arg=1, lineno=773)
         106	CALL_METHOD(arg=1, lineno=772)
         108	STORE_FAST(arg=6, lineno=772)
         110	LOAD_FAST(arg=6, lineno=775)
         112	LOAD_FAST(arg=3, lineno=775)
         114	COMPARE_OP(arg=4, lineno=775)
         116	POP_JUMP_IF_FALSE(arg=70, lineno=775)
         118	LOAD_FAST(arg=6, lineno=776)
         120	STORE_FAST(arg=3, lineno=776)
         122	JUMP_ABSOLUTE(arg=70, lineno=776)
>        124	LOAD_FAST(arg=3, lineno=777)
         126	RETURN_VALUE(arg=None, lineno=777)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=764)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=764)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=764)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=764)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=764)
DEBUG:numba.core.byteflow:stack ['$6call_function.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=COMPARE_OP(arg=1, lineno=764)
DEBUG:numba.core.byteflow:stack ['$6call_function.2', '$nbins8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=POP_JUMP_IF_FALSE(arg=34, lineno=764)
DEBUG:numba.core.byteflow:stack ['$10compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0), Edge(pc=34, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=34 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=765)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=2, lineno=765)
DEBUG:numba.core.byteflow:stack ['$const14.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=766)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_METHOD(arg=2, lineno=766)
DEBUG:numba.core.byteflow:stack ['$18load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=766)
DEBUG:numba.core.byteflow:stack ['$20load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=766)
DEBUG:numba.core.byteflow:stack ['$20load_method.2', '$msg22.3']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=POP_TOP(arg=None, lineno=766)
DEBUG:numba.core.byteflow:stack ['$24call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_GLOBAL(arg=3, lineno=767)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_ATTR(arg=4, lineno=767)
DEBUG:numba.core.byteflow:stack ['$28load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=767)
DEBUG:numba.core.byteflow:stack ['$30load_attr.6']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=769)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=STORE_FAST(arg=3, lineno=769)
DEBUG:numba.core.byteflow:stack ['$const34.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_GLOBAL(arg=5, lineno=770)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_GLOBAL(arg=0, lineno=770)
DEBUG:numba.core.byteflow:stack ['$38load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=770)
DEBUG:numba.core.byteflow:stack ['$38load_global.1', '$40load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=CALL_FUNCTION(arg=1, lineno=770)
DEBUG:numba.core.byteflow:stack ['$38load_global.1', '$40load_global.2', '$x42.3']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=1, lineno=770)
DEBUG:numba.core.byteflow:stack ['$38load_global.1', '$44call_function.4']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=770)
DEBUG:numba.core.byteflow:stack ['$38load_global.1', '$44call_function.4', '$nbins46.5']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=CALL_FUNCTION(arg=1, lineno=770)
DEBUG:numba.core.byteflow:stack ['$38load_global.1', '$48binary_true_divide.6']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=STORE_FAST(arg=4, lineno=770)
DEBUG:numba.core.byteflow:stack ['$50call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_GLOBAL(arg=6, lineno=771)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=771)
DEBUG:numba.core.byteflow:stack ['$54load_global.8']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=771)
DEBUG:numba.core.byteflow:stack ['$54load_global.8', '$const56.9']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=0, lineno=771)
DEBUG:numba.core.byteflow:stack ['$54load_global.8', '$const56.9', '$58load_global.10']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=CALL_FUNCTION(arg=1, lineno=771)
DEBUG:numba.core.byteflow:stack ['$54load_global.8', '$const56.9', '$58load_global.10', '$x60.11']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=771)
DEBUG:numba.core.byteflow:stack ['$54load_global.8', '$const56.9', '$62call_function.12']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=CALL_FUNCTION(arg=3, lineno=771)
DEBUG:numba.core.byteflow:stack ['$54load_global.8', '$const56.9', '$62call_function.12', '$window_size64.13']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=GET_ITER(arg=None, lineno=771)
DEBUG:numba.core.byteflow:stack ['$66call_function.14']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=70, stack=('$68get_iter.15',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=70 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi70.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=FOR_ITER(arg=52, lineno=771)
DEBUG:numba.core.byteflow:stack ['$phi70.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=('$phi70.0', '$70for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=72 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=124, inst=LOAD_FAST(arg=3, lineno=777)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=777)
DEBUG:numba.core.byteflow:stack ['$max_run_length124.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=72 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi72.0', '$phi72.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=STORE_FAST(arg=5, lineno=771)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$phi72.1']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_GLOBAL(arg=3, lineno=772)
DEBUG:numba.core.byteflow:stack ['$phi72.0']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_METHOD(arg=7, lineno=772)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$74load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_CONST(arg=3, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_CONST(arg=4, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$const78.4']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=MAKE_FUNCTION(arg=0, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$const78.4', '$const80.5']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_GLOBAL(arg=8, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_FAST(arg=0, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6', '$84load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_FAST(arg=5, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6', '$84load_global.7', '$x86.8']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=5, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6', '$84load_global.7', '$x86.8', '$i88.9']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_FAST(arg=4, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6', '$84load_global.7', '$x86.8', '$i88.9', '$i90.10']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=BINARY_ADD(arg=None, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6', '$84load_global.7', '$x86.8', '$i88.9', '$i90.10', '$window_size92.11']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=BUILD_SLICE(arg=2, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6', '$84load_global.7', '$x86.8', '$i88.9', '$94binary_add.12']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=BINARY_SUBSCR(arg=None, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6', '$84load_global.7', '$x86.8', '$96build_slice.14']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=CALL_FUNCTION(arg=1, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6', '$84load_global.7', '$98binary_subscr.15']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=GET_ITER(arg=None, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6', '$100call_function.16']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=CALL_FUNCTION(arg=1, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$82make_function.6', '$102get_iter.17']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=CALL_METHOD(arg=1, lineno=772)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$76load_method.3', '$104call_function.18']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=STORE_FAST(arg=6, lineno=772)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$106call_method.19']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_FAST(arg=6, lineno=775)
DEBUG:numba.core.byteflow:stack ['$phi72.0']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_FAST(arg=3, lineno=775)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$run_length110.20']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=COMPARE_OP(arg=4, lineno=775)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$run_length110.20', '$max_run_length112.21']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=POP_JUMP_IF_FALSE(arg=70, lineno=775)
DEBUG:numba.core.byteflow:stack ['$phi72.0', '$114compare_op.22']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=118, stack=('$phi72.0',), blockstack=(), npush=0), Edge(pc=70, stack=('$phi72.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=118 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi118.0']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=LOAD_FAST(arg=6, lineno=776)
DEBUG:numba.core.byteflow:stack ['$phi118.0']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=STORE_FAST(arg=3, lineno=776)
DEBUG:numba.core.byteflow:stack ['$phi118.0', '$run_length118.1']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=JUMP_ABSOLUTE(arg=70, lineno=776)
DEBUG:numba.core.byteflow:stack ['$phi118.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=70, stack=('$phi118.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=70 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): {'$phi70.0'},
             State(pc_initial=72 nstack_initial=2): {'$phi72.1'},
             State(pc_initial=118 nstack_initial=1): set(),
             State(pc_initial=124 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi70.0': State(pc_initial=34 nstack_initial=0),
 '$phi72.1': State(pc_initial=70 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$phi72.0', State(pc_initial=72 nstack_initial=2))},
             '$phi70.0': {('$68get_iter.15',
                           State(pc_initial=34 nstack_initial=0)),
                          ('$phi118.0', State(pc_initial=118 nstack_initial=1)),
                          ('$phi72.0', State(pc_initial=72 nstack_initial=2))},
             '$phi72.0': {('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi72.1': {('$70for_iter.2',
                           State(pc_initial=70 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi70.0': {('$68get_iter.15',
                           State(pc_initial=34 nstack_initial=0)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi72.0': {('$68get_iter.15',
                           State(pc_initial=34 nstack_initial=0))},
             '$phi72.1': {('$70for_iter.2',
                           State(pc_initial=70 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$68get_iter.15',
                            State(pc_initial=34 nstack_initial=0))},
             '$phi70.0': {('$68get_iter.15',
                           State(pc_initial=34 nstack_initial=0))},
             '$phi72.0': {('$68get_iter.15',
                           State(pc_initial=34 nstack_initial=0))},
             '$phi72.1': {('$70for_iter.2',
                           State(pc_initial=70 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi118.0': {('$68get_iter.15',
                            State(pc_initial=34 nstack_initial=0))},
             '$phi70.0': {('$68get_iter.15',
                           State(pc_initial=34 nstack_initial=0))},
             '$phi72.0': {('$68get_iter.15',
                           State(pc_initial=34 nstack_initial=0))},
             '$phi72.1': {('$70for_iter.2',
                           State(pc_initial=70 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi70.0': {('$68get_iter.15', State(pc_initial=34 nstack_initial=0))},
 '$phi72.1': {('$70for_iter.2', State(pc_initial=70 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=34 nstack_initial=0): {'$phi70.0': '$68get_iter.15'},
             State(pc_initial=70 nstack_initial=1): {'$phi72.1': '$70for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$nbins8.3'}), (10, {'lhs': '$6call_function.2', 'rhs': '$nbins8.3', 'res': '$10compare_op.4'}), (12, {'pred': '$10compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: (), 34: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$18load_global.1'}), (20, {'item': '$18load_global.1', 'res': '$20load_method.2'}), (22, {'res': '$msg22.3'}), (24, {'func': '$20load_method.2', 'args': ['$msg22.3'], 'res': '$24call_method.4'}), (28, {'res': '$28load_global.5'}), (30, {'item': '$28load_global.5', 'res': '$30load_attr.6'}), (32, {'retval': '$30load_attr.6', 'castval': '$32return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'value': '$const34.0'}), (38, {'res': '$38load_global.1'}), (40, {'res': '$40load_global.2'}), (42, {'res': '$x42.3'}), (44, {'func': '$40load_global.2', 'args': ['$x42.3'], 'res': '$44call_function.4'}), (46, {'res': '$nbins46.5'}), (48, {'lhs': '$44call_function.4', 'rhs': '$nbins46.5', 'res': '$48binary_true_divide.6'}), (50, {'func': '$38load_global.1', 'args': ['$48binary_true_divide.6'], 'res': '$50call_function.7'}), (52, {'value': '$50call_function.7'}), (54, {'res': '$54load_global.8'}), (56, {'res': '$const56.9'}), (58, {'res': '$58load_global.10'}), (60, {'res': '$x60.11'}), (62, {'func': '$58load_global.10', 'args': ['$x60.11'], 'res': '$62call_function.12'}), (64, {'res': '$window_size64.13'}), (66, {'func': '$54load_global.8', 'args': ['$const56.9', '$62call_function.12', '$window_size64.13'], 'res': '$66call_function.14'}), (68, {'value': '$66call_function.14', 'res': '$68get_iter.15'})), outgoing_phis={'$phi70.0': '$68get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: ('$68get_iter.15',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((70, {'iterator': '$phi70.0', 'pair': '$70for_iter.1', 'indval': '$70for_iter.2', 'pred': '$70for_iter.3'}),), outgoing_phis={'$phi72.1': '$70for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 72: ('$phi70.0', '$70for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=72 nstack_initial=2):
AdaptBlockInfo(insts=((72, {'value': '$phi72.1'}), (74, {'res': '$74load_global.2'}), (76, {'item': '$74load_global.2', 'res': '$76load_method.3'}), (78, {'res': '$const78.4'}), (80, {'res': '$const80.5'}), (82, {'name': '$const80.5', 'code': '$const78.4', 'closure': None, 'annotations': None, 'kwdefaults': None, 'defaults': None, 'res': '$82make_function.6'}), (84, {'res': '$84load_global.7'}), (86, {'res': '$x86.8'}), (88, {'res': '$i88.9'}), (90, {'res': '$i90.10'}), (92, {'res': '$window_size92.11'}), (94, {'lhs': '$i90.10', 'rhs': '$window_size92.11', 'res': '$94binary_add.12'}), (96, {'start': '$i88.9', 'stop': '$94binary_add.12', 'step': None, 'res': '$96build_slice.14', 'slicevar': '$96build_slice.13'}), (98, {'index': '$96build_slice.14', 'target': '$x86.8', 'res': '$98binary_subscr.15'}), (100, {'func': '$84load_global.7', 'args': ['$98binary_subscr.15'], 'res': '$100call_function.16'}), (102, {'value': '$100call_function.16', 'res': '$102get_iter.17'}), (104, {'func': '$82make_function.6', 'args': ['$102get_iter.17'], 'res': '$104call_function.18'}), (106, {'func': '$76load_method.3', 'args': ['$104call_function.18'], 'res': '$106call_method.19'}), (108, {'value': '$106call_method.19'}), (110, {'res': '$run_length110.20'}), (112, {'res': '$max_run_length112.21'}), (114, {'lhs': '$run_length110.20', 'rhs': '$max_run_length112.21', 'res': '$114compare_op.22'}), (116, {'pred': '$114compare_op.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={118: ('$phi72.0',), 70: ('$phi72.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=118 nstack_initial=1):
AdaptBlockInfo(insts=((118, {'res': '$run_length118.1'}), (120, {'value': '$run_length118.1'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: ('$phi118.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$max_run_length124.0'}), (126, {'retval': '$max_run_length124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    nbins = arg(1, name=nbins)               ['nbins']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, tsfeatures.py:764)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'x']
    $10compare_op.4 = $6call_function.2 <= nbins ['$10compare_op.4', '$6call_function.2', 'nbins']
    bool12 = global(bool: <class 'bool'>)    ['bool12']
    $12pred = call bool12($10compare_op.4, func=bool12, args=(Var($10compare_op.4, tsfeatures.py:764),), kws=(), vararg=None) ['$10compare_op.4', '$12pred', 'bool12']
    branch $12pred, 14, 34                   ['$12pred']
label 14:
    msg = const(str, Length of time series is shorter than nbins, unable to calculate flat spots feature!) ['msg']
    $18load_global.1 = global(logging: <module 'logging' from '/usr/lib/python3.8/logging/__init__.py'>) ['$18load_global.1']
    $20load_method.2 = getattr(value=$18load_global.1, attr=error) ['$18load_global.1', '$20load_method.2']
    $24call_method.4 = call $20load_method.2(msg, func=$20load_method.2, args=[Var(msg, tsfeatures.py:765)], kws=(), vararg=None) ['$20load_method.2', '$24call_method.4', 'msg']
    $28load_global.5 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$28load_global.5']
    $30load_attr.6 = getattr(value=$28load_global.5, attr=nan) ['$28load_global.5', '$30load_attr.6']
    $32return_value.7 = cast(value=$30load_attr.6) ['$30load_attr.6', '$32return_value.7']
    return $32return_value.7                 ['$32return_value.7']
label 34:
    max_run_length = const(int, 0)           ['max_run_length']
    $38load_global.1 = global(int: <class 'int'>) ['$38load_global.1']
    $40load_global.2 = global(len: <built-in function len>) ['$40load_global.2']
    $44call_function.4 = call $40load_global.2(x, func=$40load_global.2, args=[Var(x, tsfeatures.py:764)], kws=(), vararg=None) ['$40load_global.2', '$44call_function.4', 'x']
    $48binary_true_divide.6 = $44call_function.4 / nbins ['$44call_function.4', '$48binary_true_divide.6', 'nbins']
    window_size = call $38load_global.1($48binary_true_divide.6, func=$38load_global.1, args=[Var($48binary_true_divide.6, tsfeatures.py:770)], kws=(), vararg=None) ['$38load_global.1', '$48binary_true_divide.6', 'window_size']
    $54load_global.8 = global(range: <class 'range'>) ['$54load_global.8']
    $const56.9 = const(int, 0)               ['$const56.9']
    $58load_global.10 = global(len: <built-in function len>) ['$58load_global.10']
    $62call_function.12 = call $58load_global.10(x, func=$58load_global.10, args=[Var(x, tsfeatures.py:764)], kws=(), vararg=None) ['$58load_global.10', '$62call_function.12', 'x']
    $66call_function.14 = call $54load_global.8($const56.9, $62call_function.12, window_size, func=$54load_global.8, args=[Var($const56.9, tsfeatures.py:771), Var($62call_function.12, tsfeatures.py:771), Var(window_size, tsfeatures.py:770)], kws=(), vararg=None) ['$54load_global.8', '$62call_function.12', '$66call_function.14', '$const56.9', 'window_size']
    $68get_iter.15 = getiter(value=$66call_function.14) ['$66call_function.14', '$68get_iter.15']
    $phi70.0 = $68get_iter.15                ['$68get_iter.15', '$phi70.0']
    jump 70                                  []
label 70:
    $70for_iter.1 = iternext(value=$phi70.0) ['$70for_iter.1', '$phi70.0']
    $70for_iter.2 = pair_first(value=$70for_iter.1) ['$70for_iter.1', '$70for_iter.2']
    $70for_iter.3 = pair_second(value=$70for_iter.1) ['$70for_iter.1', '$70for_iter.3']
    $phi72.1 = $70for_iter.2                 ['$70for_iter.2', '$phi72.1']
    branch $70for_iter.3, 72, 124            ['$70for_iter.3']
label 72:
    i = $phi72.1                             ['$phi72.1', 'i']
    $74load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$74load_global.2']
    $76load_method.3 = getattr(value=$74load_global.2, attr=max) ['$74load_global.2', '$76load_method.3']
    $const78.4 = const(code, <code object <listcomp> at 0x7faab6709a80, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 773>) ['$const78.4']
    $const80.5 = const(str, TsFeatures.get_flat_spots.<locals>.<listcomp>) ['$const80.5']
    $82make_function.6 = make_function(name=$const80.5, code=<code object <listcomp> at 0x7faab6709a80, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 773>, closure=None, defaults=None) ['$82make_function.6', '$const80.5']
    $84load_global.7 = global(groupby: <class 'itertools.groupby'>) ['$84load_global.7']
    $94binary_add.12 = i + window_size       ['$94binary_add.12', 'i', 'window_size']
    $96build_slice.13 = global(slice: <class 'slice'>) ['$96build_slice.13']
    $96build_slice.14 = call $96build_slice.13(i, $94binary_add.12, func=$96build_slice.13, args=(Var(i, tsfeatures.py:771), Var($94binary_add.12, tsfeatures.py:773)), kws=(), vararg=None) ['$94binary_add.12', '$96build_slice.13', '$96build_slice.14', 'i']
    $98binary_subscr.15 = getitem(value=x, index=$96build_slice.14, fn=<built-in function getitem>) ['$96build_slice.14', '$98binary_subscr.15', 'x']
    $100call_function.16 = call $84load_global.7($98binary_subscr.15, func=$84load_global.7, args=[Var($98binary_subscr.15, tsfeatures.py:773)], kws=(), vararg=None) ['$100call_function.16', '$84load_global.7', '$98binary_subscr.15']
    $102get_iter.17 = getiter(value=$100call_function.16) ['$100call_function.16', '$102get_iter.17']
    $104call_function.18 = call $82make_function.6($102get_iter.17, func=$82make_function.6, args=[Var($102get_iter.17, tsfeatures.py:773)], kws=(), vararg=None) ['$102get_iter.17', '$104call_function.18', '$82make_function.6']
    run_length = call $76load_method.3($104call_function.18, func=$76load_method.3, args=[Var($104call_function.18, tsfeatures.py:773)], kws=(), vararg=None) ['$104call_function.18', '$76load_method.3', 'run_length']
    $114compare_op.22 = run_length > max_run_length ['$114compare_op.22', 'max_run_length', 'run_length']
    bool116 = global(bool: <class 'bool'>)   ['bool116']
    $116pred = call bool116($114compare_op.22, func=bool116, args=(Var($114compare_op.22, tsfeatures.py:775),), kws=(), vararg=None) ['$114compare_op.22', '$116pred', 'bool116']
    branch $116pred, 118, 70                 ['$116pred']
label 118:
    max_run_length = run_length              ['max_run_length', 'run_length']
    jump 70                                  []
label 124:
    $126return_value.1 = cast(value=max_run_length) ['$126return_value.1', 'max_run_length']
    return $126return_value.1                ['$126return_value.1']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.transforms:top-level loop: Loop(entries={34}, exits={125}, header=70, body={72, 118, 124, 70})
DEBUG:numba.core.transforms:same_exit_point=True ({126})
DEBUG:numba.core.transforms:one_entry=True
DEBUG:numba.core.transforms:no yield
DEBUG:numba.core.transforms:add candidate: Loop(entries={34}, exits={125}, header=70, body={72, 118, 124, 70})
DEBUG:numba.core.transforms:loop lifting this IR with 1 candidates:
label 0:
    x = arg(0, name=x)                       ['x']
    nbins = arg(1, name=nbins)               ['nbins']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, tsfeatures.py:764)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'x']
    $10compare_op.4 = $6call_function.2 <= nbins ['$10compare_op.4', '$6call_function.2', 'nbins']
    bool12 = global(bool: <class 'bool'>)    ['bool12']
    $12pred = call bool12($10compare_op.4, func=bool12, args=(Var($10compare_op.4, tsfeatures.py:764),), kws=(), vararg=None) ['$10compare_op.4', '$12pred', 'bool12']
    branch $12pred, 14, 34                   ['$12pred']
label 14:
    msg = const(str, Length of time series is shorter than nbins, unable to calculate flat spots feature!) ['msg']
    $18load_global.1 = global(logging: <module 'logging' from '/usr/lib/python3.8/logging/__init__.py'>) ['$18load_global.1']
    $20load_method.2 = getattr(value=$18load_global.1, attr=error) ['$18load_global.1', '$20load_method.2']
    $24call_method.4 = call $20load_method.2(msg, func=$20load_method.2, args=[Var(msg, tsfeatures.py:765)], kws=(), vararg=None) ['$20load_method.2', '$24call_method.4', 'msg']
    $28load_global.5 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$28load_global.5']
    $30load_attr.6 = getattr(value=$28load_global.5, attr=nan) ['$28load_global.5', '$30load_attr.6']
    $32return_value.7 = cast(value=$30load_attr.6) ['$30load_attr.6', '$32return_value.7']
    return $32return_value.7                 ['$32return_value.7']
label 34:
    max_run_length = const(int, 0)           ['max_run_length']
    $38load_global.1 = global(int: <class 'int'>) ['$38load_global.1']
    $40load_global.2 = global(len: <built-in function len>) ['$40load_global.2']
    $44call_function.4 = call $40load_global.2(x, func=$40load_global.2, args=[Var(x, tsfeatures.py:764)], kws=(), vararg=None) ['$40load_global.2', '$44call_function.4', 'x']
    $48binary_true_divide.6 = $44call_function.4 / nbins ['$44call_function.4', '$48binary_true_divide.6', 'nbins']
    window_size = call $38load_global.1($48binary_true_divide.6, func=$38load_global.1, args=[Var($48binary_true_divide.6, tsfeatures.py:770)], kws=(), vararg=None) ['$38load_global.1', '$48binary_true_divide.6', 'window_size']
    $54load_global.8 = global(range: <class 'range'>) ['$54load_global.8']
    $const56.9 = const(int, 0)               ['$const56.9']
    $58load_global.10 = global(len: <built-in function len>) ['$58load_global.10']
    $62call_function.12 = call $58load_global.10(x, func=$58load_global.10, args=[Var(x, tsfeatures.py:764)], kws=(), vararg=None) ['$58load_global.10', '$62call_function.12', 'x']
    $66call_function.14 = call $54load_global.8($const56.9, $62call_function.12, window_size, func=$54load_global.8, args=[Var($const56.9, tsfeatures.py:771), Var($62call_function.12, tsfeatures.py:771), Var(window_size, tsfeatures.py:770)], kws=(), vararg=None) ['$54load_global.8', '$62call_function.12', '$66call_function.14', '$const56.9', 'window_size']
    $68get_iter.15 = getiter(value=$66call_function.14) ['$66call_function.14', '$68get_iter.15']
    $phi70.0 = $68get_iter.15                ['$68get_iter.15', '$phi70.0']
    jump 70                                  []
label 70:
    $70for_iter.1 = iternext(value=$phi70.0) ['$70for_iter.1', '$phi70.0']
    $70for_iter.2 = pair_first(value=$70for_iter.1) ['$70for_iter.1', '$70for_iter.2']
    $70for_iter.3 = pair_second(value=$70for_iter.1) ['$70for_iter.1', '$70for_iter.3']
    $phi72.1 = $70for_iter.2                 ['$70for_iter.2', '$phi72.1']
    branch $70for_iter.3, 72, 125            ['$70for_iter.3']
label 72:
    i = $phi72.1                             ['$phi72.1', 'i']
    $74load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$74load_global.2']
    $76load_method.3 = getattr(value=$74load_global.2, attr=max) ['$74load_global.2', '$76load_method.3']
    $const78.4 = const(code, <code object <listcomp> at 0x7faab6709a80, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 773>) ['$const78.4']
    $const80.5 = const(str, TsFeatures.get_flat_spots.<locals>.<listcomp>) ['$const80.5']
    $82make_function.6 = make_function(name=$const80.5, code=<code object <listcomp> at 0x7faab6709a80, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 773>, closure=None, defaults=None) ['$82make_function.6', '$const80.5']
    $84load_global.7 = global(groupby: <class 'itertools.groupby'>) ['$84load_global.7']
    $94binary_add.12 = i + window_size       ['$94binary_add.12', 'i', 'window_size']
    $96build_slice.13 = global(slice: <class 'slice'>) ['$96build_slice.13']
    $96build_slice.14 = call $96build_slice.13(i, $94binary_add.12, func=$96build_slice.13, args=(Var(i, tsfeatures.py:771), Var($94binary_add.12, tsfeatures.py:773)), kws=(), vararg=None) ['$94binary_add.12', '$96build_slice.13', '$96build_slice.14', 'i']
    $98binary_subscr.15 = getitem(value=x, index=$96build_slice.14, fn=<built-in function getitem>) ['$96build_slice.14', '$98binary_subscr.15', 'x']
    $100call_function.16 = call $84load_global.7($98binary_subscr.15, func=$84load_global.7, args=[Var($98binary_subscr.15, tsfeatures.py:773)], kws=(), vararg=None) ['$100call_function.16', '$84load_global.7', '$98binary_subscr.15']
    $102get_iter.17 = getiter(value=$100call_function.16) ['$100call_function.16', '$102get_iter.17']
    $104call_function.18 = call $82make_function.6($102get_iter.17, func=$82make_function.6, args=[Var($102get_iter.17, tsfeatures.py:773)], kws=(), vararg=None) ['$102get_iter.17', '$104call_function.18', '$82make_function.6']
    run_length = call $76load_method.3($104call_function.18, func=$76load_method.3, args=[Var($104call_function.18, tsfeatures.py:773)], kws=(), vararg=None) ['$104call_function.18', '$76load_method.3', 'run_length']
    $114compare_op.22 = run_length > max_run_length ['$114compare_op.22', 'max_run_length', 'run_length']
    bool116 = global(bool: <class 'bool'>)   ['bool116']
    $116pred = call bool116($114compare_op.22, func=bool116, args=(Var($114compare_op.22, tsfeatures.py:775),), kws=(), vararg=None) ['$114compare_op.22', '$116pred', 'bool116']
    branch $116pred, 118, 124                ['$116pred']
label 118:
    max_run_length = run_length              ['max_run_length', 'run_length']
    jump 124                                 []
label 124:
    jump 70                                  []
label 125:
    jump 126                                 []
label 126:
    $126return_value.1 = cast(value=max_run_length) ['$126return_value.1', 'max_run_length']
    return $126return_value.1                ['$126return_value.1']

DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=773)
           2	BUILD_LIST(arg=0, lineno=773)
           4	LOAD_FAST(arg=0, lineno=773)
>          6	FOR_ITER(arg=20, lineno=773)
           8	UNPACK_SEQUENCE(arg=2, lineno=773)
          10	STORE_FAST(arg=1, lineno=773)
          12	STORE_FAST(arg=2, lineno=773)
          14	LOAD_GLOBAL(arg=0, lineno=773)
          16	LOAD_GLOBAL(arg=1, lineno=773)
          18	LOAD_FAST(arg=2, lineno=773)
          20	CALL_FUNCTION(arg=1, lineno=773)
          22	CALL_FUNCTION(arg=1, lineno=773)
          24	LIST_APPEND(arg=2, lineno=773)
          26	JUMP_ABSOLUTE(arg=6, lineno=773)
>         28	RETURN_VALUE(arg=None, lineno=773)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=773)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=773)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=773)
DEBUG:numba.core.byteflow:stack ['$2build_list.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$2build_list.0', '$.04.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=FOR_ITER(arg=20, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=28, stack=('$phi6.0',), blockstack=(), npush=0), Edge(pc=8, stack=('$phi6.0', '$phi6.1', '$6for_iter.3'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi28.0']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=RETURN_VALUE(arg=None, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi28.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=UNPACK_SEQUENCE(arg=2, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=STORE_FAST(arg=1, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$8unpack_sequence.4', '$8unpack_sequence.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=STORE_FAST(arg=2, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$8unpack_sequence.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14load_global.6', '$16load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14load_global.6', '$16load_global.7', '$v18.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$14load_global.6', '$20call_function.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LIST_APPEND(arg=2, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$22call_function.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=JUMP_ABSOLUTE(arg=6, lineno=773)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$phi8.0', '$phi8.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=2): {'$phi6.1'},
             State(pc_initial=8 nstack_initial=3): {'$phi8.2', '$phi8.0'},
             State(pc_initial=28 nstack_initial=1): {'$phi28.0'}})
DEBUG:numba.core.byteflow:defmap: {'$phi6.0': State(pc_initial=0 nstack_initial=0),
 '$phi6.1': State(pc_initial=0 nstack_initial=0),
 '$phi8.2': State(pc_initial=6 nstack_initial=2)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.1', State(pc_initial=8 nstack_initial=3))},
             '$phi8.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi8.1': {('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi28.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
 '$phi8.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi8.2': {('$6for_iter.3', State(pc_initial=6 nstack_initial=2))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi28.0': '$2build_list.0',
                                                    '$phi6.1': '$.04.1',
                                                    '$phi8.0': '$2build_list.0'},
             State(pc_initial=6 nstack_initial=2): {'$phi8.2': '$6for_iter.3'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'res': '$.04.1'})), outgoing_phis={'$phi8.0': '$2build_list.0', '$phi6.1': '$.04.1', '$phi28.0': '$2build_list.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$2build_list.0', '$.04.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=6 nstack_initial=2):
AdaptBlockInfo(insts=((6, {'iterator': '$phi6.1', 'pair': '$6for_iter.2', 'indval': '$6for_iter.3', 'pred': '$6for_iter.4'}),), outgoing_phis={'$phi8.2': '$6for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ('$phi6.0',), 8: ('$phi6.0', '$phi6.1', '$6for_iter.3')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=8 nstack_initial=3):
AdaptBlockInfo(insts=((8, {'iterable': '$phi8.2', 'stores': ['$8unpack_sequence.3', '$8unpack_sequence.4'], 'tupleobj': '$8unpack_sequence.5'}), (10, {'value': '$8unpack_sequence.3'}), (12, {'value': '$8unpack_sequence.4'}), (14, {'res': '$14load_global.6'}), (16, {'res': '$16load_global.7'}), (18, {'res': '$v18.8'}), (20, {'func': '$16load_global.7', 'args': ['$v18.8'], 'res': '$20call_function.9'}), (22, {'func': '$14load_global.6', 'args': ['$20call_function.9'], 'res': '$22call_function.10'}), (24, {'target': '$phi8.0', 'value': '$22call_function.10', 'appendvar': '$24list_append.11', 'res': '$24list_append.12'}), (26, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$phi8.0', '$phi8.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'retval': '$phi28.0', 'castval': '$28return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    implicit0 = arg(0, name=implicit0)       ['implicit0']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    $phi8.0 = $2build_list.0                 ['$2build_list.0', '$phi8.0']
    $phi6.1 = implicit0                      ['$phi6.1', 'implicit0']
    $phi28.0 = $2build_list.0                ['$2build_list.0', '$phi28.0']
    jump 6                                   []
label 6:
    $6for_iter.2 = iternext(value=$phi6.1)   ['$6for_iter.2', '$phi6.1']
    $6for_iter.3 = pair_first(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.3']
    $6for_iter.4 = pair_second(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.4']
    $phi8.2 = $6for_iter.3                   ['$6for_iter.3', '$phi8.2']
    branch $6for_iter.4, 8, 28               ['$6for_iter.4']
label 8:
    $8unpack_sequence.5 = exhaust_iter(value=$phi8.2, count=2) ['$8unpack_sequence.5', '$phi8.2']
    $8unpack_sequence.3 = static_getitem(value=$8unpack_sequence.5, index=0, index_var=None, fn=<built-in function getitem>) ['$8unpack_sequence.3', '$8unpack_sequence.5']
    $8unpack_sequence.4 = static_getitem(value=$8unpack_sequence.5, index=1, index_var=None, fn=<built-in function getitem>) ['$8unpack_sequence.4', '$8unpack_sequence.5']
    k = $8unpack_sequence.3                  ['$8unpack_sequence.3', 'k']
    v = $8unpack_sequence.4                  ['$8unpack_sequence.4', 'v']
    $14load_global.6 = global(len: <built-in function len>) ['$14load_global.6']
    $16load_global.7 = global(list: <class 'list'>) ['$16load_global.7']
    $20call_function.9 = call $16load_global.7(v, func=$16load_global.7, args=[Var(v, tsfeatures.py:773)], kws=(), vararg=None) ['$16load_global.7', '$20call_function.9', 'v']
    $22call_function.10 = call $14load_global.6($20call_function.9, func=$14load_global.6, args=[Var($20call_function.9, tsfeatures.py:773)], kws=(), vararg=None) ['$14load_global.6', '$20call_function.9', '$22call_function.10']
    $24list_append.11 = getattr(value=$phi8.0, attr=append) ['$24list_append.11', '$phi8.0']
    $24list_append.12 = call $24list_append.11($22call_function.10, func=$24list_append.11, args=(Var($22call_function.10, tsfeatures.py:773),), kws=(), vararg=None) ['$22call_function.10', '$24list_append.11', '$24list_append.12']
    jump 6                                   []
label 28:
    $28return_value.1 = cast(value=$phi28.0) ['$28return_value.1', '$phi28.0']
    return $28return_value.1                 ['$28return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa1c3d10d0>
DEBUG:numba.core.ssa:on stmt: implicit0 = arg(0, name=implicit0)
DEBUG:numba.core.ssa:on stmt: $2build_list.0 = build_list(items=[])
DEBUG:numba.core.ssa:on stmt: $phi8.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: $phi6.1 = implicit0
DEBUG:numba.core.ssa:on stmt: $phi28.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 6
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa1c3d10d0>
DEBUG:numba.core.ssa:on stmt: $6for_iter.2 = iternext(value=$phi6.1)
DEBUG:numba.core.ssa:on stmt: $6for_iter.3 = pair_first(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $6for_iter.4 = pair_second(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi8.2 = $6for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $6for_iter.4, 8, 28
DEBUG:numba.core.ssa:==== SSA block analysis pass on 8
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa1c3d10d0>
DEBUG:numba.core.ssa:on stmt: $8unpack_sequence.5 = exhaust_iter(value=$phi8.2, count=2)
DEBUG:numba.core.ssa:on stmt: $8unpack_sequence.3 = static_getitem(value=$8unpack_sequence.5, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $8unpack_sequence.4 = static_getitem(value=$8unpack_sequence.5, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: k = $8unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: v = $8unpack_sequence.4
DEBUG:numba.core.ssa:on stmt: $14load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $16load_global.7 = global(list: <class 'list'>)
DEBUG:numba.core.ssa:on stmt: $20call_function.9 = call $16load_global.7(v, func=$16load_global.7, args=[Var(v, tsfeatures.py:773)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $22call_function.10 = call $14load_global.6($20call_function.9, func=$14load_global.6, args=[Var($20call_function.9, tsfeatures.py:773)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $24list_append.11 = getattr(value=$phi8.0, attr=append)
DEBUG:numba.core.ssa:on stmt: $24list_append.12 = call $24list_append.11($22call_function.10, func=$24list_append.11, args=(Var($22call_function.10, tsfeatures.py:773),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa1c3d10d0>
DEBUG:numba.core.ssa:on stmt: $28return_value.1 = cast(value=$phi28.0)
DEBUG:numba.core.ssa:on stmt: return $28return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$14load_global.6': [<numba.core.ir.Assign object at 0x7faa1c3eb340>],
             '$16load_global.7': [<numba.core.ir.Assign object at 0x7faa1c3eb4c0>],
             '$20call_function.9': [<numba.core.ir.Assign object at 0x7faa1c3eb790>],
             '$22call_function.10': [<numba.core.ir.Assign object at 0x7faa1c3eb910>],
             '$24list_append.11': [<numba.core.ir.Assign object at 0x7faa1c3ebac0>],
             '$24list_append.12': [<numba.core.ir.Assign object at 0x7faa1c3ebbe0>],
             '$28return_value.1': [<numba.core.ir.Assign object at 0x7faa1c3ebe20>],
             '$2build_list.0': [<numba.core.ir.Assign object at 0x7faa1c3dc9d0>],
             '$6for_iter.2': [<numba.core.ir.Assign object at 0x7faa1c3f4160>],
             '$6for_iter.3': [<numba.core.ir.Assign object at 0x7faa1c3f4370>],
             '$6for_iter.4': [<numba.core.ir.Assign object at 0x7faa1c3f4490>],
             '$8unpack_sequence.3': [<numba.core.ir.Assign object at 0x7faa1c3f46d0>],
             '$8unpack_sequence.4': [<numba.core.ir.Assign object at 0x7faa1c3f49d0>],
             '$8unpack_sequence.5': [<numba.core.ir.Assign object at 0x7faa1c3f47c0>],
             '$phi28.0': [<numba.core.ir.Assign object at 0x7faa240e2dc0>],
             '$phi6.1': [<numba.core.ir.Assign object at 0x7faa240e2be0>],
             '$phi8.0': [<numba.core.ir.Assign object at 0x7faa1c3f1340>],
             '$phi8.2': [<numba.core.ir.Assign object at 0x7faa1c3f4d60>],
             'implicit0': [<numba.core.ir.Assign object at 0x7faa1c3f7c10>],
             'k': [<numba.core.ir.Assign object at 0x7faa1c3eb0a0>],
             'v': [<numba.core.ir.Assign object at 0x7faa1c3eb1c0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=796)
           2	LOAD_GLOBAL(arg=0, lineno=796)
           4	LOAD_CONST(arg=1, lineno=796)
           6	LOAD_GLOBAL(arg=1, lineno=796)
           8	LOAD_FAST(arg=1, lineno=796)
          10	LOAD_GLOBAL(arg=2, lineno=796)
          12	LOAD_DEREF(arg=0, lineno=796)
          14	CALL_FUNCTION(arg=1, lineno=796)
          16	LOAD_CONST(arg=2, lineno=796)
          18	BINARY_SUBTRACT(arg=None, lineno=796)
          20	CALL_FUNCTION(arg=2, lineno=796)
          22	CALL_FUNCTION(arg=2, lineno=796)
          24	STORE_FAST(arg=2, lineno=796)
          26	LOAD_CLOSURE(arg=0, lineno=799)
          28	BUILD_TUPLE(arg=1, lineno=799)
          30	LOAD_CONST(arg=3, lineno=799)
          32	LOAD_CONST(arg=4, lineno=799)
          34	MAKE_FUNCTION(arg=8, lineno=799)
          36	LOAD_FAST(arg=2, lineno=799)
          38	GET_ITER(arg=None, lineno=799)
          40	CALL_FUNCTION(arg=1, lineno=799)
          42	STORE_FAST(arg=3, lineno=799)
          44	LOAD_GLOBAL(arg=3, lineno=802)
          46	LOAD_METHOD(arg=4, lineno=802)
          48	LOAD_GLOBAL(arg=3, lineno=802)
          50	LOAD_METHOD(arg=5, lineno=802)
          52	LOAD_FAST(arg=2, lineno=802)
          54	CALL_METHOD(arg=1, lineno=802)
          56	LOAD_GLOBAL(arg=3, lineno=802)
          58	LOAD_METHOD(arg=5, lineno=802)
          60	LOAD_FAST(arg=3, lineno=802)
          62	CALL_METHOD(arg=1, lineno=802)
          64	LOAD_CONST(arg=2, lineno=802)
          66	CALL_METHOD(arg=3, lineno=802)
          68	STORE_FAST(arg=4, lineno=802)
          70	LOAD_GLOBAL(arg=3, lineno=805)
          72	LOAD_METHOD(arg=6, lineno=805)
          74	LOAD_FAST(arg=4, lineno=805)
          76	LOAD_CONST(arg=5, lineno=805)
          78	BINARY_SUBSCR(arg=None, lineno=805)
          80	CALL_METHOD(arg=1, lineno=805)
          82	POP_JUMP_IF_TRUE(arg=92, lineno=805)
          84	LOAD_FAST(arg=4, lineno=805)
          86	LOAD_CONST(arg=5, lineno=805)
          88	BINARY_SUBSCR(arg=None, lineno=805)
          90	RETURN_VALUE(arg=None, lineno=805)
>         92	LOAD_CONST(arg=5, lineno=805)
          94	RETURN_VALUE(arg=None, lineno=805)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=796)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=796)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=796)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=796)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=796)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=2, lineno=796)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1', '$6load_global.2', '$lag_size8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_DEREF(arg=0, lineno=796)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1', '$6load_global.2', '$lag_size8.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=796)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1', '$6load_global.2', '$lag_size8.3', '$10load_global.4', '$12load_deref.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=796)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1', '$6load_global.2', '$lag_size8.3', '$14call_function.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=BINARY_SUBTRACT(arg=None, lineno=796)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1', '$6load_global.2', '$lag_size8.3', '$14call_function.6', '$const16.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_FUNCTION(arg=2, lineno=796)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1', '$6load_global.2', '$lag_size8.3', '$18binary_subtract.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=CALL_FUNCTION(arg=2, lineno=796)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$const4.1', '$20call_function.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=2, lineno=796)
DEBUG:numba.core.byteflow:stack ['$22call_function.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_CLOSURE(arg=0, lineno=799)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BUILD_TUPLE(arg=1, lineno=799)
DEBUG:numba.core.byteflow:stack ['$26load_closure.11']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=799)
DEBUG:numba.core.byteflow:stack ['$28build_tuple.12']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=4, lineno=799)
DEBUG:numba.core.byteflow:stack ['$28build_tuple.12', '$const30.13']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=MAKE_FUNCTION(arg=8, lineno=799)
DEBUG:numba.core.byteflow:stack ['$28build_tuple.12', '$const30.13', '$const32.14']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=799)
DEBUG:numba.core.byteflow:stack ['$34make_function.15']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=GET_ITER(arg=None, lineno=799)
DEBUG:numba.core.byteflow:stack ['$34make_function.15', '$lags36.16']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=CALL_FUNCTION(arg=1, lineno=799)
DEBUG:numba.core.byteflow:stack ['$34make_function.15', '$38get_iter.17']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=STORE_FAST(arg=3, lineno=799)
DEBUG:numba.core.byteflow:stack ['$40call_function.18']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_GLOBAL(arg=3, lineno=802)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_METHOD(arg=4, lineno=802)
DEBUG:numba.core.byteflow:stack ['$44load_global.19']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_GLOBAL(arg=3, lineno=802)
DEBUG:numba.core.byteflow:stack ['$46load_method.20']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_METHOD(arg=5, lineno=802)
DEBUG:numba.core.byteflow:stack ['$46load_method.20', '$48load_global.21']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=802)
DEBUG:numba.core.byteflow:stack ['$46load_method.20', '$50load_method.22']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=CALL_METHOD(arg=1, lineno=802)
DEBUG:numba.core.byteflow:stack ['$46load_method.20', '$50load_method.22', '$lags52.23']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_GLOBAL(arg=3, lineno=802)
DEBUG:numba.core.byteflow:stack ['$46load_method.20', '$54call_method.24']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_METHOD(arg=5, lineno=802)
DEBUG:numba.core.byteflow:stack ['$46load_method.20', '$54call_method.24', '$56load_global.25']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=802)
DEBUG:numba.core.byteflow:stack ['$46load_method.20', '$54call_method.24', '$58load_method.26']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=CALL_METHOD(arg=1, lineno=802)
DEBUG:numba.core.byteflow:stack ['$46load_method.20', '$54call_method.24', '$58load_method.26', '$tau60.27']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=802)
DEBUG:numba.core.byteflow:stack ['$46load_method.20', '$54call_method.24', '$62call_method.28']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=CALL_METHOD(arg=3, lineno=802)
DEBUG:numba.core.byteflow:stack ['$46load_method.20', '$54call_method.24', '$62call_method.28', '$const64.29']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=STORE_FAST(arg=4, lineno=802)
DEBUG:numba.core.byteflow:stack ['$66call_method.30']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_GLOBAL(arg=3, lineno=805)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_METHOD(arg=6, lineno=805)
DEBUG:numba.core.byteflow:stack ['$70load_global.31']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=805)
DEBUG:numba.core.byteflow:stack ['$72load_method.32']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_CONST(arg=5, lineno=805)
DEBUG:numba.core.byteflow:stack ['$72load_method.32', '$poly74.33']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=805)
DEBUG:numba.core.byteflow:stack ['$72load_method.32', '$poly74.33', '$const76.34']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=CALL_METHOD(arg=1, lineno=805)
DEBUG:numba.core.byteflow:stack ['$72load_method.32', '$78binary_subscr.35']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=POP_JUMP_IF_TRUE(arg=92, lineno=805)
DEBUG:numba.core.byteflow:stack ['$80call_method.36']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=92, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=4, lineno=805)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=805)
DEBUG:numba.core.byteflow:stack ['$poly84.0']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=BINARY_SUBSCR(arg=None, lineno=805)
DEBUG:numba.core.byteflow:stack ['$poly84.0', '$const86.1']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=805)
DEBUG:numba.core.byteflow:stack ['$88binary_subscr.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=92 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_CONST(arg=5, lineno=805)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=805)
DEBUG:numba.core.byteflow:stack ['$const92.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$6load_global.2'}), (8, {'res': '$lag_size8.3'}), (10, {'res': '$10load_global.4'}), (12, {'res': '$12load_deref.5'}), (14, {'func': '$10load_global.4', 'args': ['$12load_deref.5'], 'res': '$14call_function.6'}), (16, {'res': '$const16.7'}), (18, {'lhs': '$14call_function.6', 'rhs': '$const16.7', 'res': '$18binary_subtract.8'}), (20, {'func': '$6load_global.2', 'args': ['$lag_size8.3', '$18binary_subtract.8'], 'res': '$20call_function.9'}), (22, {'func': '$2load_global.0', 'args': ['$const4.1', '$20call_function.9'], 'res': '$22call_function.10'}), (24, {'value': '$22call_function.10'}), (26, {'res': '$26load_closure.11'}), (28, {'items': ['$26load_closure.11'], 'res': '$28build_tuple.12'}), (30, {'res': '$const30.13'}), (32, {'res': '$const32.14'}), (34, {'name': '$const32.14', 'code': '$const30.13', 'closure': '$28build_tuple.12', 'annotations': None, 'kwdefaults': None, 'defaults': None, 'res': '$34make_function.15'}), (36, {'res': '$lags36.16'}), (38, {'value': '$lags36.16', 'res': '$38get_iter.17'}), (40, {'func': '$34make_function.15', 'args': ['$38get_iter.17'], 'res': '$40call_function.18'}), (42, {'value': '$40call_function.18'}), (44, {'res': '$44load_global.19'}), (46, {'item': '$44load_global.19', 'res': '$46load_method.20'}), (48, {'res': '$48load_global.21'}), (50, {'item': '$48load_global.21', 'res': '$50load_method.22'}), (52, {'res': '$lags52.23'}), (54, {'func': '$50load_method.22', 'args': ['$lags52.23'], 'res': '$54call_method.24'}), (56, {'res': '$56load_global.25'}), (58, {'item': '$56load_global.25', 'res': '$58load_method.26'}), (60, {'res': '$tau60.27'}), (62, {'func': '$58load_method.26', 'args': ['$tau60.27'], 'res': '$62call_method.28'}), (64, {'res': '$const64.29'}), (66, {'func': '$46load_method.20', 'args': ['$54call_method.24', '$62call_method.28', '$const64.29'], 'res': '$66call_method.30'}), (68, {'value': '$66call_method.30'}), (70, {'res': '$70load_global.31'}), (72, {'item': '$70load_global.31', 'res': '$72load_method.32'}), (74, {'res': '$poly74.33'}), (76, {'res': '$const76.34'}), (78, {'index': '$const76.34', 'target': '$poly74.33', 'res': '$78binary_subscr.35'}), (80, {'func': '$72load_method.32', 'args': ['$78binary_subscr.35'], 'res': '$80call_method.36'}), (82, {'pred': '$80call_method.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 92: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$poly84.0'}), (86, {'res': '$const86.1'}), (88, {'index': '$const86.1', 'target': '$poly84.0', 'res': '$88binary_subscr.2'}), (90, {'retval': '$88binary_subscr.2', 'castval': '$90return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    lag_size = arg(1, name=lag_size)         ['lag_size']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6load_global.2 = global(min: <built-in function min>) ['$6load_global.2']
    $10load_global.4 = global(len: <built-in function len>) ['$10load_global.4']
    $14call_function.6 = call $10load_global.4(x, func=$10load_global.4, args=[Var(x, tsfeatures.py:796)], kws=(), vararg=None) ['$10load_global.4', '$14call_function.6', 'x']
    $const16.7 = const(int, 1)               ['$const16.7']
    $18binary_subtract.8 = $14call_function.6 - $const16.7 ['$14call_function.6', '$18binary_subtract.8', '$const16.7']
    $20call_function.9 = call $6load_global.2(lag_size, $18binary_subtract.8, func=$6load_global.2, args=[Var(lag_size, tsfeatures.py:796), Var($18binary_subtract.8, tsfeatures.py:796)], kws=(), vararg=None) ['$18binary_subtract.8', '$20call_function.9', '$6load_global.2', 'lag_size']
    lags = call $2load_global.0($const4.1, $20call_function.9, func=$2load_global.0, args=[Var($const4.1, tsfeatures.py:796), Var($20call_function.9, tsfeatures.py:796)], kws=(), vararg=None) ['$20call_function.9', '$2load_global.0', '$const4.1', 'lags']
    $28build_tuple.12 = build_tuple(items=[Var(x, tsfeatures.py:796)]) ['$28build_tuple.12', 'x']
    $const30.13 = const(code, <code object <listcomp> at 0x7faab6709be0, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 799>) ['$const30.13']
    $const32.14 = const(str, TsFeatures.get_hurst.<locals>.<listcomp>) ['$const32.14']
    $34make_function.15 = make_function(name=$const32.14, code=<code object <listcomp> at 0x7faab6709be0, file "/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/kats/tsfeatures/tsfeatures.py", line 799>, closure=$28build_tuple.12, defaults=None) ['$28build_tuple.12', '$34make_function.15', '$const32.14']
    $38get_iter.17 = getiter(value=lags)     ['$38get_iter.17', 'lags']
    tau = call $34make_function.15($38get_iter.17, func=$34make_function.15, args=[Var($38get_iter.17, tsfeatures.py:799)], kws=(), vararg=None) ['$34make_function.15', '$38get_iter.17', 'tau']
    $44load_global.19 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$44load_global.19']
    $46load_method.20 = getattr(value=$44load_global.19, attr=polyfit) ['$44load_global.19', '$46load_method.20']
    $48load_global.21 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$48load_global.21']
    $50load_method.22 = getattr(value=$48load_global.21, attr=log) ['$48load_global.21', '$50load_method.22']
    $54call_method.24 = call $50load_method.22(lags, func=$50load_method.22, args=[Var(lags, tsfeatures.py:796)], kws=(), vararg=None) ['$50load_method.22', '$54call_method.24', 'lags']
    $56load_global.25 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$56load_global.25']
    $58load_method.26 = getattr(value=$56load_global.25, attr=log) ['$56load_global.25', '$58load_method.26']
    $62call_method.28 = call $58load_method.26(tau, func=$58load_method.26, args=[Var(tau, tsfeatures.py:799)], kws=(), vararg=None) ['$58load_method.26', '$62call_method.28', 'tau']
    $const64.29 = const(int, 1)              ['$const64.29']
    poly = call $46load_method.20($54call_method.24, $62call_method.28, $const64.29, func=$46load_method.20, args=[Var($54call_method.24, tsfeatures.py:802), Var($62call_method.28, tsfeatures.py:802), Var($const64.29, tsfeatures.py:802)], kws=(), vararg=None) ['$46load_method.20', '$54call_method.24', '$62call_method.28', '$const64.29', 'poly']
    $70load_global.31 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$70load_global.31']
    $72load_method.32 = getattr(value=$70load_global.31, attr=isnan) ['$70load_global.31', '$72load_method.32']
    $const76.34 = const(int, 0)              ['$const76.34']
    $78binary_subscr.35 = getitem(value=poly, index=$const76.34, fn=<built-in function getitem>) ['$78binary_subscr.35', '$const76.34', 'poly']
    $80call_method.36 = call $72load_method.32($78binary_subscr.35, func=$72load_method.32, args=[Var($78binary_subscr.35, tsfeatures.py:805)], kws=(), vararg=None) ['$72load_method.32', '$78binary_subscr.35', '$80call_method.36']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80call_method.36, func=bool82, args=(Var($80call_method.36, tsfeatures.py:805),), kws=(), vararg=None) ['$80call_method.36', '$82pred', 'bool82']
    branch $82pred, 92, 84                   ['$82pred']
label 84:
    $const86.1 = const(int, 0)               ['$const86.1']
    $88binary_subscr.2 = getitem(value=poly, index=$const86.1, fn=<built-in function getitem>) ['$88binary_subscr.2', '$const86.1', 'poly']
    $90return_value.3 = cast(value=$88binary_subscr.2) ['$88binary_subscr.2', '$90return_value.3']
    return $90return_value.3                 ['$90return_value.3']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=799)
           2	BUILD_LIST(arg=0, lineno=799)
           4	LOAD_FAST(arg=0, lineno=799)
>          6	FOR_ITER(arg=48, lineno=799)
           8	STORE_FAST(arg=1, lineno=799)
          10	LOAD_GLOBAL(arg=0, lineno=799)
          12	LOAD_METHOD(arg=1, lineno=799)
          14	LOAD_GLOBAL(arg=0, lineno=799)
          16	LOAD_METHOD(arg=2, lineno=799)
          18	LOAD_DEREF(arg=0, lineno=799)
          20	CALL_METHOD(arg=1, lineno=799)
          22	LOAD_FAST(arg=1, lineno=799)
          24	LOAD_CONST(arg=0, lineno=799)
          26	BUILD_SLICE(arg=2, lineno=799)
          28	BINARY_SUBSCR(arg=None, lineno=799)
          30	LOAD_GLOBAL(arg=0, lineno=799)
          32	LOAD_METHOD(arg=2, lineno=799)
          34	LOAD_DEREF(arg=0, lineno=799)
          36	CALL_METHOD(arg=1, lineno=799)
          38	LOAD_CONST(arg=0, lineno=799)
          40	LOAD_FAST(arg=1, lineno=799)
          42	UNARY_NEGATIVE(arg=None, lineno=799)
          44	BUILD_SLICE(arg=2, lineno=799)
          46	BINARY_SUBSCR(arg=None, lineno=799)
          48	BINARY_SUBTRACT(arg=None, lineno=799)
          50	CALL_METHOD(arg=1, lineno=799)
          52	LIST_APPEND(arg=2, lineno=799)
          54	JUMP_ABSOLUTE(arg=6, lineno=799)
>         56	RETURN_VALUE(arg=None, lineno=799)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=799)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=799)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=799)
DEBUG:numba.core.byteflow:stack ['$2build_list.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$2build_list.0', '$.04.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=FOR_ITER(arg=48, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi6.0', '$phi6.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=56, stack=('$phi6.0',), blockstack=(), npush=0), Edge(pc=8, stack=('$phi6.0', '$phi6.1', '$6for_iter.3'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=56 nstack_initial=1), State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi56.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi56.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=8 nstack_initial=3)])
DEBUG:numba.core.byteflow:stack: ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=1, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_METHOD(arg=1, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$10load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$14load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_DEREF(arg=0, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$16load_method.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_METHOD(arg=1, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$16load_method.6', '$18load_deref.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$20call_method.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_CONST(arg=0, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$20call_method.8', '$lag22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BUILD_SLICE(arg=2, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$20call_method.8', '$lag22.9', '$const24.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$20call_method.8', '$26build_slice.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$28binary_subscr.13']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_METHOD(arg=2, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$28binary_subscr.13', '$30load_global.14']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_DEREF(arg=0, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$28binary_subscr.13', '$32load_method.15']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=CALL_METHOD(arg=1, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$28binary_subscr.13', '$32load_method.15', '$34load_deref.16']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_CONST(arg=0, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$28binary_subscr.13', '$36call_method.17']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$28binary_subscr.13', '$36call_method.17', '$const38.18']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=UNARY_NEGATIVE(arg=None, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$28binary_subscr.13', '$36call_method.17', '$const38.18', '$lag40.19']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$28binary_subscr.13', '$36call_method.17', '$const38.18', '$42unary_negative.20']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$28binary_subscr.13', '$36call_method.17', '$44build_slice.22']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=BINARY_SUBTRACT(arg=None, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$28binary_subscr.13', '$46binary_subscr.23']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=CALL_METHOD(arg=1, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$12load_method.4', '$48binary_subtract.24']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LIST_APPEND(arg=2, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1', '$50call_method.25']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=JUMP_ABSOLUTE(arg=6, lineno=799)
DEBUG:numba.core.byteflow:stack ['$phi8.0', '$phi8.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=6, stack=('$phi8.0', '$phi8.1'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=2): {'$phi6.1'},
             State(pc_initial=8 nstack_initial=3): {'$phi8.2', '$phi8.0'},
             State(pc_initial=56 nstack_initial=1): {'$phi56.0'}})
DEBUG:numba.core.byteflow:defmap: {'$phi6.0': State(pc_initial=0 nstack_initial=0),
 '$phi6.1': State(pc_initial=0 nstack_initial=0),
 '$phi8.2': State(pc_initial=6 nstack_initial=2)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.1', State(pc_initial=8 nstack_initial=3))},
             '$phi8.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi8.1': {('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi56.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi56.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
 '$phi8.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi8.2': {('$6for_iter.3', State(pc_initial=6 nstack_initial=2))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi56.0': '$2build_list.0',
                                                    '$phi6.1': '$.04.1',
                                                    '$phi8.0': '$2build_list.0'},
             State(pc_initial=6 nstack_initial=2): {'$phi8.2': '$6for_iter.3'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'res': '$.04.1'})), outgoing_phis={'$phi8.0': '$2build_list.0', '$phi6.1': '$.04.1', '$phi56.0': '$2build_list.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$2build_list.0', '$.04.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=6 nstack_initial=2):
AdaptBlockInfo(insts=((6, {'iterator': '$phi6.1', 'pair': '$6for_iter.2', 'indval': '$6for_iter.3', 'pred': '$6for_iter.4'}),), outgoing_phis={'$phi8.2': '$6for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: ('$phi6.0',), 8: ('$phi6.0', '$phi6.1', '$6for_iter.3')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=8 nstack_initial=3):
AdaptBlockInfo(insts=((8, {'value': '$phi8.2'}), (10, {'res': '$10load_global.3'}), (12, {'item': '$10load_global.3', 'res': '$12load_method.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_method.6'}), (18, {'res': '$18load_deref.7'}), (20, {'func': '$16load_method.6', 'args': ['$18load_deref.7'], 'res': '$20call_method.8'}), (22, {'res': '$lag22.9'}), (24, {'res': '$const24.10'}), (26, {'start': '$lag22.9', 'stop': '$const24.10', 'step': None, 'res': '$26build_slice.12', 'slicevar': '$26build_slice.11'}), (28, {'index': '$26build_slice.12', 'target': '$20call_method.8', 'res': '$28binary_subscr.13'}), (30, {'res': '$30load_global.14'}), (32, {'item': '$30load_global.14', 'res': '$32load_method.15'}), (34, {'res': '$34load_deref.16'}), (36, {'func': '$32load_method.15', 'args': ['$34load_deref.16'], 'res': '$36call_method.17'}), (38, {'res': '$const38.18'}), (40, {'res': '$lag40.19'}), (42, {'value': '$lag40.19', 'res': '$42unary_negative.20'}), (44, {'start': '$const38.18', 'stop': '$42unary_negative.20', 'step': None, 'res': '$44build_slice.22', 'slicevar': '$44build_slice.21'}), (46, {'index': '$44build_slice.22', 'target': '$36call_method.17', 'res': '$46binary_subscr.23'}), (48, {'lhs': '$28binary_subscr.13', 'rhs': '$46binary_subscr.23', 'res': '$48binary_subtract.24'}), (50, {'func': '$12load_method.4', 'args': ['$48binary_subtract.24'], 'res': '$50call_method.25'}), (52, {'target': '$phi8.0', 'value': '$50call_method.25', 'appendvar': '$52list_append.26', 'res': '$52list_append.27'}), (54, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$phi8.0', '$phi8.1')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=56 nstack_initial=1):
AdaptBlockInfo(insts=((56, {'retval': '$phi56.0', 'castval': '$56return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    implicit0 = arg(0, name=implicit0)       ['implicit0']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    $phi8.0 = $2build_list.0                 ['$2build_list.0', '$phi8.0']
    $phi6.1 = implicit0                      ['$phi6.1', 'implicit0']
    $phi56.0 = $2build_list.0                ['$2build_list.0', '$phi56.0']
    jump 6                                   []
label 6:
    $6for_iter.2 = iternext(value=$phi6.1)   ['$6for_iter.2', '$phi6.1']
    $6for_iter.3 = pair_first(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.3']
    $6for_iter.4 = pair_second(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.4']
    $phi8.2 = $6for_iter.3                   ['$6for_iter.3', '$phi8.2']
    branch $6for_iter.4, 8, 56               ['$6for_iter.4']
label 8:
    lag = $phi8.2                            ['$phi8.2', 'lag']
    $10load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$10load_global.3']
    $12load_method.4 = getattr(value=$10load_global.3, attr=std) ['$10load_global.3', '$12load_method.4']
    $14load_global.5 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_method.6 = getattr(value=$14load_global.5, attr=asarray) ['$14load_global.5', '$16load_method.6']
    $18load_deref.7 = freevar(x: None)       ['$18load_deref.7']
    $20call_method.8 = call $16load_method.6($18load_deref.7, func=$16load_method.6, args=[Var($18load_deref.7, tsfeatures.py:799)], kws=(), vararg=None) ['$16load_method.6', '$18load_deref.7', '$20call_method.8']
    $const24.10 = const(NoneType, None)      ['$const24.10']
    $26build_slice.11 = global(slice: <class 'slice'>) ['$26build_slice.11']
    $26build_slice.12 = call $26build_slice.11(lag, $const24.10, func=$26build_slice.11, args=(Var(lag, tsfeatures.py:799), Var($const24.10, tsfeatures.py:799)), kws=(), vararg=None) ['$26build_slice.11', '$26build_slice.12', '$const24.10', 'lag']
    $28binary_subscr.13 = getitem(value=$20call_method.8, index=$26build_slice.12, fn=<built-in function getitem>) ['$20call_method.8', '$26build_slice.12', '$28binary_subscr.13']
    $30load_global.14 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$30load_global.14']
    $32load_method.15 = getattr(value=$30load_global.14, attr=asarray) ['$30load_global.14', '$32load_method.15']
    $34load_deref.16 = freevar(x: None)      ['$34load_deref.16']
    $36call_method.17 = call $32load_method.15($34load_deref.16, func=$32load_method.15, args=[Var($34load_deref.16, tsfeatures.py:799)], kws=(), vararg=None) ['$32load_method.15', '$34load_deref.16', '$36call_method.17']
    $const38.18 = const(NoneType, None)      ['$const38.18']
    $42unary_negative.20 = unary(fn=<built-in function neg>, value=lag) ['$42unary_negative.20', 'lag']
    $44build_slice.21 = global(slice: <class 'slice'>) ['$44build_slice.21']
    $44build_slice.22 = call $44build_slice.21($const38.18, $42unary_negative.20, func=$44build_slice.21, args=(Var($const38.18, tsfeatures.py:799), Var($42unary_negative.20, tsfeatures.py:799)), kws=(), vararg=None) ['$42unary_negative.20', '$44build_slice.21', '$44build_slice.22', '$const38.18']
    $46binary_subscr.23 = getitem(value=$36call_method.17, index=$44build_slice.22, fn=<built-in function getitem>) ['$36call_method.17', '$44build_slice.22', '$46binary_subscr.23']
    $48binary_subtract.24 = $28binary_subscr.13 - $46binary_subscr.23 ['$28binary_subscr.13', '$46binary_subscr.23', '$48binary_subtract.24']
    $50call_method.25 = call $12load_method.4($48binary_subtract.24, func=$12load_method.4, args=[Var($48binary_subtract.24, tsfeatures.py:799)], kws=(), vararg=None) ['$12load_method.4', '$48binary_subtract.24', '$50call_method.25']
    $52list_append.26 = getattr(value=$phi8.0, attr=append) ['$52list_append.26', '$phi8.0']
    $52list_append.27 = call $52list_append.26($50call_method.25, func=$52list_append.26, args=(Var($50call_method.25, tsfeatures.py:799),), kws=(), vararg=None) ['$50call_method.25', '$52list_append.26', '$52list_append.27']
    jump 6                                   []
label 56:
    $56return_value.1 = cast(value=$phi56.0) ['$56return_value.1', '$phi56.0']
    return $56return_value.1                 ['$56return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c4380fa0>
DEBUG:numba.core.ssa:on stmt: implicit0 = arg(0, name=implicit0)
DEBUG:numba.core.ssa:on stmt: $2build_list.0 = build_list(items=[])
DEBUG:numba.core.ssa:on stmt: $phi8.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: $phi6.1 = implicit0
DEBUG:numba.core.ssa:on stmt: $phi56.0 = $2build_list.0
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 6
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c4380fa0>
DEBUG:numba.core.ssa:on stmt: $6for_iter.2 = iternext(value=$phi6.1)
DEBUG:numba.core.ssa:on stmt: $6for_iter.3 = pair_first(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $6for_iter.4 = pair_second(value=$6for_iter.2)
DEBUG:numba.core.ssa:on stmt: $phi8.2 = $6for_iter.3
DEBUG:numba.core.ssa:on stmt: branch $6for_iter.4, 8, 56
DEBUG:numba.core.ssa:==== SSA block analysis pass on 8
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c4380fa0>
DEBUG:numba.core.ssa:on stmt: lag = $phi8.2
DEBUG:numba.core.ssa:on stmt: $10load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $12load_method.4 = getattr(value=$10load_global.3, attr=std)
DEBUG:numba.core.ssa:on stmt: $14load_global.5 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $16load_method.6 = getattr(value=$14load_global.5, attr=asarray)
DEBUG:numba.core.ssa:on stmt: $18load_deref.7 = freevar(x: None)
DEBUG:numba.core.ssa:on stmt: $20call_method.8 = call $16load_method.6($18load_deref.7, func=$16load_method.6, args=[Var($18load_deref.7, tsfeatures.py:799)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $const24.10 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $26build_slice.11 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $26build_slice.12 = call $26build_slice.11(lag, $const24.10, func=$26build_slice.11, args=(Var(lag, tsfeatures.py:799), Var($const24.10, tsfeatures.py:799)), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $28binary_subscr.13 = getitem(value=$20call_method.8, index=$26build_slice.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $30load_global.14 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $32load_method.15 = getattr(value=$30load_global.14, attr=asarray)
DEBUG:numba.core.ssa:on stmt: $34load_deref.16 = freevar(x: None)
DEBUG:numba.core.ssa:on stmt: $36call_method.17 = call $32load_method.15($34load_deref.16, func=$32load_method.15, args=[Var($34load_deref.16, tsfeatures.py:799)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $const38.18 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $42unary_negative.20 = unary(fn=<built-in function neg>, value=lag)
DEBUG:numba.core.ssa:on stmt: $44build_slice.21 = global(slice: <class 'slice'>)
DEBUG:numba.core.ssa:on stmt: $44build_slice.22 = call $44build_slice.21($const38.18, $42unary_negative.20, func=$44build_slice.21, args=(Var($const38.18, tsfeatures.py:799), Var($42unary_negative.20, tsfeatures.py:799)), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $46binary_subscr.23 = getitem(value=$36call_method.17, index=$44build_slice.22, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $48binary_subtract.24 = $28binary_subscr.13 - $46binary_subscr.23
DEBUG:numba.core.ssa:on stmt: $50call_method.25 = call $12load_method.4($48binary_subtract.24, func=$12load_method.4, args=[Var($48binary_subtract.24, tsfeatures.py:799)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $52list_append.26 = getattr(value=$phi8.0, attr=append)
DEBUG:numba.core.ssa:on stmt: $52list_append.27 = call $52list_append.26($50call_method.25, func=$52list_append.26, args=(Var($50call_method.25, tsfeatures.py:799),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 6
DEBUG:numba.core.ssa:==== SSA block analysis pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c4380fa0>
DEBUG:numba.core.ssa:on stmt: $56return_value.1 = cast(value=$phi56.0)
DEBUG:numba.core.ssa:on stmt: return $56return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x7fa9a07e37c0>],
             '$12load_method.4': [<numba.core.ir.Assign object at 0x7fa9a07e3940>],
             '$14load_global.5': [<numba.core.ir.Assign object at 0x7fa9a07e3ac0>],
             '$16load_method.6': [<numba.core.ir.Assign object at 0x7fa9a07e3c40>],
             '$18load_deref.7': [<numba.core.ir.Assign object at 0x7fa9a07e3dc0>],
             '$20call_method.8': [<numba.core.ir.Assign object at 0x7fa9a07e3f70>],
             '$26build_slice.11': [<numba.core.ir.Assign object at 0x7fa9a07f13d0>],
             '$26build_slice.12': [<numba.core.ir.Assign object at 0x7fa9a07f14f0>],
             '$28binary_subscr.13': [<numba.core.ir.Assign object at 0x7fa9a07f1640>],
             '$2build_list.0': [<numba.core.ir.Assign object at 0x7fa9c4380b80>],
             '$30load_global.14': [<numba.core.ir.Assign object at 0x7fa9a07f17c0>],
             '$32load_method.15': [<numba.core.ir.Assign object at 0x7fa9a07f1940>],
             '$34load_deref.16': [<numba.core.ir.Assign object at 0x7fa9a07f1ac0>],
             '$36call_method.17': [<numba.core.ir.Assign object at 0x7fa9a07f1c70>],
             '$42unary_negative.20': [<numba.core.ir.Assign object at 0x7fa9a07ef0a0>],
             '$44build_slice.21': [<numba.core.ir.Assign object at 0x7fa9a07ef250>],
             '$44build_slice.22': [<numba.core.ir.Assign object at 0x7fa9a07ef370>],
             '$46binary_subscr.23': [<numba.core.ir.Assign object at 0x7fa9a07ef4c0>],
             '$48binary_subtract.24': [<numba.core.ir.Assign object at 0x7fa9a07ef640>],
             '$50call_method.25': [<numba.core.ir.Assign object at 0x7fa9a07ef7f0>],
             '$52list_append.26': [<numba.core.ir.Assign object at 0x7fa9a07ef9a0>],
             '$52list_append.27': [<numba.core.ir.Assign object at 0x7fa9a07efac0>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x7fa9a07efca0>],
             '$6for_iter.2': [<numba.core.ir.Assign object at 0x7fa9a07e3160>],
             '$6for_iter.3': [<numba.core.ir.Assign object at 0x7fa9a07e3280>],
             '$6for_iter.4': [<numba.core.ir.Assign object at 0x7fa9a07e33a0>],
             '$const24.10': [<numba.core.ir.Assign object at 0x7fa9a07f1220>],
             '$const38.18': [<numba.core.ir.Assign object at 0x7fa9a07f1dc0>],
             '$phi56.0': [<numba.core.ir.Assign object at 0x7fa9c4380e20>],
             '$phi6.1': [<numba.core.ir.Assign object at 0x7fa9c4380d60>],
             '$phi8.0': [<numba.core.ir.Assign object at 0x7fa9c4380220>],
             '$phi8.2': [<numba.core.ir.Assign object at 0x7fa9a07e3070>],
             'implicit0': [<numba.core.ir.Assign object at 0x7fa9c43809d0>],
             'lag': [<numba.core.ir.Assign object at 0x7fa9a07e3640>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1046)
           2	LOAD_GLOBAL(arg=0, lineno=1046)
           4	LOAD_METHOD(arg=1, lineno=1046)
           6	LOAD_GLOBAL(arg=0, lineno=1046)
           8	LOAD_METHOD(arg=2, lineno=1046)
          10	LOAD_FAST(arg=0, lineno=1046)
          12	CALL_METHOD(arg=1, lineno=1046)
          14	CALL_METHOD(arg=1, lineno=1046)
          16	STORE_FAST(arg=1, lineno=1046)
          18	LOAD_FAST(arg=1, lineno=1047)
          20	RETURN_VALUE(arg=None, lineno=1047)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1046)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1046)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=1046)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=1046)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=1046)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=1046)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$8load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=1046)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$8load_method.3', '$x10.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=1046)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$12call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=1, lineno=1046)
DEBUG:numba.core.byteflow:stack ['$14call_method.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=1047)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1047)
DEBUG:numba.core.byteflow:stack ['$std1st_der18.7']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_method.3'}), (10, {'res': '$x10.4'}), (12, {'func': '$8load_method.3', 'args': ['$x10.4'], 'res': '$12call_method.5'}), (14, {'func': '$4load_method.1', 'args': ['$12call_method.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$std1st_der18.7'}), (20, {'retval': '$std1st_der18.7', 'castval': '$20return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=std) ['$2load_global.0', '$4load_method.1']
    $6load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.2']
    $8load_method.3 = getattr(value=$6load_global.2, attr=gradient) ['$6load_global.2', '$8load_method.3']
    $12call_method.5 = call $8load_method.3(x, func=$8load_method.3, args=[Var(x, tsfeatures.py:1046)], kws=(), vararg=None) ['$12call_method.5', '$8load_method.3', 'x']
    std1st_der = call $4load_method.1($12call_method.5, func=$4load_method.1, args=[Var($12call_method.5, tsfeatures.py:1046)], kws=(), vararg=None) ['$12call_method.5', '$4load_method.1', 'std1st_der']
    $20return_value.8 = cast(value=std1st_der) ['$20return_value.8', 'std1st_der']
    return $20return_value.8                 ['$20return_value.8']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1064)
           2	LOAD_GLOBAL(arg=0, lineno=1064)
           4	LOAD_METHOD(arg=1, lineno=1064)
           6	LOAD_FAST(arg=0, lineno=1064)
           8	CALL_METHOD(arg=1, lineno=1064)
          10	STORE_FAST(arg=1, lineno=1064)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	STORE_FAST(arg=2, lineno=1065)
          16	LOAD_GLOBAL(arg=2, lineno=1066)
          18	LOAD_GLOBAL(arg=3, lineno=1066)
          20	LOAD_FAST(arg=0, lineno=1066)
          22	CALL_FUNCTION(arg=1, lineno=1066)
          24	LOAD_CONST(arg=2, lineno=1066)
          26	BINARY_SUBTRACT(arg=None, lineno=1066)
          28	CALL_FUNCTION(arg=1, lineno=1066)
          30	GET_ITER(arg=None, lineno=1066)
>         32	FOR_ITER(arg=82, lineno=1066)
          34	STORE_FAST(arg=3, lineno=1066)
          36	LOAD_FAST(arg=0, lineno=1067)
          38	LOAD_FAST(arg=3, lineno=1067)
          40	BINARY_SUBSCR(arg=None, lineno=1067)
          42	LOAD_FAST(arg=1, lineno=1067)
          44	DUP_TOP(arg=None, lineno=1067)
          46	ROT_THREE(arg=None, lineno=1067)
          48	COMPARE_OP(arg=1, lineno=1067)
          50	POP_JUMP_IF_FALSE(arg=68, lineno=1067)
          52	LOAD_FAST(arg=0, lineno=1067)
          54	LOAD_FAST(arg=3, lineno=1067)
          56	LOAD_CONST(arg=2, lineno=1067)
          58	BINARY_ADD(arg=None, lineno=1067)
          60	BINARY_SUBSCR(arg=None, lineno=1067)
          62	COMPARE_OP(arg=0, lineno=1067)
          64	POP_JUMP_IF_TRUE(arg=106, lineno=1067)
          66	JUMP_FORWARD(arg=2, lineno=1067)
>         68	POP_TOP(arg=None, lineno=1067)
>         70	LOAD_FAST(arg=0, lineno=1067)
          72	LOAD_FAST(arg=3, lineno=1067)
          74	BINARY_SUBSCR(arg=None, lineno=1067)
          76	LOAD_FAST(arg=1, lineno=1067)
          78	DUP_TOP(arg=None, lineno=1067)
          80	ROT_THREE(arg=None, lineno=1067)
          82	COMPARE_OP(arg=5, lineno=1067)
          84	POP_JUMP_IF_FALSE(arg=102, lineno=1067)
          86	LOAD_FAST(arg=0, lineno=1067)
          88	LOAD_FAST(arg=3, lineno=1067)
          90	LOAD_CONST(arg=2, lineno=1067)
          92	BINARY_ADD(arg=None, lineno=1067)
          94	BINARY_SUBSCR(arg=None, lineno=1067)
          96	COMPARE_OP(arg=4, lineno=1067)
          98	POP_JUMP_IF_FALSE(arg=32, lineno=1067)
         100	JUMP_FORWARD(arg=4, lineno=1067)
>        102	POP_TOP(arg=None, lineno=1067)
         104	JUMP_ABSOLUTE(arg=32, lineno=1067)
>        106	LOAD_FAST(arg=2, lineno=1068)
         108	LOAD_CONST(arg=2, lineno=1068)
         110	INPLACE_ADD(arg=None, lineno=1068)
         112	STORE_FAST(arg=2, lineno=1068)
         114	JUMP_ABSOLUTE(arg=32, lineno=1068)
>        116	LOAD_FAST(arg=2, lineno=1069)
         118	RETURN_VALUE(arg=None, lineno=1069)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1064)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1064)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=1064)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1064)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=1064)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$x6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=STORE_FAST(arg=1, lineno=1064)
DEBUG:numba.core.byteflow:stack ['$8call_method.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=STORE_FAST(arg=2, lineno=1065)
DEBUG:numba.core.byteflow:stack ['$const12.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=1066)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_GLOBAL(arg=3, lineno=1066)
DEBUG:numba.core.byteflow:stack ['$16load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1066)
DEBUG:numba.core.byteflow:stack ['$16load_global.5', '$18load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=1066)
DEBUG:numba.core.byteflow:stack ['$16load_global.5', '$18load_global.6', '$x20.7']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=1066)
DEBUG:numba.core.byteflow:stack ['$16load_global.5', '$22call_function.8']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=1066)
DEBUG:numba.core.byteflow:stack ['$16load_global.5', '$22call_function.8', '$const24.9']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=1, lineno=1066)
DEBUG:numba.core.byteflow:stack ['$16load_global.5', '$26binary_subtract.10']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=GET_ITER(arg=None, lineno=1066)
DEBUG:numba.core.byteflow:stack ['$28call_function.11']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=32, stack=('$30get_iter.12',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=32 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi32.0']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=FOR_ITER(arg=82, lineno=1066)
DEBUG:numba.core.byteflow:stack ['$phi32.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=116, stack=(), blockstack=(), npush=0), Edge(pc=34, stack=('$phi32.0', '$32for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=34 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_FAST(arg=2, lineno=1069)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=118, inst=RETURN_VALUE(arg=None, lineno=1069)
DEBUG:numba.core.byteflow:stack ['$cp116.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi34.0', '$phi34.1']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=3, lineno=1066)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$phi34.1']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi34.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=3, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$x36.2']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$x36.2', '$i38.3']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$40binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=DUP_TOP(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$40binary_subscr.4', '$median42.5']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=ROT_THREE(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$40binary_subscr.4', '$median42.5', '$44dup_top.6']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=COMPARE_OP(arg=1, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$44dup_top.6', '$40binary_subscr.4', '$median42.5']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=68, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$44dup_top.6', '$48compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=52, stack=('$phi34.0', '$44dup_top.6'), blockstack=(), npush=0), Edge(pc=68, stack=('$phi34.0', '$44dup_top.6'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=52 nstack_initial=2), State(pc_initial=68 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi52.0', '$phi52.1']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi52.0', '$phi52.1']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=3, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi52.0', '$phi52.1', '$x52.2']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi52.0', '$phi52.1', '$x52.2', '$i54.3']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=BINARY_ADD(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi52.0', '$phi52.1', '$x52.2', '$i54.3', '$const56.4']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi52.0', '$phi52.1', '$x52.2', '$58binary_add.5']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=COMPARE_OP(arg=0, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi52.0', '$phi52.1', '$60binary_subscr.6']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=POP_JUMP_IF_TRUE(arg=106, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi52.0', '$62compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=66, stack=('$phi52.0',), blockstack=(), npush=0), Edge(pc=106, stack=('$phi52.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=2), State(pc_initial=66 nstack_initial=1), State(pc_initial=106 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi68.0', '$phi68.1']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=POP_TOP(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi68.0', '$phi68.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=70, stack=('$phi68.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=1), State(pc_initial=106 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi66.0']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=JUMP_FORWARD(arg=2, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi66.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=70, stack=('$phi66.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi106.0']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=2, lineno=1068)
DEBUG:numba.core.byteflow:stack ['$phi106.0']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=1068)
DEBUG:numba.core.byteflow:stack ['$phi106.0', '$cp106.1']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=INPLACE_ADD(arg=None, lineno=1068)
DEBUG:numba.core.byteflow:stack ['$phi106.0', '$cp106.1', '$const108.2']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=STORE_FAST(arg=2, lineno=1068)
DEBUG:numba.core.byteflow:stack ['$phi106.0', '$110inplace_add.3']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=JUMP_ABSOLUTE(arg=32, lineno=1068)
DEBUG:numba.core.byteflow:stack ['$phi106.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=32, stack=('$phi106.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi70.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi70.0']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi70.0', '$x70.1']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=BINARY_SUBSCR(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi70.0', '$x70.1', '$i72.2']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=1, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi70.0', '$74binary_subscr.3']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=DUP_TOP(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi70.0', '$74binary_subscr.3', '$median76.4']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=ROT_THREE(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi70.0', '$74binary_subscr.3', '$median76.4', '$78dup_top.5']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=COMPARE_OP(arg=5, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi70.0', '$78dup_top.5', '$74binary_subscr.3', '$median76.4']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=POP_JUMP_IF_FALSE(arg=102, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi70.0', '$78dup_top.5', '$82compare_op.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=86, stack=('$phi70.0', '$78dup_top.5'), blockstack=(), npush=0), Edge(pc=102, stack=('$phi70.0', '$78dup_top.5'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=32 nstack_initial=1), State(pc_initial=86 nstack_initial=2), State(pc_initial=102 nstack_initial=2)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=86 nstack_initial=2), State(pc_initial=102 nstack_initial=2)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=86 nstack_initial=2), State(pc_initial=102 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi86.0', '$phi86.1']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_FAST(arg=0, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi86.0', '$phi86.1']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_FAST(arg=3, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi86.0', '$phi86.1', '$x86.2']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi86.0', '$phi86.1', '$x86.2', '$i88.3']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=BINARY_ADD(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi86.0', '$phi86.1', '$x86.2', '$i88.3', '$const90.4']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=BINARY_SUBSCR(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi86.0', '$phi86.1', '$x86.2', '$92binary_add.5']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=COMPARE_OP(arg=4, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi86.0', '$phi86.1', '$94binary_subscr.6']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=POP_JUMP_IF_FALSE(arg=32, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi86.0', '$96compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=100, stack=('$phi86.0',), blockstack=(), npush=0), Edge(pc=32, stack=('$phi86.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=2), State(pc_initial=100 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi102.0', '$phi102.1']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=POP_TOP(arg=None, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi102.0', '$phi102.1']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=JUMP_ABSOLUTE(arg=32, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi102.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=32, stack=('$phi102.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=100 nstack_initial=1), State(pc_initial=32 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi100.0']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=JUMP_FORWARD(arg=4, lineno=1067)
DEBUG:numba.core.byteflow:stack ['$phi100.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=106, stack=('$phi100.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=32 nstack_initial=1), State(pc_initial=106 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=106 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=34 nstack_initial=2): {'$phi34.1'},
             State(pc_initial=52 nstack_initial=2): {'$phi52.1'},
             State(pc_initial=66 nstack_initial=1): set(),
             State(pc_initial=68 nstack_initial=2): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=86 nstack_initial=2): {'$phi86.1'},
             State(pc_initial=100 nstack_initial=1): set(),
             State(pc_initial=102 nstack_initial=2): set(),
             State(pc_initial=106 nstack_initial=1): set(),
             State(pc_initial=116 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi102.1': State(pc_initial=70 nstack_initial=1),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi34.1': State(pc_initial=32 nstack_initial=1),
 '$phi52.1': State(pc_initial=34 nstack_initial=2),
 '$phi68.1': State(pc_initial=34 nstack_initial=2),
 '$phi86.1': State(pc_initial=70 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi100.0': {('$phi86.0', State(pc_initial=86 nstack_initial=2))},
             '$phi102.0': {('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi102.1': {('$78dup_top.5',
                            State(pc_initial=70 nstack_initial=1))},
             '$phi106.0': {('$phi100.0',
                            State(pc_initial=100 nstack_initial=1)),
                           ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi32.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi102.0', State(pc_initial=102 nstack_initial=2)),
                          ('$phi106.0', State(pc_initial=106 nstack_initial=1)),
                          ('$phi86.0', State(pc_initial=86 nstack_initial=2))},
             '$phi34.0': {('$phi32.0', State(pc_initial=32 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi52.0': {('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi52.1': {('$44dup_top.6',
                           State(pc_initial=34 nstack_initial=2))},
             '$phi66.0': {('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi68.0': {('$phi34.0', State(pc_initial=34 nstack_initial=2))},
             '$phi68.1': {('$44dup_top.6',
                           State(pc_initial=34 nstack_initial=2))},
             '$phi70.0': {('$phi66.0', State(pc_initial=66 nstack_initial=1)),
                          ('$phi68.0', State(pc_initial=68 nstack_initial=2))},
             '$phi86.0': {('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi86.1': {('$78dup_top.5',
                           State(pc_initial=70 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi100.0': {('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi102.0': {('$phi66.0', State(pc_initial=66 nstack_initial=1)),
                           ('$phi68.0', State(pc_initial=68 nstack_initial=2))},
             '$phi102.1': {('$78dup_top.5',
                            State(pc_initial=70 nstack_initial=1))},
             '$phi106.0': {('$phi34.0', State(pc_initial=34 nstack_initial=2)),
                           ('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi32.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=1)),
                          ('$phi68.0', State(pc_initial=68 nstack_initial=2)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi34.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=2)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=1)),
                          ('$phi68.0', State(pc_initial=68 nstack_initial=2)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi52.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=1)),
                          ('$phi68.0', State(pc_initial=68 nstack_initial=2)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi52.1': {('$44dup_top.6',
                           State(pc_initial=34 nstack_initial=2))},
             '$phi66.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=1)),
                          ('$phi68.0', State(pc_initial=68 nstack_initial=2)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi68.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=1)),
                          ('$phi68.0', State(pc_initial=68 nstack_initial=2)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi68.1': {('$44dup_top.6',
                           State(pc_initial=34 nstack_initial=2))},
             '$phi70.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=1))},
             '$phi86.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi86.1': {('$78dup_top.5',
                           State(pc_initial=70 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi100.0': {('$30get_iter.12',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi102.0': {('$30get_iter.12',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi102.1': {('$78dup_top.5',
                            State(pc_initial=70 nstack_initial=1))},
             '$phi106.0': {('$30get_iter.12',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi66.0', State(pc_initial=66 nstack_initial=1)),
                           ('$phi68.0', State(pc_initial=68 nstack_initial=2))},
             '$phi32.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi52.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$44dup_top.6',
                           State(pc_initial=34 nstack_initial=2))},
             '$phi66.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi68.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi68.1': {('$44dup_top.6',
                           State(pc_initial=34 nstack_initial=2))},
             '$phi70.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi86.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi86.1': {('$78dup_top.5',
                           State(pc_initial=70 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi100.0': {('$30get_iter.12',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi102.0': {('$30get_iter.12',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi102.1': {('$78dup_top.5',
                            State(pc_initial=70 nstack_initial=1))},
             '$phi106.0': {('$30get_iter.12',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi52.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$44dup_top.6',
                           State(pc_initial=34 nstack_initial=2))},
             '$phi66.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi68.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi68.1': {('$44dup_top.6',
                           State(pc_initial=34 nstack_initial=2))},
             '$phi70.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi86.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi86.1': {('$78dup_top.5',
                           State(pc_initial=70 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi100.0': {('$30get_iter.12',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi102.0': {('$30get_iter.12',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi102.1': {('$78dup_top.5',
                            State(pc_initial=70 nstack_initial=1))},
             '$phi106.0': {('$30get_iter.12',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi34.1': {('$32for_iter.2',
                           State(pc_initial=32 nstack_initial=1))},
             '$phi52.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$44dup_top.6',
                           State(pc_initial=34 nstack_initial=2))},
             '$phi66.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi68.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi68.1': {('$44dup_top.6',
                           State(pc_initial=34 nstack_initial=2))},
             '$phi70.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi86.0': {('$30get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi86.1': {('$78dup_top.5',
                           State(pc_initial=70 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi32.0': {('$30get_iter.12', State(pc_initial=0 nstack_initial=0))},
 '$phi34.1': {('$32for_iter.2', State(pc_initial=32 nstack_initial=1))},
 '$phi52.1': {('$44dup_top.6', State(pc_initial=34 nstack_initial=2))},
 '$phi86.1': {('$78dup_top.5', State(pc_initial=70 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi32.0': '$30get_iter.12'},
             State(pc_initial=32 nstack_initial=1): {'$phi34.1': '$32for_iter.2'},
             State(pc_initial=34 nstack_initial=2): {'$phi52.1': '$44dup_top.6'},
             State(pc_initial=70 nstack_initial=1): {'$phi86.1': '$78dup_top.5'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'func': '$4load_method.1', 'args': ['$x6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$const12.4'}), (14, {'value': '$const12.4'}), (16, {'res': '$16load_global.5'}), (18, {'res': '$18load_global.6'}), (20, {'res': '$x20.7'}), (22, {'func': '$18load_global.6', 'args': ['$x20.7'], 'res': '$22call_function.8'}), (24, {'res': '$const24.9'}), (26, {'lhs': '$22call_function.8', 'rhs': '$const24.9', 'res': '$26binary_subtract.10'}), (28, {'func': '$16load_global.5', 'args': ['$26binary_subtract.10'], 'res': '$28call_function.11'}), (30, {'value': '$28call_function.11', 'res': '$30get_iter.12'})), outgoing_phis={'$phi32.0': '$30get_iter.12'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$30get_iter.12',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'iterator': '$phi32.0', 'pair': '$32for_iter.1', 'indval': '$32for_iter.2', 'pred': '$32for_iter.3'}),), outgoing_phis={'$phi34.1': '$32for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: (), 34: ('$phi32.0', '$32for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=2):
AdaptBlockInfo(insts=((34, {'value': '$phi34.1'}), (36, {'res': '$x36.2'}), (38, {'res': '$i38.3'}), (40, {'index': '$i38.3', 'target': '$x36.2', 'res': '$40binary_subscr.4'}), (42, {'res': '$median42.5'}), (44, {'orig': ['$median42.5'], 'duped': ['$44dup_top.6']}), (48, {'lhs': '$40binary_subscr.4', 'rhs': '$median42.5', 'res': '$48compare_op.7'}), (50, {'pred': '$48compare_op.7'})), outgoing_phis={'$phi52.1': '$44dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$phi34.0', '$44dup_top.6'), 68: ('$phi34.0', '$44dup_top.6')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=52 nstack_initial=2):
AdaptBlockInfo(insts=((52, {'res': '$x52.2'}), (54, {'res': '$i54.3'}), (56, {'res': '$const56.4'}), (58, {'lhs': '$i54.3', 'rhs': '$const56.4', 'res': '$58binary_add.5'}), (60, {'index': '$58binary_add.5', 'target': '$x52.2', 'res': '$60binary_subscr.6'}), (62, {'lhs': '$phi52.1', 'rhs': '$60binary_subscr.6', 'res': '$62compare_op.7'}), (64, {'pred': '$62compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: ('$phi52.0',), 106: ('$phi52.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=1):
AdaptBlockInfo(insts=((66, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: ('$phi66.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=68 nstack_initial=2):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: ('$phi68.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((70, {'res': '$x70.1'}), (72, {'res': '$i72.2'}), (74, {'index': '$i72.2', 'target': '$x70.1', 'res': '$74binary_subscr.3'}), (76, {'res': '$median76.4'}), (78, {'orig': ['$median76.4'], 'duped': ['$78dup_top.5']}), (82, {'lhs': '$74binary_subscr.3', 'rhs': '$median76.4', 'res': '$82compare_op.6'}), (84, {'pred': '$82compare_op.6'})), outgoing_phis={'$phi86.1': '$78dup_top.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={86: ('$phi70.0', '$78dup_top.5'), 102: ('$phi70.0', '$78dup_top.5')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=86 nstack_initial=2):
AdaptBlockInfo(insts=((86, {'res': '$x86.2'}), (88, {'res': '$i88.3'}), (90, {'res': '$const90.4'}), (92, {'lhs': '$i88.3', 'rhs': '$const90.4', 'res': '$92binary_add.5'}), (94, {'index': '$92binary_add.5', 'target': '$x86.2', 'res': '$94binary_subscr.6'}), (96, {'lhs': '$phi86.1', 'rhs': '$94binary_subscr.6', 'res': '$96compare_op.7'}), (98, {'pred': '$96compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={100: ('$phi86.0',), 32: ('$phi86.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=100 nstack_initial=1):
AdaptBlockInfo(insts=((100, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ('$phi100.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=102 nstack_initial=2):
AdaptBlockInfo(insts=((104, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$phi102.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=106 nstack_initial=1):
AdaptBlockInfo(insts=((106, {'res': '$cp106.1'}), (108, {'res': '$const108.2'}), (110, {'lhs': '$cp106.1', 'rhs': '$const108.2', 'res': '$110inplace_add.3'}), (112, {'value': '$110inplace_add.3'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$phi106.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$cp116.0'}), (118, {'retval': '$cp116.0', 'castval': '$118return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=median) ['$2load_global.0', '$4load_method.1']
    median = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, tsfeatures.py:1064)], kws=(), vararg=None) ['$4load_method.1', 'median', 'x']
    cp = const(int, 0)                       ['cp']
    $16load_global.5 = global(range: <class 'range'>) ['$16load_global.5']
    $18load_global.6 = global(len: <built-in function len>) ['$18load_global.6']
    $22call_function.8 = call $18load_global.6(x, func=$18load_global.6, args=[Var(x, tsfeatures.py:1064)], kws=(), vararg=None) ['$18load_global.6', '$22call_function.8', 'x']
    $const24.9 = const(int, 1)               ['$const24.9']
    $26binary_subtract.10 = $22call_function.8 - $const24.9 ['$22call_function.8', '$26binary_subtract.10', '$const24.9']
    $28call_function.11 = call $16load_global.5($26binary_subtract.10, func=$16load_global.5, args=[Var($26binary_subtract.10, tsfeatures.py:1066)], kws=(), vararg=None) ['$16load_global.5', '$26binary_subtract.10', '$28call_function.11']
    $30get_iter.12 = getiter(value=$28call_function.11) ['$28call_function.11', '$30get_iter.12']
    $phi32.0 = $30get_iter.12                ['$30get_iter.12', '$phi32.0']
    jump 32                                  []
label 32:
    $32for_iter.1 = iternext(value=$phi32.0) ['$32for_iter.1', '$phi32.0']
    $32for_iter.2 = pair_first(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.2']
    $32for_iter.3 = pair_second(value=$32for_iter.1) ['$32for_iter.1', '$32for_iter.3']
    $phi34.1 = $32for_iter.2                 ['$32for_iter.2', '$phi34.1']
    branch $32for_iter.3, 34, 116            ['$32for_iter.3']
label 34:
    i = $phi34.1                             ['$phi34.1', 'i']
    $40binary_subscr.4 = getitem(value=x, index=i, fn=<built-in function getitem>) ['$40binary_subscr.4', 'i', 'x']
    $48compare_op.7 = $40binary_subscr.4 <= median ['$40binary_subscr.4', '$48compare_op.7', 'median']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48compare_op.7, func=bool50, args=(Var($48compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None) ['$48compare_op.7', '$50pred', 'bool50']
    $phi52.1 = median                        ['$phi52.1', 'median']
    branch $50pred, 52, 68                   ['$50pred']
label 52:
    $const56.4 = const(int, 1)               ['$const56.4']
    $58binary_add.5 = i + $const56.4         ['$58binary_add.5', '$const56.4', 'i']
    $60binary_subscr.6 = getitem(value=x, index=$58binary_add.5, fn=<built-in function getitem>) ['$58binary_add.5', '$60binary_subscr.6', 'x']
    $62compare_op.7 = $phi52.1 < $60binary_subscr.6 ['$60binary_subscr.6', '$62compare_op.7', '$phi52.1']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.7, func=bool64, args=(Var($62compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None) ['$62compare_op.7', '$64pred', 'bool64']
    branch $64pred, 106, 66                  ['$64pred']
label 66:
    jump 70                                  []
label 68:
    jump 70                                  []
label 70:
    $74binary_subscr.3 = getitem(value=x, index=i, fn=<built-in function getitem>) ['$74binary_subscr.3', 'i', 'x']
    $82compare_op.6 = $74binary_subscr.3 >= median ['$74binary_subscr.3', '$82compare_op.6', 'median']
    bool84 = global(bool: <class 'bool'>)    ['bool84']
    $84pred = call bool84($82compare_op.6, func=bool84, args=(Var($82compare_op.6, tsfeatures.py:1067),), kws=(), vararg=None) ['$82compare_op.6', '$84pred', 'bool84']
    $phi86.1 = median                        ['$phi86.1', 'median']
    branch $84pred, 86, 102                  ['$84pred']
label 86:
    $const90.4 = const(int, 1)               ['$const90.4']
    $92binary_add.5 = i + $const90.4         ['$92binary_add.5', '$const90.4', 'i']
    $94binary_subscr.6 = getitem(value=x, index=$92binary_add.5, fn=<built-in function getitem>) ['$92binary_add.5', '$94binary_subscr.6', 'x']
    $96compare_op.7 = $phi86.1 > $94binary_subscr.6 ['$94binary_subscr.6', '$96compare_op.7', '$phi86.1']
    bool98 = global(bool: <class 'bool'>)    ['bool98']
    $98pred = call bool98($96compare_op.7, func=bool98, args=(Var($96compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None) ['$96compare_op.7', '$98pred', 'bool98']
    branch $98pred, 100, 32                  ['$98pred']
label 100:
    jump 106                                 []
label 102:
    jump 32                                  []
label 106:
    $const108.2 = const(int, 1)              ['$const108.2']
    $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=cp, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined) ['$110inplace_add.3', '$const108.2', 'cp']
    cp = $110inplace_add.3                   ['$110inplace_add.3', 'cp']
    jump 32                                  []
label 116:
    $118return_value.1 = cast(value=cp)      ['$118return_value.1', 'cp']
    return $118return_value.1                ['$118return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=median)
DEBUG:numba.core.ssa:on stmt: median = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, tsfeatures.py:1064)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: cp = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $16load_global.5 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $18load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $22call_function.8 = call $18load_global.6(x, func=$18load_global.6, args=[Var(x, tsfeatures.py:1064)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $const24.9 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $26binary_subtract.10 = $22call_function.8 - $const24.9
DEBUG:numba.core.ssa:on stmt: $28call_function.11 = call $16load_global.5($26binary_subtract.10, func=$16load_global.5, args=[Var($26binary_subtract.10, tsfeatures.py:1066)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $30get_iter.12 = getiter(value=$28call_function.11)
DEBUG:numba.core.ssa:on stmt: $phi32.0 = $30get_iter.12
DEBUG:numba.core.ssa:on stmt: jump 32
DEBUG:numba.core.ssa:==== SSA block analysis pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: $32for_iter.1 = iternext(value=$phi32.0)
DEBUG:numba.core.ssa:on stmt: $32for_iter.2 = pair_first(value=$32for_iter.1)
DEBUG:numba.core.ssa:on stmt: $32for_iter.3 = pair_second(value=$32for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi34.1 = $32for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $32for_iter.3, 34, 116
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: i = $phi34.1
DEBUG:numba.core.ssa:on stmt: $40binary_subscr.4 = getitem(value=x, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $48compare_op.7 = $40binary_subscr.4 <= median
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48compare_op.7, func=bool50, args=(Var($48compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $phi52.1 = median
DEBUG:numba.core.ssa:on stmt: branch $50pred, 52, 68
DEBUG:numba.core.ssa:==== SSA block analysis pass on 52
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: $const56.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $58binary_add.5 = i + $const56.4
DEBUG:numba.core.ssa:on stmt: $60binary_subscr.6 = getitem(value=x, index=$58binary_add.5, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $62compare_op.7 = $phi52.1 < $60binary_subscr.6
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.7, func=bool64, args=(Var($62compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 106, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: jump 70
DEBUG:numba.core.ssa:==== SSA block analysis pass on 68
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: jump 70
DEBUG:numba.core.ssa:==== SSA block analysis pass on 70
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: $74binary_subscr.3 = getitem(value=x, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82compare_op.6 = $74binary_subscr.3 >= median
DEBUG:numba.core.ssa:on stmt: bool84 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $84pred = call bool84($82compare_op.6, func=bool84, args=(Var($82compare_op.6, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $phi86.1 = median
DEBUG:numba.core.ssa:on stmt: branch $84pred, 86, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: $const90.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $92binary_add.5 = i + $const90.4
DEBUG:numba.core.ssa:on stmt: $94binary_subscr.6 = getitem(value=x, index=$92binary_add.5, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $96compare_op.7 = $phi86.1 > $94binary_subscr.6
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.7, func=bool98, args=(Var($96compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 117
DEBUG:numba.core.ssa:==== SSA block analysis pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block analysis pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: jump 117
DEBUG:numba.core.ssa:==== SSA block analysis pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: $const108.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=cp, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: cp = $110inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 117
DEBUG:numba.core.ssa:==== SSA block analysis pass on 116
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: $118return_value.1 = cast(value=cp)
DEBUG:numba.core.ssa:on stmt: return $118return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 117
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241021f0>
DEBUG:numba.core.ssa:on stmt: jump 32
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$110inplace_add.3': [<numba.core.ir.Assign object at 0x7faa241132b0>],
             '$118return_value.1': [<numba.core.ir.Assign object at 0x7faa241138b0>],
             '$16load_global.5': [<numba.core.ir.Assign object at 0x7faa2445c130>],
             '$18load_global.6': [<numba.core.ir.Assign object at 0x7faa2445c370>],
             '$22call_function.8': [<numba.core.ir.Assign object at 0x7fa9c42c0d90>],
             '$26binary_subtract.10': [<numba.core.ir.Assign object at 0x7fa9c42c0280>],
             '$28call_function.11': [<numba.core.ir.Assign object at 0x7fa9c42c0790>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa9c42c7550>],
             '$30get_iter.12': [<numba.core.ir.Assign object at 0x7fa9c42c0430>],
             '$32for_iter.1': [<numba.core.ir.Assign object at 0x7fa9c42c0e50>],
             '$32for_iter.2': [<numba.core.ir.Assign object at 0x7fa9c42c0a00>],
             '$32for_iter.3': [<numba.core.ir.Assign object at 0x7fa9c42c0880>],
             '$40binary_subscr.4': [<numba.core.ir.Assign object at 0x7fa9c42de1c0>],
             '$48compare_op.7': [<numba.core.ir.Assign object at 0x7fa9c42de520>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa9c42e0d30>],
             '$50pred': [<numba.core.ir.Assign object at 0x7fa9c42de310>],
             '$58binary_add.5': [<numba.core.ir.Assign object at 0x7fa9c42de490>],
             '$60binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa9e01ecf10>],
             '$62compare_op.7': [<numba.core.ir.Assign object at 0x7fa9e01ec160>],
             '$64pred': [<numba.core.ir.Assign object at 0x7fa9e01ec340>],
             '$74binary_subscr.3': [<numba.core.ir.Assign object at 0x7fa9e01ecd00>],
             '$82compare_op.6': [<numba.core.ir.Assign object at 0x7fa9e01ecdf0>],
             '$84pred': [<numba.core.ir.Assign object at 0x7fa9c42f3400>],
             '$92binary_add.5': [<numba.core.ir.Assign object at 0x7faa1c3c8460>],
             '$94binary_subscr.6': [<numba.core.ir.Assign object at 0x7faa2412b670>],
             '$96compare_op.7': [<numba.core.ir.Assign object at 0x7faa2412b5b0>],
             '$98pred': [<numba.core.ir.Assign object at 0x7faa24131fa0>],
             '$const108.2': [<numba.core.ir.Assign object at 0x7faa24113610>],
             '$const24.9': [<numba.core.ir.Assign object at 0x7fa9c42c0bb0>],
             '$const56.4': [<numba.core.ir.Assign object at 0x7fa9c42de2b0>],
             '$const90.4': [<numba.core.ir.Assign object at 0x7faa1c6a4100>],
             '$phi32.0': [<numba.core.ir.Assign object at 0x7fa9c42e0c10>],
             '$phi34.1': [<numba.core.ir.Assign object at 0x7fa9c42c0850>],
             '$phi52.1': [<numba.core.ir.Assign object at 0x7fa9c42dec10>],
             '$phi86.1': [<numba.core.ir.Assign object at 0x7fa9e01ec5b0>],
             'bool50': [<numba.core.ir.Assign object at 0x7fa9c42de460>],
             'bool64': [<numba.core.ir.Assign object at 0x7fa9e01ec610>],
             'bool84': [<numba.core.ir.Assign object at 0x7fa9e03552b0>],
             'bool98': [<numba.core.ir.Assign object at 0x7faa2412bdf0>],
             'cp': [<numba.core.ir.Assign object at 0x7fa9c42e03d0>,
                    <numba.core.ir.Assign object at 0x7faa24113fa0>],
             'i': [<numba.core.ir.Assign object at 0x7fa9c42c0c10>],
             'median': [<numba.core.ir.Assign object at 0x7fa9c42e0f10>],
             'x': [<numba.core.ir.Assign object at 0x7fa9c42c7eb0>]})
DEBUG:numba.core.ssa:SSA violators {'cp'}
DEBUG:numba.core.ssa:Fix SSA violator on var cp
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=median)
DEBUG:numba.core.ssa:on stmt: median = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, tsfeatures.py:1064)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: cp = const(int, 0)
DEBUG:numba.core.ssa:first assign: cp
DEBUG:numba.core.ssa:replaced with: cp = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $16load_global.5 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $18load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $22call_function.8 = call $18load_global.6(x, func=$18load_global.6, args=[Var(x, tsfeatures.py:1064)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $const24.9 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $26binary_subtract.10 = $22call_function.8 - $const24.9
DEBUG:numba.core.ssa:on stmt: $28call_function.11 = call $16load_global.5($26binary_subtract.10, func=$16load_global.5, args=[Var($26binary_subtract.10, tsfeatures.py:1066)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $30get_iter.12 = getiter(value=$28call_function.11)
DEBUG:numba.core.ssa:on stmt: $phi32.0 = $30get_iter.12
DEBUG:numba.core.ssa:on stmt: jump 32
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: $32for_iter.1 = iternext(value=$phi32.0)
DEBUG:numba.core.ssa:on stmt: $32for_iter.2 = pair_first(value=$32for_iter.1)
DEBUG:numba.core.ssa:on stmt: $32for_iter.3 = pair_second(value=$32for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi34.1 = $32for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $32for_iter.3, 34, 116
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: i = $phi34.1
DEBUG:numba.core.ssa:on stmt: $40binary_subscr.4 = getitem(value=x, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $48compare_op.7 = $40binary_subscr.4 <= median
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48compare_op.7, func=bool50, args=(Var($48compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $phi52.1 = median
DEBUG:numba.core.ssa:on stmt: branch $50pred, 52, 68
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 52
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: $const56.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $58binary_add.5 = i + $const56.4
DEBUG:numba.core.ssa:on stmt: $60binary_subscr.6 = getitem(value=x, index=$58binary_add.5, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $62compare_op.7 = $phi52.1 < $60binary_subscr.6
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.7, func=bool64, args=(Var($62compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 106, 66
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: jump 70
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 68
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: jump 70
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 70
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: $74binary_subscr.3 = getitem(value=x, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82compare_op.6 = $74binary_subscr.3 >= median
DEBUG:numba.core.ssa:on stmt: bool84 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $84pred = call bool84($82compare_op.6, func=bool84, args=(Var($82compare_op.6, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $phi86.1 = median
DEBUG:numba.core.ssa:on stmt: branch $84pred, 86, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: $const90.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $92binary_add.5 = i + $const90.4
DEBUG:numba.core.ssa:on stmt: $94binary_subscr.6 = getitem(value=x, index=$92binary_add.5, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $96compare_op.7 = $phi86.1 > $94binary_subscr.6
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.7, func=bool98, args=(Var($96compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 117
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: jump 117
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: $const108.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=cp, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: cp = $110inplace_add.3
DEBUG:numba.core.ssa:replaced with: cp.1 = $110inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 117
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 116
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: $118return_value.1 = cast(value=cp)
DEBUG:numba.core.ssa:on stmt: return $118return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 117
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01ec100>
DEBUG:numba.core.ssa:on stmt: jump 32
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7faa241311c0>],
             106: [<numba.core.ir.Assign object at 0x7faa244473d0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=median)
DEBUG:numba.core.ssa:on stmt: median = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, tsfeatures.py:1064)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: cp = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $16load_global.5 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $18load_global.6 = global(len: <built-in function len>)
DEBUG:numba.core.ssa:on stmt: $22call_function.8 = call $18load_global.6(x, func=$18load_global.6, args=[Var(x, tsfeatures.py:1064)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $const24.9 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $26binary_subtract.10 = $22call_function.8 - $const24.9
DEBUG:numba.core.ssa:on stmt: $28call_function.11 = call $16load_global.5($26binary_subtract.10, func=$16load_global.5, args=[Var($26binary_subtract.10, tsfeatures.py:1066)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $30get_iter.12 = getiter(value=$28call_function.11)
DEBUG:numba.core.ssa:on stmt: $phi32.0 = $30get_iter.12
DEBUG:numba.core.ssa:on stmt: jump 32
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: $32for_iter.1 = iternext(value=$phi32.0)
DEBUG:numba.core.ssa:on stmt: $32for_iter.2 = pair_first(value=$32for_iter.1)
DEBUG:numba.core.ssa:on stmt: $32for_iter.3 = pair_second(value=$32for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi34.1 = $32for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $32for_iter.3, 34, 116
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: i = $phi34.1
DEBUG:numba.core.ssa:on stmt: $40binary_subscr.4 = getitem(value=x, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $48compare_op.7 = $40binary_subscr.4 <= median
DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48compare_op.7, func=bool50, args=(Var($48compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $phi52.1 = median
DEBUG:numba.core.ssa:on stmt: branch $50pred, 52, 68
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 52
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: $const56.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $58binary_add.5 = i + $const56.4
DEBUG:numba.core.ssa:on stmt: $60binary_subscr.6 = getitem(value=x, index=$58binary_add.5, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $62compare_op.7 = $phi52.1 < $60binary_subscr.6
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.7, func=bool64, args=(Var($62compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 106, 66
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: jump 70
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 68
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: jump 70
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 70
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: $74binary_subscr.3 = getitem(value=x, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $82compare_op.6 = $74binary_subscr.3 >= median
DEBUG:numba.core.ssa:on stmt: bool84 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $84pred = call bool84($82compare_op.6, func=bool84, args=(Var($82compare_op.6, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $phi86.1 = median
DEBUG:numba.core.ssa:on stmt: branch $84pred, 86, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: $const90.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $92binary_add.5 = i + $const90.4
DEBUG:numba.core.ssa:on stmt: $94binary_subscr.6 = getitem(value=x, index=$92binary_add.5, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $96compare_op.7 = $phi86.1 > $94binary_subscr.6
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.7, func=bool98, args=(Var($96compare_op.7, tsfeatures.py:1067),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 117
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: jump 106
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: jump 117
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: $const108.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=cp, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='cp' stmt=$110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=cp, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 106
DEBUG:numba.core.ssa:idom 34 from label 106
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 32 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 32
DEBUG:numba.core.ssa:find_def_from_top label 32
DEBUG:numba.core.ssa:insert phi node cp.2 = phi(incoming_values=[], incoming_blocks=[]) at 32
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def cp = const(int, 0)
DEBUG:numba.core.ssa:find_def_from_bottom label 117
DEBUG:numba.core.ssa:find_def_from_top label 117
DEBUG:numba.core.ssa:insert phi node cp.3 = phi(incoming_values=[], incoming_blocks=[]) at 117
DEBUG:numba.core.ssa:find_def_from_bottom label 102
DEBUG:numba.core.ssa:find_def_from_top label 102
DEBUG:numba.core.ssa:idom 70 from label 102
DEBUG:numba.core.ssa:find_def_from_bottom label 70
DEBUG:numba.core.ssa:find_def_from_top label 70
DEBUG:numba.core.ssa:idom 34 from label 70
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 32 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 32
DEBUG:numba.core.ssa:incoming_def cp.2 = phi(incoming_values=[Var(cp, tsfeatures.py:1065)], incoming_blocks=[0])
DEBUG:numba.core.ssa:find_def_from_bottom label 86
DEBUG:numba.core.ssa:find_def_from_top label 86
DEBUG:numba.core.ssa:idom 70 from label 86
DEBUG:numba.core.ssa:find_def_from_bottom label 70
DEBUG:numba.core.ssa:find_def_from_top label 70
DEBUG:numba.core.ssa:idom 34 from label 70
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 32 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 32
DEBUG:numba.core.ssa:incoming_def cp.2 = phi(incoming_values=[Var(cp, tsfeatures.py:1065)], incoming_blocks=[0])
DEBUG:numba.core.ssa:find_def_from_bottom label 106
DEBUG:numba.core.ssa:incoming_def cp.1 = $110inplace_add.3
DEBUG:numba.core.ssa:incoming_def cp.3 = phi(incoming_values=[Var(cp.2, tsfeatures.py:1068), Var(cp.2, tsfeatures.py:1068), Var(cp.1, tsfeatures.py:1068)], incoming_blocks=[102, 86, 106])
DEBUG:numba.core.ssa:replaced with: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=cp.2, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: cp.1 = $110inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 117
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 116
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: $118return_value.1 = cast(value=cp)
DEBUG:numba.core.ssa:find_def var='cp' stmt=$118return_value.1 = cast(value=cp)
DEBUG:numba.core.ssa:find_def_from_top label 116
DEBUG:numba.core.ssa:idom 32 from label 116
DEBUG:numba.core.ssa:find_def_from_bottom label 32
DEBUG:numba.core.ssa:replaced with: $118return_value.1 = cast(value=cp.2)
DEBUG:numba.core.ssa:on stmt: return $118return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 117
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa24447a90>
DEBUG:numba.core.ssa:on stmt: jump 32
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1264)
           2	LOAD_FAST(arg=0, lineno=1264)
           4	LOAD_METHOD(arg=0, lineno=1264)
           6	CALL_METHOD(arg=0, lineno=1264)
           8	STORE_FAST(arg=1, lineno=1264)
          10	LOAD_FAST(arg=1, lineno=1265)
          12	LOAD_ATTR(arg=1, lineno=1265)
          14	LOAD_CONST(arg=1, lineno=1265)
          16	BINARY_SUBSCR(arg=None, lineno=1265)
          18	STORE_FAST(arg=2, lineno=1265)
          20	LOAD_GLOBAL(arg=2, lineno=1266)
          22	LOAD_FAST(arg=1, lineno=1266)
          24	LOAD_FAST(arg=2, lineno=1266)
          26	CALL_FUNCTION(arg=2, lineno=1266)
          28	RETURN_VALUE(arg=None, lineno=1266)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1264)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1264)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1264)
DEBUG:numba.core.byteflow:stack ['$a2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=1264)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=1, lineno=1264)
DEBUG:numba.core.byteflow:stack ['$6call_method.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1265)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=1265)
DEBUG:numba.core.byteflow:stack ['$temp_arry10.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=1265)
DEBUG:numba.core.byteflow:stack ['$12load_attr.4']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=1265)
DEBUG:numba.core.byteflow:stack ['$12load_attr.4', '$const14.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=STORE_FAST(arg=2, lineno=1265)
DEBUG:numba.core.byteflow:stack ['$16binary_subscr.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=1266)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=1266)
DEBUG:numba.core.byteflow:stack ['$20load_global.7']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=1266)
DEBUG:numba.core.byteflow:stack ['$20load_global.7', '$temp_arry22.8']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=CALL_FUNCTION(arg=2, lineno=1266)
DEBUG:numba.core.byteflow:stack ['$20load_global.7', '$temp_arry22.8', '$n24.9']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=RETURN_VALUE(arg=None, lineno=1266)
DEBUG:numba.core.byteflow:stack ['$26call_function.10']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'value': '$6call_method.2'}), (10, {'res': '$temp_arry10.3'}), (12, {'item': '$temp_arry10.3', 'res': '$12load_attr.4'}), (14, {'res': '$const14.5'}), (16, {'index': '$const14.5', 'target': '$12load_attr.4', 'res': '$16binary_subscr.6'}), (18, {'value': '$16binary_subscr.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$temp_arry22.8'}), (24, {'res': '$n24.9'}), (26, {'func': '$20load_global.7', 'args': ['$temp_arry22.8', '$n24.9'], 'res': '$26call_function.10'}), (28, {'retval': '$26call_function.10', 'castval': '$28return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    $4load_method.1 = getattr(value=a, attr=flatten) ['$4load_method.1', 'a']
    temp_arry = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None) ['$4load_method.1', 'temp_arry']
    $12load_attr.4 = getattr(value=temp_arry, attr=shape) ['$12load_attr.4', 'temp_arry']
    $const14.5 = const(int, 0)               ['$const14.5']
    n = getitem(value=$12load_attr.4, index=$const14.5, fn=<built-in function getitem>) ['$12load_attr.4', '$const14.5', 'n']
    $20load_global.7 = global(_median_inner: <function _median_inner at 0x7faa400fdf70>) ['$20load_global.7']
    $26call_function.10 = call $20load_global.7(temp_arry, n, func=$20load_global.7, args=[Var(temp_arry, arraymath.py:1264), Var(n, arraymath.py:1265)], kws=(), vararg=None) ['$20load_global.7', '$26call_function.10', 'n', 'temp_arry']
    $28return_value.11 = cast(value=$26call_function.10) ['$26call_function.10', '$28return_value.11']
    return $28return_value.11                ['$28return_value.11']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2445ecd0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=a, attr=flatten)
DEBUG:numba.core.ssa:on stmt: temp_arry = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $12load_attr.4 = getattr(value=temp_arry, attr=shape)
DEBUG:numba.core.ssa:on stmt: $const14.5 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: n = static_getitem(value=$12load_attr.4, index=0, index_var=$const14.5, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20load_global.7 = global(_median_inner: <function _median_inner at 0x7faa400fdf70>)
DEBUG:numba.core.ssa:on stmt: $26call_function.10 = call $20load_global.7(temp_arry, n, func=$20load_global.7, args=[Var(temp_arry, arraymath.py:1264), Var(n, arraymath.py:1265)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $28return_value.11 = cast(value=$26call_function.10)
DEBUG:numba.core.ssa:on stmt: return $28return_value.11
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$12load_attr.4': [<numba.core.ir.Assign object at 0x7faa1c6eefa0>],
             '$20load_global.7': [<numba.core.ir.Assign object at 0x7faa1c6ee820>],
             '$26call_function.10': [<numba.core.ir.Assign object at 0x7faa1c6eea30>],
             '$28return_value.11': [<numba.core.ir.Assign object at 0x7faa1c6ee370>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7faa24131a30>],
             '$const14.5': [<numba.core.ir.Assign object at 0x7faa1c6ee730>],
             'a': [<numba.core.ir.Assign object at 0x7faa24113970>],
             'n': [<numba.core.ir.Assign object at 0x7faa1c6ee5e0>],
             'temp_arry': [<numba.core.ir.Assign object at 0x7faa241023a0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1246)
           2	LOAD_CONST(arg=1, lineno=1246)
           4	STORE_FAST(arg=2, lineno=1246)
           6	LOAD_FAST(arg=1, lineno=1247)
           8	LOAD_CONST(arg=2, lineno=1247)
          10	BINARY_SUBTRACT(arg=None, lineno=1247)
          12	STORE_FAST(arg=3, lineno=1247)
          14	LOAD_FAST(arg=1, lineno=1248)
          16	LOAD_CONST(arg=2, lineno=1248)
          18	BINARY_RSHIFT(arg=None, lineno=1248)
          20	STORE_FAST(arg=4, lineno=1248)
          22	LOAD_FAST(arg=1, lineno=1249)
          24	LOAD_CONST(arg=2, lineno=1249)
          26	BINARY_AND(arg=None, lineno=1249)
          28	LOAD_CONST(arg=1, lineno=1249)
          30	COMPARE_OP(arg=2, lineno=1249)
          32	POP_JUMP_IF_FALSE(arg=68, lineno=1249)
          34	LOAD_GLOBAL(arg=0, lineno=1250)
          36	LOAD_FAST(arg=0, lineno=1250)
          38	LOAD_FAST(arg=4, lineno=1250)
          40	LOAD_CONST(arg=2, lineno=1250)
          42	BINARY_SUBTRACT(arg=None, lineno=1250)
          44	LOAD_FAST(arg=2, lineno=1250)
          46	LOAD_FAST(arg=3, lineno=1250)
          48	CALL_FUNCTION(arg=4, lineno=1250)
          50	UNPACK_SEQUENCE(arg=2, lineno=1250)
          52	STORE_FAST(arg=5, lineno=1250)
          54	STORE_FAST(arg=6, lineno=1250)
          56	LOAD_FAST(arg=5, lineno=1251)
          58	LOAD_FAST(arg=6, lineno=1251)
          60	BINARY_ADD(arg=None, lineno=1251)
          62	LOAD_CONST(arg=3, lineno=1251)
          64	BINARY_TRUE_DIVIDE(arg=None, lineno=1251)
          66	RETURN_VALUE(arg=None, lineno=1251)
>         68	LOAD_GLOBAL(arg=1, lineno=1253)
          70	LOAD_FAST(arg=0, lineno=1253)
          72	LOAD_FAST(arg=4, lineno=1253)
          74	LOAD_FAST(arg=2, lineno=1253)
          76	LOAD_FAST(arg=3, lineno=1253)
          78	CALL_FUNCTION(arg=4, lineno=1253)
          80	RETURN_VALUE(arg=None, lineno=1253)
          82	LOAD_CONST(arg=4, lineno=1253)
          84	RETURN_VALUE(arg=None, lineno=1253)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1246)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1246)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1246)
DEBUG:numba.core.byteflow:stack ['$const2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=1247)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_CONST(arg=2, lineno=1247)
DEBUG:numba.core.byteflow:stack ['$n6.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=1247)
DEBUG:numba.core.byteflow:stack ['$n6.1', '$const8.2']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=STORE_FAST(arg=3, lineno=1247)
DEBUG:numba.core.byteflow:stack ['$10binary_subtract.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1248)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=1248)
DEBUG:numba.core.byteflow:stack ['$n14.4']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=BINARY_RSHIFT(arg=None, lineno=1248)
DEBUG:numba.core.byteflow:stack ['$n14.4', '$const16.5']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=STORE_FAST(arg=4, lineno=1248)
DEBUG:numba.core.byteflow:stack ['$18binary_rshift.6']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=1249)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=1249)
DEBUG:numba.core.byteflow:stack ['$n22.7']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_AND(arg=None, lineno=1249)
DEBUG:numba.core.byteflow:stack ['$n22.7', '$const24.8']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=1249)
DEBUG:numba.core.byteflow:stack ['$26binary_and.9']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=COMPARE_OP(arg=2, lineno=1249)
DEBUG:numba.core.byteflow:stack ['$26binary_and.9', '$const28.10']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=68, lineno=1249)
DEBUG:numba.core.byteflow:stack ['$30compare_op.11']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_GLOBAL(arg=0, lineno=1250)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=1250)
DEBUG:numba.core.byteflow:stack ['$34load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=1250)
DEBUG:numba.core.byteflow:stack ['$34load_global.0', '$temp_arry36.1']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=1250)
DEBUG:numba.core.byteflow:stack ['$34load_global.0', '$temp_arry36.1', '$half38.2']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=1250)
DEBUG:numba.core.byteflow:stack ['$34load_global.0', '$temp_arry36.1', '$half38.2', '$const40.3']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=1250)
DEBUG:numba.core.byteflow:stack ['$34load_global.0', '$temp_arry36.1', '$42binary_subtract.4']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=3, lineno=1250)
DEBUG:numba.core.byteflow:stack ['$34load_global.0', '$temp_arry36.1', '$42binary_subtract.4', '$low44.5']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=CALL_FUNCTION(arg=4, lineno=1250)
DEBUG:numba.core.byteflow:stack ['$34load_global.0', '$temp_arry36.1', '$42binary_subtract.4', '$low44.5', '$high46.6']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=UNPACK_SEQUENCE(arg=2, lineno=1250)
DEBUG:numba.core.byteflow:stack ['$48call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=STORE_FAST(arg=5, lineno=1250)
DEBUG:numba.core.byteflow:stack ['$50unpack_sequence.9', '$50unpack_sequence.8']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=STORE_FAST(arg=6, lineno=1250)
DEBUG:numba.core.byteflow:stack ['$50unpack_sequence.9']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=5, lineno=1251)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=1251)
DEBUG:numba.core.byteflow:stack ['$a56.11']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_ADD(arg=None, lineno=1251)
DEBUG:numba.core.byteflow:stack ['$a56.11', '$b58.12']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_CONST(arg=3, lineno=1251)
DEBUG:numba.core.byteflow:stack ['$60binary_add.13']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1251)
DEBUG:numba.core.byteflow:stack ['$60binary_add.13', '$const62.14']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=1251)
DEBUG:numba.core.byteflow:stack ['$64binary_true_divide.15']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=1253)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1253)
DEBUG:numba.core.byteflow:stack ['$68load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=1253)
DEBUG:numba.core.byteflow:stack ['$68load_global.0', '$temp_arry70.1']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=1253)
DEBUG:numba.core.byteflow:stack ['$68load_global.0', '$temp_arry70.1', '$half72.2']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=3, lineno=1253)
DEBUG:numba.core.byteflow:stack ['$68load_global.0', '$temp_arry70.1', '$half72.2', '$low74.3']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=CALL_FUNCTION(arg=4, lineno=1253)
DEBUG:numba.core.byteflow:stack ['$68load_global.0', '$temp_arry70.1', '$half72.2', '$low74.3', '$high76.4']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=1253)
DEBUG:numba.core.byteflow:stack ['$78call_function.5']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$n6.1'}), (8, {'res': '$const8.2'}), (10, {'lhs': '$n6.1', 'rhs': '$const8.2', 'res': '$10binary_subtract.3'}), (12, {'value': '$10binary_subtract.3'}), (14, {'res': '$n14.4'}), (16, {'res': '$const16.5'}), (18, {'lhs': '$n14.4', 'rhs': '$const16.5', 'res': '$18binary_rshift.6'}), (20, {'value': '$18binary_rshift.6'}), (22, {'res': '$n22.7'}), (24, {'res': '$const24.8'}), (26, {'lhs': '$n22.7', 'rhs': '$const24.8', 'res': '$26binary_and.9'}), (28, {'res': '$const28.10'}), (30, {'lhs': '$26binary_and.9', 'rhs': '$const28.10', 'res': '$30compare_op.11'}), (32, {'pred': '$30compare_op.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 68: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'res': '$temp_arry36.1'}), (38, {'res': '$half38.2'}), (40, {'res': '$const40.3'}), (42, {'lhs': '$half38.2', 'rhs': '$const40.3', 'res': '$42binary_subtract.4'}), (44, {'res': '$low44.5'}), (46, {'res': '$high46.6'}), (48, {'func': '$34load_global.0', 'args': ['$temp_arry36.1', '$42binary_subtract.4', '$low44.5', '$high46.6'], 'res': '$48call_function.7'}), (50, {'iterable': '$48call_function.7', 'stores': ['$50unpack_sequence.8', '$50unpack_sequence.9'], 'tupleobj': '$50unpack_sequence.10'}), (52, {'value': '$50unpack_sequence.8'}), (54, {'value': '$50unpack_sequence.9'}), (56, {'res': '$a56.11'}), (58, {'res': '$b58.12'}), (60, {'lhs': '$a56.11', 'rhs': '$b58.12', 'res': '$60binary_add.13'}), (62, {'res': '$const62.14'}), (64, {'lhs': '$60binary_add.13', 'rhs': '$const62.14', 'res': '$64binary_true_divide.15'}), (66, {'retval': '$64binary_true_divide.15', 'castval': '$66return_value.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$temp_arry70.1'}), (72, {'res': '$half72.2'}), (74, {'res': '$low74.3'}), (76, {'res': '$high76.4'}), (78, {'func': '$68load_global.0', 'args': ['$temp_arry70.1', '$half72.2', '$low74.3', '$high76.4'], 'res': '$78call_function.5'}), (80, {'retval': '$78call_function.5', 'castval': '$80return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    temp_arry = arg(0, name=temp_arry)       ['temp_arry']
    n = arg(1, name=n)                       ['n']
    low = const(int, 0)                      ['low']
    $const8.2 = const(int, 1)                ['$const8.2']
    high = n - $const8.2                     ['$const8.2', 'high', 'n']
    $const16.5 = const(int, 1)               ['$const16.5']
    half = n >> $const16.5                   ['$const16.5', 'half', 'n']
    $const24.8 = const(int, 1)               ['$const24.8']
    $26binary_and.9 = n & $const24.8         ['$26binary_and.9', '$const24.8', 'n']
    $const28.10 = const(int, 0)              ['$const28.10']
    $30compare_op.11 = $26binary_and.9 == $const28.10 ['$26binary_and.9', '$30compare_op.11', '$const28.10']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.11, func=bool32, args=(Var($30compare_op.11, arraymath.py:1249),), kws=(), vararg=None) ['$30compare_op.11', '$32pred', 'bool32']
    branch $32pred, 34, 68                   ['$32pred']
label 34:
    $34load_global.0 = global(_select_two: <function _select_two at 0x7faa400fde50>) ['$34load_global.0']
    $const40.3 = const(int, 1)               ['$const40.3']
    $42binary_subtract.4 = half - $const40.3 ['$42binary_subtract.4', '$const40.3', 'half']
    $48call_function.7 = call $34load_global.0(temp_arry, $42binary_subtract.4, low, high, func=$34load_global.0, args=[Var(temp_arry, arraymath.py:1246), Var($42binary_subtract.4, arraymath.py:1250), Var(low, arraymath.py:1246), Var(high, arraymath.py:1247)], kws=(), vararg=None) ['$34load_global.0', '$42binary_subtract.4', '$48call_function.7', 'high', 'low', 'temp_arry']
    $50unpack_sequence.10 = exhaust_iter(value=$48call_function.7, count=2) ['$48call_function.7', '$50unpack_sequence.10']
    $50unpack_sequence.8 = static_getitem(value=$50unpack_sequence.10, index=0, index_var=None, fn=<built-in function getitem>) ['$50unpack_sequence.10', '$50unpack_sequence.8']
    $50unpack_sequence.9 = static_getitem(value=$50unpack_sequence.10, index=1, index_var=None, fn=<built-in function getitem>) ['$50unpack_sequence.10', '$50unpack_sequence.9']
    a = $50unpack_sequence.8                 ['$50unpack_sequence.8', 'a']
    b = $50unpack_sequence.9                 ['$50unpack_sequence.9', 'b']
    $60binary_add.13 = a + b                 ['$60binary_add.13', 'a', 'b']
    $const62.14 = const(int, 2)              ['$const62.14']
    $64binary_true_divide.15 = $60binary_add.13 / $const62.14 ['$60binary_add.13', '$64binary_true_divide.15', '$const62.14']
    $66return_value.16 = cast(value=$64binary_true_divide.15) ['$64binary_true_divide.15', '$66return_value.16']
    return $66return_value.16                ['$66return_value.16']
label 68:
    $68load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>) ['$68load_global.0']
    $78call_function.5 = call $68load_global.0(temp_arry, half, low, high, func=$68load_global.0, args=[Var(temp_arry, arraymath.py:1246), Var(half, arraymath.py:1248), Var(low, arraymath.py:1246), Var(high, arraymath.py:1247)], kws=(), vararg=None) ['$68load_global.0', '$78call_function.5', 'half', 'high', 'low', 'temp_arry']
    $80return_value.6 = cast(value=$78call_function.5) ['$78call_function.5', '$80return_value.6']
    return $80return_value.6                 ['$80return_value.6']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2445eb80>
DEBUG:numba.core.ssa:on stmt: temp_arry = arg(0, name=temp_arry)
DEBUG:numba.core.ssa:on stmt: n = arg(1, name=n)
DEBUG:numba.core.ssa:on stmt: low = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const8.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high = n - $const8.2
DEBUG:numba.core.ssa:on stmt: $const16.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: half = n >> $const16.5
DEBUG:numba.core.ssa:on stmt: $const24.8 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $26binary_and.9 = n & $const24.8
DEBUG:numba.core.ssa:on stmt: $const28.10 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.11 = $26binary_and.9 == $const28.10
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.11, func=bool32, args=(Var($30compare_op.11, arraymath.py:1249),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 68
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2445eb80>
DEBUG:numba.core.ssa:on stmt: $34load_global.0 = global(_select_two: <function _select_two at 0x7faa400fde50>)
DEBUG:numba.core.ssa:on stmt: $const40.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $42binary_subtract.4 = half - $const40.3
DEBUG:numba.core.ssa:on stmt: $48call_function.7 = call $34load_global.0(temp_arry, $42binary_subtract.4, low, high, func=$34load_global.0, args=[Var(temp_arry, arraymath.py:1246), Var($42binary_subtract.4, arraymath.py:1250), Var(low, arraymath.py:1246), Var(high, arraymath.py:1247)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $50unpack_sequence.10 = exhaust_iter(value=$48call_function.7, count=2)
DEBUG:numba.core.ssa:on stmt: $50unpack_sequence.8 = static_getitem(value=$50unpack_sequence.10, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $50unpack_sequence.9 = static_getitem(value=$50unpack_sequence.10, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: a = $50unpack_sequence.8
DEBUG:numba.core.ssa:on stmt: b = $50unpack_sequence.9
DEBUG:numba.core.ssa:on stmt: $60binary_add.13 = a + b
DEBUG:numba.core.ssa:on stmt: $const62.14 = const(int, 2)
DEBUG:numba.core.ssa:on stmt: $64binary_true_divide.15 = $60binary_add.13 / $const62.14
DEBUG:numba.core.ssa:on stmt: $66return_value.16 = cast(value=$64binary_true_divide.15)
DEBUG:numba.core.ssa:on stmt: return $66return_value.16
DEBUG:numba.core.ssa:==== SSA block analysis pass on 68
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2445eb80>
DEBUG:numba.core.ssa:on stmt: $68load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $78call_function.5 = call $68load_global.0(temp_arry, half, low, high, func=$68load_global.0, args=[Var(temp_arry, arraymath.py:1246), Var(half, arraymath.py:1248), Var(low, arraymath.py:1246), Var(high, arraymath.py:1247)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $80return_value.6 = cast(value=$78call_function.5)
DEBUG:numba.core.ssa:on stmt: return $80return_value.6
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$26binary_and.9': [<numba.core.ir.Assign object at 0x7fa9c4269e50>],
             '$30compare_op.11': [<numba.core.ir.Assign object at 0x7fa9c4269c40>],
             '$32pred': [<numba.core.ir.Assign object at 0x7fa9c4269400>],
             '$34load_global.0': [<numba.core.ir.Assign object at 0x7faa2446e640>],
             '$42binary_subtract.4': [<numba.core.ir.Assign object at 0x7fa9c4269a00>],
             '$48call_function.7': [<numba.core.ir.Assign object at 0x7faa24627970>],
             '$50unpack_sequence.10': [<numba.core.ir.Assign object at 0x7faa24627160>],
             '$50unpack_sequence.8': [<numba.core.ir.Assign object at 0x7faa24627490>],
             '$50unpack_sequence.9': [<numba.core.ir.Assign object at 0x7faa24627190>],
             '$60binary_add.13': [<numba.core.ir.Assign object at 0x7faa24627ee0>],
             '$64binary_true_divide.15': [<numba.core.ir.Assign object at 0x7faa24627c70>],
             '$66return_value.16': [<numba.core.ir.Assign object at 0x7faa24627c40>],
             '$68load_global.0': [<numba.core.ir.Assign object at 0x7faa24627880>],
             '$78call_function.5': [<numba.core.ir.Assign object at 0x7faa2410ccd0>],
             '$80return_value.6': [<numba.core.ir.Assign object at 0x7faa2410ca30>],
             '$const16.5': [<numba.core.ir.Assign object at 0x7fa9c425c730>],
             '$const24.8': [<numba.core.ir.Assign object at 0x7fa9c425cbe0>],
             '$const28.10': [<numba.core.ir.Assign object at 0x7fa9c4269100>],
             '$const40.3': [<numba.core.ir.Assign object at 0x7fa9c4269ac0>],
             '$const62.14': [<numba.core.ir.Assign object at 0x7faa246279a0>],
             '$const8.2': [<numba.core.ir.Assign object at 0x7faa244626a0>],
             'a': [<numba.core.ir.Assign object at 0x7faa24627790>],
             'b': [<numba.core.ir.Assign object at 0x7faa246274f0>],
             'bool32': [<numba.core.ir.Assign object at 0x7fa9c42692e0>],
             'half': [<numba.core.ir.Assign object at 0x7fa9c425c8e0>],
             'high': [<numba.core.ir.Assign object at 0x7fa9e01f18e0>],
             'low': [<numba.core.ir.Assign object at 0x7faa2446ea30>],
             'n': [<numba.core.ir.Assign object at 0x7faa2446e0d0>],
             'temp_arry': [<numba.core.ir.Assign object at 0x7faa2446e910>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1224)
>          2	LOAD_FAST(arg=3, lineno=1224)
           4	LOAD_FAST(arg=2, lineno=1224)
           6	COMPARE_OP(arg=4, lineno=1224)
           8	POP_JUMP_IF_TRUE(arg=14, lineno=1224)
          10	LOAD_GLOBAL(arg=0, lineno=1224)
          12	RAISE_VARARGS(arg=1, lineno=1224)
>         14	LOAD_GLOBAL(arg=1, lineno=1225)
          16	LOAD_FAST(arg=0, lineno=1225)
          18	LOAD_FAST(arg=2, lineno=1225)
          20	LOAD_FAST(arg=3, lineno=1225)
          22	CALL_FUNCTION(arg=3, lineno=1225)
          24	STORE_FAST(arg=4, lineno=1225)
          26	LOAD_FAST(arg=4, lineno=1226)
          28	LOAD_FAST(arg=1, lineno=1226)
          30	COMPARE_OP(arg=0, lineno=1226)
          32	POP_JUMP_IF_FALSE(arg=44, lineno=1226)
          34	LOAD_FAST(arg=4, lineno=1227)
          36	LOAD_CONST(arg=1, lineno=1227)
          38	BINARY_ADD(arg=None, lineno=1227)
          40	STORE_FAST(arg=2, lineno=1227)
          42	JUMP_ABSOLUTE(arg=2, lineno=1227)
>         44	LOAD_FAST(arg=4, lineno=1228)
          46	LOAD_FAST(arg=1, lineno=1228)
          48	LOAD_CONST(arg=1, lineno=1228)
          50	BINARY_ADD(arg=None, lineno=1228)
          52	COMPARE_OP(arg=4, lineno=1228)
          54	POP_JUMP_IF_FALSE(arg=66, lineno=1228)
          56	LOAD_FAST(arg=4, lineno=1229)
          58	LOAD_CONST(arg=1, lineno=1229)
          60	BINARY_SUBTRACT(arg=None, lineno=1229)
          62	STORE_FAST(arg=3, lineno=1229)
          64	JUMP_ABSOLUTE(arg=2, lineno=1229)
>         66	LOAD_FAST(arg=4, lineno=1230)
          68	LOAD_FAST(arg=1, lineno=1230)
          70	COMPARE_OP(arg=2, lineno=1230)
          72	POP_JUMP_IF_FALSE(arg=100, lineno=1230)
          74	LOAD_GLOBAL(arg=2, lineno=1231)
          76	LOAD_FAST(arg=0, lineno=1231)
          78	LOAD_FAST(arg=1, lineno=1231)
          80	LOAD_CONST(arg=1, lineno=1231)
          82	BINARY_ADD(arg=None, lineno=1231)
          84	LOAD_FAST(arg=4, lineno=1231)
          86	LOAD_CONST(arg=1, lineno=1231)
          88	BINARY_ADD(arg=None, lineno=1231)
          90	LOAD_FAST(arg=3, lineno=1231)
          92	CALL_FUNCTION(arg=4, lineno=1231)
          94	POP_TOP(arg=None, lineno=1231)
          96	JUMP_ABSOLUTE(arg=122, lineno=1232)
          98	JUMP_ABSOLUTE(arg=2, lineno=1232)
>        100	LOAD_GLOBAL(arg=2, lineno=1234)
         102	LOAD_FAST(arg=0, lineno=1234)
         104	LOAD_FAST(arg=1, lineno=1234)
         106	LOAD_FAST(arg=2, lineno=1234)
         108	LOAD_FAST(arg=4, lineno=1234)
         110	LOAD_CONST(arg=1, lineno=1234)
         112	BINARY_SUBTRACT(arg=None, lineno=1234)
         114	CALL_FUNCTION(arg=4, lineno=1234)
         116	POP_TOP(arg=None, lineno=1234)
         118	JUMP_ABSOLUTE(arg=122, lineno=1235)
         120	JUMP_ABSOLUTE(arg=2, lineno=1235)
>        122	LOAD_FAST(arg=0, lineno=1237)
         124	LOAD_FAST(arg=1, lineno=1237)
         126	BINARY_SUBSCR(arg=None, lineno=1237)
         128	LOAD_FAST(arg=0, lineno=1237)
         130	LOAD_FAST(arg=1, lineno=1237)
         132	LOAD_CONST(arg=1, lineno=1237)
         134	BINARY_ADD(arg=None, lineno=1237)
         136	BINARY_SUBSCR(arg=None, lineno=1237)
         138	BUILD_TUPLE(arg=2, lineno=1237)
         140	RETURN_VALUE(arg=None, lineno=1237)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1224)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=2 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=3, lineno=1224)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=1224)
DEBUG:numba.core.byteflow:stack ['$high2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=1224)
DEBUG:numba.core.byteflow:stack ['$high2.0', '$low4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=POP_JUMP_IF_TRUE(arg=14, lineno=1224)
DEBUG:numba.core.byteflow:stack ['$6compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=1224)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RAISE_VARARGS(arg=1, lineno=1224)
DEBUG:numba.core.byteflow:stack ['$10load_global.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=1225)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1225)
DEBUG:numba.core.byteflow:stack ['$14load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1225)
DEBUG:numba.core.byteflow:stack ['$14load_global.0', '$arry16.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=1225)
DEBUG:numba.core.byteflow:stack ['$14load_global.0', '$arry16.1', '$low18.2']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=CALL_FUNCTION(arg=3, lineno=1225)
DEBUG:numba.core.byteflow:stack ['$14load_global.0', '$arry16.1', '$low18.2', '$high20.3']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1225)
DEBUG:numba.core.byteflow:stack ['$22call_function.4']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=1226)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=1226)
DEBUG:numba.core.byteflow:stack ['$i26.5']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=1226)
DEBUG:numba.core.byteflow:stack ['$i26.5', '$k28.6']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=44, lineno=1226)
DEBUG:numba.core.byteflow:stack ['$30compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=4, lineno=1227)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1227)
DEBUG:numba.core.byteflow:stack ['$i34.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_ADD(arg=None, lineno=1227)
DEBUG:numba.core.byteflow:stack ['$i34.0', '$const36.1']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=STORE_FAST(arg=2, lineno=1227)
DEBUG:numba.core.byteflow:stack ['$38binary_add.2']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=JUMP_ABSOLUTE(arg=2, lineno=1227)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=2 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1228)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=1, lineno=1228)
DEBUG:numba.core.byteflow:stack ['$i44.0']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_CONST(arg=1, lineno=1228)
DEBUG:numba.core.byteflow:stack ['$i44.0', '$k46.1']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=BINARY_ADD(arg=None, lineno=1228)
DEBUG:numba.core.byteflow:stack ['$i44.0', '$k46.1', '$const48.2']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=COMPARE_OP(arg=4, lineno=1228)
DEBUG:numba.core.byteflow:stack ['$i44.0', '$50binary_add.3']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=POP_JUMP_IF_FALSE(arg=66, lineno=1228)
DEBUG:numba.core.byteflow:stack ['$52compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=2 nstack_initial=0), State(pc_initial=56 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=1229)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_CONST(arg=1, lineno=1229)
DEBUG:numba.core.byteflow:stack ['$i56.0']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=BINARY_SUBTRACT(arg=None, lineno=1229)
DEBUG:numba.core.byteflow:stack ['$i56.0', '$const58.1']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=STORE_FAST(arg=3, lineno=1229)
DEBUG:numba.core.byteflow:stack ['$60binary_subtract.2']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=JUMP_ABSOLUTE(arg=2, lineno=1229)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=2, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=2 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=1230)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=1, lineno=1230)
DEBUG:numba.core.byteflow:stack ['$i66.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=COMPARE_OP(arg=2, lineno=1230)
DEBUG:numba.core.byteflow:stack ['$i66.0', '$k68.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=100, lineno=1230)
DEBUG:numba.core.byteflow:stack ['$70compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=100, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=2 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=100 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_GLOBAL(arg=2, lineno=1231)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=1231)
DEBUG:numba.core.byteflow:stack ['$74load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=1231)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$arry76.1']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_CONST(arg=1, lineno=1231)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$arry76.1', '$k78.2']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=BINARY_ADD(arg=None, lineno=1231)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$arry76.1', '$k78.2', '$const80.3']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=4, lineno=1231)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$arry76.1', '$82binary_add.4']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_CONST(arg=1, lineno=1231)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$arry76.1', '$82binary_add.4', '$i84.5']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1231)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$arry76.1', '$82binary_add.4', '$i84.5', '$const86.6']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=3, lineno=1231)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$arry76.1', '$82binary_add.4', '$88binary_add.7']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=CALL_FUNCTION(arg=4, lineno=1231)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$arry76.1', '$82binary_add.4', '$88binary_add.7', '$high90.8']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=POP_TOP(arg=None, lineno=1231)
DEBUG:numba.core.byteflow:stack ['$92call_function.9']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=JUMP_ABSOLUTE(arg=122, lineno=1232)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=122, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_GLOBAL(arg=2, lineno=1234)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=0, lineno=1234)
DEBUG:numba.core.byteflow:stack ['$100load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_FAST(arg=1, lineno=1234)
DEBUG:numba.core.byteflow:stack ['$100load_global.0', '$arry102.1']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=2, lineno=1234)
DEBUG:numba.core.byteflow:stack ['$100load_global.0', '$arry102.1', '$k104.2']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=LOAD_FAST(arg=4, lineno=1234)
DEBUG:numba.core.byteflow:stack ['$100load_global.0', '$arry102.1', '$k104.2', '$low106.3']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1234)
DEBUG:numba.core.byteflow:stack ['$100load_global.0', '$arry102.1', '$k104.2', '$low106.3', '$i108.4']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=BINARY_SUBTRACT(arg=None, lineno=1234)
DEBUG:numba.core.byteflow:stack ['$100load_global.0', '$arry102.1', '$k104.2', '$low106.3', '$i108.4', '$const110.5']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=CALL_FUNCTION(arg=4, lineno=1234)
DEBUG:numba.core.byteflow:stack ['$100load_global.0', '$arry102.1', '$k104.2', '$low106.3', '$112binary_subtract.6']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=POP_TOP(arg=None, lineno=1234)
DEBUG:numba.core.byteflow:stack ['$114call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=JUMP_ABSOLUTE(arg=122, lineno=1235)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=122, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1237)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=124, inst=LOAD_FAST(arg=1, lineno=1237)
DEBUG:numba.core.byteflow:stack ['$arry122.0']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=1237)
DEBUG:numba.core.byteflow:stack ['$arry122.0', '$k124.1']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=LOAD_FAST(arg=0, lineno=1237)
DEBUG:numba.core.byteflow:stack ['$126binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_FAST(arg=1, lineno=1237)
DEBUG:numba.core.byteflow:stack ['$126binary_subscr.2', '$arry128.3']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1237)
DEBUG:numba.core.byteflow:stack ['$126binary_subscr.2', '$arry128.3', '$k130.4']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=BINARY_ADD(arg=None, lineno=1237)
DEBUG:numba.core.byteflow:stack ['$126binary_subscr.2', '$arry128.3', '$k130.4', '$const132.5']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=BINARY_SUBSCR(arg=None, lineno=1237)
DEBUG:numba.core.byteflow:stack ['$126binary_subscr.2', '$arry128.3', '$134binary_add.6']
DEBUG:numba.core.byteflow:dispatch pc=138, inst=BUILD_TUPLE(arg=2, lineno=1237)
DEBUG:numba.core.byteflow:stack ['$126binary_subscr.2', '$136binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=140, inst=RETURN_VALUE(arg=None, lineno=1237)
DEBUG:numba.core.byteflow:stack ['$138build_tuple.8']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=122 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=2 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=2 nstack_initial=0):
AdaptBlockInfo(insts=((2, {'res': '$high2.0'}), (4, {'res': '$low4.1'}), (6, {'lhs': '$high2.0', 'rhs': '$low4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'exc': '$10load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$14load_global.0'}), (16, {'res': '$arry16.1'}), (18, {'res': '$low18.2'}), (20, {'res': '$high20.3'}), (22, {'func': '$14load_global.0', 'args': ['$arry16.1', '$low18.2', '$high20.3'], 'res': '$22call_function.4'}), (24, {'value': '$22call_function.4'}), (26, {'res': '$i26.5'}), (28, {'res': '$k28.6'}), (30, {'lhs': '$i26.5', 'rhs': '$k28.6', 'res': '$30compare_op.7'}), (32, {'pred': '$30compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 44: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$i34.0'}), (36, {'res': '$const36.1'}), (38, {'lhs': '$i34.0', 'rhs': '$const36.1', 'res': '$38binary_add.2'}), (40, {'value': '$38binary_add.2'}), (42, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$i44.0'}), (46, {'res': '$k46.1'}), (48, {'res': '$const48.2'}), (50, {'lhs': '$k46.1', 'rhs': '$const48.2', 'res': '$50binary_add.3'}), (52, {'lhs': '$i44.0', 'rhs': '$50binary_add.3', 'res': '$52compare_op.4'}), (54, {'pred': '$52compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 66: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$i56.0'}), (58, {'res': '$const58.1'}), (60, {'lhs': '$i56.0', 'rhs': '$const58.1', 'res': '$60binary_subtract.2'}), (62, {'value': '$60binary_subtract.2'}), (64, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={2: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$i66.0'}), (68, {'res': '$k68.1'}), (70, {'lhs': '$i66.0', 'rhs': '$k68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 100: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$74load_global.0'}), (76, {'res': '$arry76.1'}), (78, {'res': '$k78.2'}), (80, {'res': '$const80.3'}), (82, {'lhs': '$k78.2', 'rhs': '$const80.3', 'res': '$82binary_add.4'}), (84, {'res': '$i84.5'}), (86, {'res': '$const86.6'}), (88, {'lhs': '$i84.5', 'rhs': '$const86.6', 'res': '$88binary_add.7'}), (90, {'res': '$high90.8'}), (92, {'func': '$74load_global.0', 'args': ['$arry76.1', '$82binary_add.4', '$88binary_add.7', '$high90.8'], 'res': '$92call_function.9'}), (96, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={122: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=((100, {'res': '$100load_global.0'}), (102, {'res': '$arry102.1'}), (104, {'res': '$k104.2'}), (106, {'res': '$low106.3'}), (108, {'res': '$i108.4'}), (110, {'res': '$const110.5'}), (112, {'lhs': '$i108.4', 'rhs': '$const110.5', 'res': '$112binary_subtract.6'}), (114, {'func': '$100load_global.0', 'args': ['$arry102.1', '$k104.2', '$low106.3', '$112binary_subtract.6'], 'res': '$114call_function.7'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={122: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=((122, {'res': '$arry122.0'}), (124, {'res': '$k124.1'}), (126, {'index': '$k124.1', 'target': '$arry122.0', 'res': '$126binary_subscr.2'}), (128, {'res': '$arry128.3'}), (130, {'res': '$k130.4'}), (132, {'res': '$const132.5'}), (134, {'lhs': '$k130.4', 'rhs': '$const132.5', 'res': '$134binary_add.6'}), (136, {'index': '$134binary_add.6', 'target': '$arry128.3', 'res': '$136binary_subscr.7'}), (138, {'items': ['$126binary_subscr.2', '$136binary_subscr.7'], 'res': '$138build_tuple.8'}), (140, {'retval': '$138build_tuple.8', 'castval': '$140return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arry = arg(0, name=arry)                 ['arry']
    k = arg(1, name=k)                       ['k']
    low = arg(2, name=low)                   ['low']
    high = arg(3, name=high)                 ['high']
    jump 2                                   []
label 2:
    $6compare_op.2 = high > low              ['$6compare_op.2', 'high', 'low']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arraymath.py:1224),), kws=(), vararg=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 14, 10                    ['$8pred']
label 10:
    $10load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$10load_global.0']
    raise $10load_global.0                   ['$10load_global.0']
label 14:
    $14load_global.0 = global(_partition: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>) ['$14load_global.0']
    i = call $14load_global.0(arry, low, high, func=$14load_global.0, args=[Var(arry, arraymath.py:1224), Var(low, arraymath.py:1224), Var(high, arraymath.py:1224)], kws=(), vararg=None) ['$14load_global.0', 'arry', 'high', 'i', 'low']
    $30compare_op.7 = i < k                  ['$30compare_op.7', 'i', 'k']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arraymath.py:1226),), kws=(), vararg=None) ['$30compare_op.7', '$32pred', 'bool32']
    branch $32pred, 34, 44                   ['$32pred']
label 34:
    $const36.1 = const(int, 1)               ['$const36.1']
    low = i + $const36.1                     ['$const36.1', 'i', 'low']
    jump 2                                   []
label 44:
    $const48.2 = const(int, 1)               ['$const48.2']
    $50binary_add.3 = k + $const48.2         ['$50binary_add.3', '$const48.2', 'k']
    $52compare_op.4 = i > $50binary_add.3    ['$50binary_add.3', '$52compare_op.4', 'i']
    bool54 = global(bool: <class 'bool'>)    ['bool54']
    $54pred = call bool54($52compare_op.4, func=bool54, args=(Var($52compare_op.4, arraymath.py:1228),), kws=(), vararg=None) ['$52compare_op.4', '$54pred', 'bool54']
    branch $54pred, 56, 66                   ['$54pred']
label 56:
    $const58.1 = const(int, 1)               ['$const58.1']
    high = i - $const58.1                    ['$const58.1', 'high', 'i']
    jump 2                                   []
label 66:
    $70compare_op.2 = i == k                 ['$70compare_op.2', 'i', 'k']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arraymath.py:1230),), kws=(), vararg=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 100                  ['$72pred']
label 74:
    $74load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>) ['$74load_global.0']
    $const80.3 = const(int, 1)               ['$const80.3']
    $82binary_add.4 = k + $const80.3         ['$82binary_add.4', '$const80.3', 'k']
    $const86.6 = const(int, 1)               ['$const86.6']
    $88binary_add.7 = i + $const86.6         ['$88binary_add.7', '$const86.6', 'i']
    $92call_function.9 = call $74load_global.0(arry, $82binary_add.4, $88binary_add.7, high, func=$74load_global.0, args=[Var(arry, arraymath.py:1224), Var($82binary_add.4, arraymath.py:1231), Var($88binary_add.7, arraymath.py:1231), Var(high, arraymath.py:1224)], kws=(), vararg=None) ['$74load_global.0', '$82binary_add.4', '$88binary_add.7', '$92call_function.9', 'arry', 'high']
    jump 122                                 []
label 100:
    $100load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>) ['$100load_global.0']
    $const110.5 = const(int, 1)              ['$const110.5']
    $112binary_subtract.6 = i - $const110.5  ['$112binary_subtract.6', '$const110.5', 'i']
    $114call_function.7 = call $100load_global.0(arry, k, low, $112binary_subtract.6, func=$100load_global.0, args=[Var(arry, arraymath.py:1224), Var(k, arraymath.py:1224), Var(low, arraymath.py:1224), Var($112binary_subtract.6, arraymath.py:1234)], kws=(), vararg=None) ['$100load_global.0', '$112binary_subtract.6', '$114call_function.7', 'arry', 'k', 'low']
    jump 122                                 []
label 122:
    $126binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>) ['$126binary_subscr.2', 'arry', 'k']
    $const132.5 = const(int, 1)              ['$const132.5']
    $134binary_add.6 = k + $const132.5       ['$134binary_add.6', '$const132.5', 'k']
    $136binary_subscr.7 = getitem(value=arry, index=$134binary_add.6, fn=<built-in function getitem>) ['$134binary_add.6', '$136binary_subscr.7', 'arry']
    $138build_tuple.8 = build_tuple(items=[Var($126binary_subscr.2, arraymath.py:1237), Var($136binary_subscr.7, arraymath.py:1237)]) ['$126binary_subscr.2', '$136binary_subscr.7', '$138build_tuple.8']
    $140return_value.9 = cast(value=$138build_tuple.8) ['$138build_tuple.8', '$140return_value.9']
    return $140return_value.9                ['$140return_value.9']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: jump 2
DEBUG:numba.core.ssa:==== SSA block analysis pass on 2
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = high > low
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arraymath.py:1224),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block analysis pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $14load_global.0 = global(_partition: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $14load_global.0(arry, low, high, func=$14load_global.0, args=[Var(arry, arraymath.py:1224), Var(low, arraymath.py:1224), Var(high, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = i < k
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arraymath.py:1226),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 44
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $const36.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low = i + $const36.1
DEBUG:numba.core.ssa:on stmt: jump 123
DEBUG:numba.core.ssa:==== SSA block analysis pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $const48.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $50binary_add.3 = k + $const48.2
DEBUG:numba.core.ssa:on stmt: $52compare_op.4 = i > $50binary_add.3
DEBUG:numba.core.ssa:on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $54pred = call bool54($52compare_op.4, func=bool54, args=(Var($52compare_op.4, arraymath.py:1228),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $54pred, 56, 66
DEBUG:numba.core.ssa:==== SSA block analysis pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $const58.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high = i - $const58.1
DEBUG:numba.core.ssa:on stmt: jump 123
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = i == k
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arraymath.py:1230),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 100
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $const80.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $82binary_add.4 = k + $const80.3
DEBUG:numba.core.ssa:on stmt: $const86.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88binary_add.7 = i + $const86.6
DEBUG:numba.core.ssa:on stmt: $92call_function.9 = call $74load_global.0(arry, $82binary_add.4, $88binary_add.7, high, func=$74load_global.0, args=[Var(arry, arraymath.py:1224), Var($82binary_add.4, arraymath.py:1231), Var($88binary_add.7, arraymath.py:1231), Var(high, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 122
DEBUG:numba.core.ssa:==== SSA block analysis pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $100load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $const110.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $112binary_subtract.6 = i - $const110.5
DEBUG:numba.core.ssa:on stmt: $114call_function.7 = call $100load_global.0(arry, k, low, $112binary_subtract.6, func=$100load_global.0, args=[Var(arry, arraymath.py:1224), Var(k, arraymath.py:1224), Var(low, arraymath.py:1224), Var($112binary_subtract.6, arraymath.py:1234)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 122
DEBUG:numba.core.ssa:==== SSA block analysis pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $126binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const132.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $134binary_add.6 = k + $const132.5
DEBUG:numba.core.ssa:on stmt: $136binary_subscr.7 = getitem(value=arry, index=$134binary_add.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138build_tuple.8 = build_tuple(items=[Var($126binary_subscr.2, arraymath.py:1237), Var($136binary_subscr.7, arraymath.py:1237)])
DEBUG:numba.core.ssa:on stmt: $140return_value.9 = cast(value=$138build_tuple.8)
DEBUG:numba.core.ssa:on stmt: return $140return_value.9
DEBUG:numba.core.ssa:==== SSA block analysis pass on 123
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: jump 2
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$100load_global.0': [<numba.core.ir.Assign object at 0x7faa240fd640>],
             '$10load_global.0': [<numba.core.ir.Assign object at 0x7faa2412cca0>],
             '$112binary_subtract.6': [<numba.core.ir.Assign object at 0x7faa240fdf70>],
             '$114call_function.7': [<numba.core.ir.Assign object at 0x7faa240fd6d0>],
             '$126binary_subscr.2': [<numba.core.ir.Assign object at 0x7fa9e06b1460>],
             '$134binary_add.6': [<numba.core.ir.Assign object at 0x7fa9e06b16a0>],
             '$136binary_subscr.7': [<numba.core.ir.Assign object at 0x7fa9e06b1580>],
             '$138build_tuple.8': [<numba.core.ir.Assign object at 0x7fa9e06b1fa0>],
             '$140return_value.9': [<numba.core.ir.Assign object at 0x7fa9e06b1040>],
             '$14load_global.0': [<numba.core.ir.Assign object at 0x7faa2411d2e0>],
             '$30compare_op.7': [<numba.core.ir.Assign object at 0x7faa1c6886d0>],
             '$32pred': [<numba.core.ir.Assign object at 0x7fa9c433d340>],
             '$50binary_add.3': [<numba.core.ir.Assign object at 0x7fa9c433dfd0>],
             '$52compare_op.4': [<numba.core.ir.Assign object at 0x7fa9c433deb0>],
             '$54pred': [<numba.core.ir.Assign object at 0x7fa9c433d700>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7faa2412cd60>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x7fa9e06a8670>],
             '$72pred': [<numba.core.ir.Assign object at 0x7fa9e0692700>],
             '$74load_global.0': [<numba.core.ir.Assign object at 0x7fa9e0692eb0>],
             '$82binary_add.4': [<numba.core.ir.Assign object at 0x7fa9e0692820>],
             '$88binary_add.7': [<numba.core.ir.Assign object at 0x7faa24123340>],
             '$8pred': [<numba.core.ir.Assign object at 0x7faa2412c070>],
             '$92call_function.9': [<numba.core.ir.Assign object at 0x7fa9e0692910>],
             '$const110.5': [<numba.core.ir.Assign object at 0x7faa240fd100>],
             '$const132.5': [<numba.core.ir.Assign object at 0x7fa9e06b1e20>],
             '$const36.1': [<numba.core.ir.Assign object at 0x7fa9c433d100>],
             '$const48.2': [<numba.core.ir.Assign object at 0x7fa9c433da60>],
             '$const58.1': [<numba.core.ir.Assign object at 0x7fa9e068bfa0>],
             '$const80.3': [<numba.core.ir.Assign object at 0x7fa9e0692250>],
             '$const86.6': [<numba.core.ir.Assign object at 0x7fa9e0692100>],
             'arry': [<numba.core.ir.Assign object at 0x7faa2446e040>],
             'bool32': [<numba.core.ir.Assign object at 0x7faa1c688df0>],
             'bool54': [<numba.core.ir.Assign object at 0x7fa9c433d580>],
             'bool72': [<numba.core.ir.Assign object at 0x7fa9e06924f0>],
             'bool8': [<numba.core.ir.Assign object at 0x7faa2412c5b0>],
             'high': [<numba.core.ir.Assign object at 0x7faa2412c520>,
                      <numba.core.ir.Assign object at 0x7fa9e06a8910>],
             'i': [<numba.core.ir.Assign object at 0x7faa1c6aa820>],
             'k': [<numba.core.ir.Assign object at 0x7faa2446e1c0>],
             'low': [<numba.core.ir.Assign object at 0x7faa2445ed00>,
                     <numba.core.ir.Assign object at 0x7fa9c433d220>]})
DEBUG:numba.core.ssa:SSA violators {'high', 'low'}
DEBUG:numba.core.ssa:Fix SSA violator on var high
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:first assign: high
DEBUG:numba.core.ssa:replaced with: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: jump 2
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 2
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = high > low
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arraymath.py:1224),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $14load_global.0 = global(_partition: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $14load_global.0(arry, low, high, func=$14load_global.0, args=[Var(arry, arraymath.py:1224), Var(low, arraymath.py:1224), Var(high, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = i < k
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arraymath.py:1226),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $const36.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low = i + $const36.1
DEBUG:numba.core.ssa:on stmt: jump 123
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $const48.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $50binary_add.3 = k + $const48.2
DEBUG:numba.core.ssa:on stmt: $52compare_op.4 = i > $50binary_add.3
DEBUG:numba.core.ssa:on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $54pred = call bool54($52compare_op.4, func=bool54, args=(Var($52compare_op.4, arraymath.py:1228),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $54pred, 56, 66
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $const58.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high = i - $const58.1
DEBUG:numba.core.ssa:replaced with: high.1 = i - $const58.1
DEBUG:numba.core.ssa:on stmt: jump 123
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = i == k
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arraymath.py:1230),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 100
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $const80.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $82binary_add.4 = k + $const80.3
DEBUG:numba.core.ssa:on stmt: $const86.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88binary_add.7 = i + $const86.6
DEBUG:numba.core.ssa:on stmt: $92call_function.9 = call $74load_global.0(arry, $82binary_add.4, $88binary_add.7, high, func=$74load_global.0, args=[Var(arry, arraymath.py:1224), Var($82binary_add.4, arraymath.py:1231), Var($88binary_add.7, arraymath.py:1231), Var(high, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 122
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $100load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $const110.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $112binary_subtract.6 = i - $const110.5
DEBUG:numba.core.ssa:on stmt: $114call_function.7 = call $100load_global.0(arry, k, low, $112binary_subtract.6, func=$100load_global.0, args=[Var(arry, arraymath.py:1224), Var(k, arraymath.py:1224), Var(low, arraymath.py:1224), Var($112binary_subtract.6, arraymath.py:1234)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 122
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: $126binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const132.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $134binary_add.6 = k + $const132.5
DEBUG:numba.core.ssa:on stmt: $136binary_subscr.7 = getitem(value=arry, index=$134binary_add.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138build_tuple.8 = build_tuple(items=[Var($126binary_subscr.2, arraymath.py:1237), Var($136binary_subscr.7, arraymath.py:1237)])
DEBUG:numba.core.ssa:on stmt: $140return_value.9 = cast(value=$138build_tuple.8)
DEBUG:numba.core.ssa:on stmt: return $140return_value.9
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 123
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241233a0>
DEBUG:numba.core.ssa:on stmt: jump 2
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7faa241c9490>],
             56: [<numba.core.ir.Assign object at 0x7fa9e019fa00>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: jump 2
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 2
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = high > low
DEBUG:numba.core.ssa:find_def var='high' stmt=$6compare_op.2 = high > low
DEBUG:numba.core.ssa:find_def_from_top label 2
DEBUG:numba.core.ssa:insert phi node high.2 = phi(incoming_values=[], incoming_blocks=[]) at 2
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def high = arg(3, name=high)
DEBUG:numba.core.ssa:find_def_from_bottom label 123
DEBUG:numba.core.ssa:find_def_from_top label 123
DEBUG:numba.core.ssa:insert phi node high.3 = phi(incoming_values=[], incoming_blocks=[]) at 123
DEBUG:numba.core.ssa:find_def_from_bottom label 56
DEBUG:numba.core.ssa:incoming_def high.1 = i - $const58.1
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 14 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:idom 2 from label 14
DEBUG:numba.core.ssa:find_def_from_bottom label 2
DEBUG:numba.core.ssa:incoming_def high.2 = phi(incoming_values=[Var(high, arraymath.py:1224)], incoming_blocks=[0])
DEBUG:numba.core.ssa:incoming_def high.3 = phi(incoming_values=[Var(high.1, arraymath.py:1229), Var(high.2, arraymath.py:1224)], incoming_blocks=[56, 34])
DEBUG:numba.core.ssa:replaced with: $6compare_op.2 = high.2 > low
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arraymath.py:1224),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: $14load_global.0 = global(_partition: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $14load_global.0(arry, low, high, func=$14load_global.0, args=[Var(arry, arraymath.py:1224), Var(low, arraymath.py:1224), Var(high, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='high' stmt=i = call $14load_global.0(arry, low, high, func=$14load_global.0, args=[Var(arry, arraymath.py:1224), Var(low, arraymath.py:1224), Var(high, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:idom 2 from label 14
DEBUG:numba.core.ssa:find_def_from_bottom label 2
DEBUG:numba.core.ssa:replaced with: i = call $14load_global.0(arry, low, high.2, func=$14load_global.0, args=[Var(arry, arraymath.py:1224), Var(low, arraymath.py:1224), Var(high.2, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = i < k
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arraymath.py:1226),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: $const36.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low = i + $const36.1
DEBUG:numba.core.ssa:on stmt: jump 123
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: $const48.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $50binary_add.3 = k + $const48.2
DEBUG:numba.core.ssa:on stmt: $52compare_op.4 = i > $50binary_add.3
DEBUG:numba.core.ssa:on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $54pred = call bool54($52compare_op.4, func=bool54, args=(Var($52compare_op.4, arraymath.py:1228),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $54pred, 56, 66
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: $const58.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high.1 = i - $const58.1
DEBUG:numba.core.ssa:on stmt: jump 123
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = i == k
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arraymath.py:1230),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 100
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $const80.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $82binary_add.4 = k + $const80.3
DEBUG:numba.core.ssa:on stmt: $const86.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88binary_add.7 = i + $const86.6
DEBUG:numba.core.ssa:on stmt: $92call_function.9 = call $74load_global.0(arry, $82binary_add.4, $88binary_add.7, high, func=$74load_global.0, args=[Var(arry, arraymath.py:1224), Var($82binary_add.4, arraymath.py:1231), Var($88binary_add.7, arraymath.py:1231), Var(high, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='high' stmt=$92call_function.9 = call $74load_global.0(arry, $82binary_add.4, $88binary_add.7, high, func=$74load_global.0, args=[Var(arry, arraymath.py:1224), Var($82binary_add.4, arraymath.py:1231), Var($88binary_add.7, arraymath.py:1231), Var(high, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def_from_top label 74
DEBUG:numba.core.ssa:idom 66 from label 74
DEBUG:numba.core.ssa:find_def_from_bottom label 66
DEBUG:numba.core.ssa:find_def_from_top label 66
DEBUG:numba.core.ssa:idom 44 from label 66
DEBUG:numba.core.ssa:find_def_from_bottom label 44
DEBUG:numba.core.ssa:find_def_from_top label 44
DEBUG:numba.core.ssa:idom 14 from label 44
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:idom 2 from label 14
DEBUG:numba.core.ssa:find_def_from_bottom label 2
DEBUG:numba.core.ssa:replaced with: $92call_function.9 = call $74load_global.0(arry, $82binary_add.4, $88binary_add.7, high.2, func=$74load_global.0, args=[Var(arry, arraymath.py:1224), Var($82binary_add.4, arraymath.py:1231), Var($88binary_add.7, arraymath.py:1231), Var(high.2, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 122
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: $100load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $const110.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $112binary_subtract.6 = i - $const110.5
DEBUG:numba.core.ssa:on stmt: $114call_function.7 = call $100load_global.0(arry, k, low, $112binary_subtract.6, func=$100load_global.0, args=[Var(arry, arraymath.py:1224), Var(k, arraymath.py:1224), Var(low, arraymath.py:1224), Var($112binary_subtract.6, arraymath.py:1234)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 122
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: $126binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const132.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $134binary_add.6 = k + $const132.5
DEBUG:numba.core.ssa:on stmt: $136binary_subscr.7 = getitem(value=arry, index=$134binary_add.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138build_tuple.8 = build_tuple(items=[Var($126binary_subscr.2, arraymath.py:1237), Var($136binary_subscr.7, arraymath.py:1237)])
DEBUG:numba.core.ssa:on stmt: $140return_value.9 = cast(value=$138build_tuple.8)
DEBUG:numba.core.ssa:on stmt: return $140return_value.9
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 123
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa240cb280>
DEBUG:numba.core.ssa:on stmt: jump 2
DEBUG:numba.core.ssa:Fix SSA violator on var low
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:first assign: low
DEBUG:numba.core.ssa:replaced with: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: jump 2
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 2
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: high.2 = phi(incoming_values=[Var(high, arraymath.py:1224), Var(high.3, arraymath.py:1224)], incoming_blocks=[0, 123])
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = high.2 > low
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arraymath.py:1224),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: $14load_global.0 = global(_partition: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $14load_global.0(arry, low, high.2, func=$14load_global.0, args=[Var(arry, arraymath.py:1224), Var(low, arraymath.py:1224), Var(high.2, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = i < k
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arraymath.py:1226),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: $const36.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low = i + $const36.1
DEBUG:numba.core.ssa:replaced with: low.1 = i + $const36.1
DEBUG:numba.core.ssa:on stmt: jump 123
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: $const48.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $50binary_add.3 = k + $const48.2
DEBUG:numba.core.ssa:on stmt: $52compare_op.4 = i > $50binary_add.3
DEBUG:numba.core.ssa:on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $54pred = call bool54($52compare_op.4, func=bool54, args=(Var($52compare_op.4, arraymath.py:1228),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $54pred, 56, 66
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: $const58.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high.1 = i - $const58.1
DEBUG:numba.core.ssa:on stmt: jump 123
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = i == k
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arraymath.py:1230),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 100
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $const80.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $82binary_add.4 = k + $const80.3
DEBUG:numba.core.ssa:on stmt: $const86.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88binary_add.7 = i + $const86.6
DEBUG:numba.core.ssa:on stmt: $92call_function.9 = call $74load_global.0(arry, $82binary_add.4, $88binary_add.7, high.2, func=$74load_global.0, args=[Var(arry, arraymath.py:1224), Var($82binary_add.4, arraymath.py:1231), Var($88binary_add.7, arraymath.py:1231), Var(high.2, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 122
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: $100load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $const110.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $112binary_subtract.6 = i - $const110.5
DEBUG:numba.core.ssa:on stmt: $114call_function.7 = call $100load_global.0(arry, k, low, $112binary_subtract.6, func=$100load_global.0, args=[Var(arry, arraymath.py:1224), Var(k, arraymath.py:1224), Var(low, arraymath.py:1224), Var($112binary_subtract.6, arraymath.py:1234)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 122
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: $126binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const132.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $134binary_add.6 = k + $const132.5
DEBUG:numba.core.ssa:on stmt: $136binary_subscr.7 = getitem(value=arry, index=$134binary_add.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138build_tuple.8 = build_tuple(items=[Var($126binary_subscr.2, arraymath.py:1237), Var($136binary_subscr.7, arraymath.py:1237)])
DEBUG:numba.core.ssa:on stmt: $140return_value.9 = cast(value=$138build_tuple.8)
DEBUG:numba.core.ssa:on stmt: return $140return_value.9
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 123
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240cba90>
DEBUG:numba.core.ssa:on stmt: high.3 = phi(incoming_values=[Var(high.1, arraymath.py:1229), Var(high.2, arraymath.py:1224)], incoming_blocks=[56, 34])
DEBUG:numba.core.ssa:on stmt: jump 2
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7faa240cb190>],
             34: [<numba.core.ir.Assign object at 0x7faa241d7940>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: jump 2
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 2
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: high.2 = phi(incoming_values=[Var(high, arraymath.py:1224), Var(high.3, arraymath.py:1224)], incoming_blocks=[0, 123])
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = high.2 > low
DEBUG:numba.core.ssa:find_def var='low' stmt=$6compare_op.2 = high.2 > low
DEBUG:numba.core.ssa:find_def_from_top label 2
DEBUG:numba.core.ssa:insert phi node low.2 = phi(incoming_values=[], incoming_blocks=[]) at 2
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def low = arg(2, name=low)
DEBUG:numba.core.ssa:find_def_from_bottom label 123
DEBUG:numba.core.ssa:find_def_from_top label 123
DEBUG:numba.core.ssa:insert phi node low.3 = phi(incoming_values=[], incoming_blocks=[]) at 123
DEBUG:numba.core.ssa:find_def_from_bottom label 56
DEBUG:numba.core.ssa:find_def_from_top label 56
DEBUG:numba.core.ssa:idom 44 from label 56
DEBUG:numba.core.ssa:find_def_from_bottom label 44
DEBUG:numba.core.ssa:find_def_from_top label 44
DEBUG:numba.core.ssa:idom 14 from label 44
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:idom 2 from label 14
DEBUG:numba.core.ssa:find_def_from_bottom label 2
DEBUG:numba.core.ssa:incoming_def low.2 = phi(incoming_values=[Var(low, arraymath.py:1224)], incoming_blocks=[0])
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:incoming_def low.1 = i + $const36.1
DEBUG:numba.core.ssa:incoming_def low.3 = phi(incoming_values=[Var(low.2, arraymath.py:1224), Var(low.1, arraymath.py:1227)], incoming_blocks=[56, 34])
DEBUG:numba.core.ssa:replaced with: $6compare_op.2 = high.2 > low.2
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arraymath.py:1224),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 14, 10
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: $10load_global.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'AssertionError'>
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: $14load_global.0 = global(_partition: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $14load_global.0(arry, low, high.2, func=$14load_global.0, args=[Var(arry, arraymath.py:1224), Var(low, arraymath.py:1224), Var(high.2, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='low' stmt=i = call $14load_global.0(arry, low, high.2, func=$14load_global.0, args=[Var(arry, arraymath.py:1224), Var(low, arraymath.py:1224), Var(high.2, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:idom 2 from label 14
DEBUG:numba.core.ssa:find_def_from_bottom label 2
DEBUG:numba.core.ssa:replaced with: i = call $14load_global.0(arry, low.2, high.2, func=$14load_global.0, args=[Var(arry, arraymath.py:1224), Var(low.2, arraymath.py:1224), Var(high.2, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = i < k
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arraymath.py:1226),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: $const36.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low.1 = i + $const36.1
DEBUG:numba.core.ssa:on stmt: jump 123
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: $const48.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $50binary_add.3 = k + $const48.2
DEBUG:numba.core.ssa:on stmt: $52compare_op.4 = i > $50binary_add.3
DEBUG:numba.core.ssa:on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $54pred = call bool54($52compare_op.4, func=bool54, args=(Var($52compare_op.4, arraymath.py:1228),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $54pred, 56, 66
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: $const58.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high.1 = i - $const58.1
DEBUG:numba.core.ssa:on stmt: jump 123
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = i == k
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arraymath.py:1230),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 100
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $const80.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $82binary_add.4 = k + $const80.3
DEBUG:numba.core.ssa:on stmt: $const86.6 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88binary_add.7 = i + $const86.6
DEBUG:numba.core.ssa:on stmt: $92call_function.9 = call $74load_global.0(arry, $82binary_add.4, $88binary_add.7, high.2, func=$74load_global.0, args=[Var(arry, arraymath.py:1224), Var($82binary_add.4, arraymath.py:1231), Var($88binary_add.7, arraymath.py:1231), Var(high.2, arraymath.py:1224)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 122
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: $100load_global.0 = global(_select: <function _select_factory.<locals>._select at 0x7faa400fdca0>)
DEBUG:numba.core.ssa:on stmt: $const110.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $112binary_subtract.6 = i - $const110.5
DEBUG:numba.core.ssa:on stmt: $114call_function.7 = call $100load_global.0(arry, k, low, $112binary_subtract.6, func=$100load_global.0, args=[Var(arry, arraymath.py:1224), Var(k, arraymath.py:1224), Var(low, arraymath.py:1224), Var($112binary_subtract.6, arraymath.py:1234)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='low' stmt=$114call_function.7 = call $100load_global.0(arry, k, low, $112binary_subtract.6, func=$100load_global.0, args=[Var(arry, arraymath.py:1224), Var(k, arraymath.py:1224), Var(low, arraymath.py:1224), Var($112binary_subtract.6, arraymath.py:1234)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def_from_top label 100
DEBUG:numba.core.ssa:idom 66 from label 100
DEBUG:numba.core.ssa:find_def_from_bottom label 66
DEBUG:numba.core.ssa:find_def_from_top label 66
DEBUG:numba.core.ssa:idom 44 from label 66
DEBUG:numba.core.ssa:find_def_from_bottom label 44
DEBUG:numba.core.ssa:find_def_from_top label 44
DEBUG:numba.core.ssa:idom 14 from label 44
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:idom 2 from label 14
DEBUG:numba.core.ssa:find_def_from_bottom label 2
DEBUG:numba.core.ssa:replaced with: $114call_function.7 = call $100load_global.0(arry, k, low.2, $112binary_subtract.6, func=$100load_global.0, args=[Var(arry, arraymath.py:1224), Var(k, arraymath.py:1224), Var(low.2, arraymath.py:1224), Var($112binary_subtract.6, arraymath.py:1234)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 122
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 122
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: $126binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const132.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $134binary_add.6 = k + $const132.5
DEBUG:numba.core.ssa:on stmt: $136binary_subscr.7 = getitem(value=arry, index=$134binary_add.6, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $138build_tuple.8 = build_tuple(items=[Var($126binary_subscr.2, arraymath.py:1237), Var($136binary_subscr.7, arraymath.py:1237)])
DEBUG:numba.core.ssa:on stmt: $140return_value.9 = cast(value=$138build_tuple.8)
DEBUG:numba.core.ssa:on stmt: return $140return_value.9
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 123
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c41d5cd0>
DEBUG:numba.core.ssa:on stmt: high.3 = phi(incoming_values=[Var(high.1, arraymath.py:1229), Var(high.2, arraymath.py:1224)], incoming_blocks=[56, 34])
DEBUG:numba.core.ssa:on stmt: jump 2
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1155)
           2	LOAD_FAST(arg=1, lineno=1155)
           4	LOAD_FAST(arg=2, lineno=1155)
           6	BINARY_ADD(arg=None, lineno=1155)
           8	LOAD_CONST(arg=1, lineno=1155)
          10	BINARY_RSHIFT(arg=None, lineno=1155)
          12	STORE_FAST(arg=3, lineno=1155)
          14	LOAD_DEREF(arg=0, lineno=1162)
          16	LOAD_FAST(arg=0, lineno=1162)
          18	LOAD_FAST(arg=3, lineno=1162)
          20	BINARY_SUBSCR(arg=None, lineno=1162)
          22	LOAD_FAST(arg=0, lineno=1162)
          24	LOAD_FAST(arg=1, lineno=1162)
          26	BINARY_SUBSCR(arg=None, lineno=1162)
          28	CALL_FUNCTION(arg=2, lineno=1162)
          30	POP_JUMP_IF_FALSE(arg=58, lineno=1162)
          32	LOAD_FAST(arg=0, lineno=1163)
          34	LOAD_FAST(arg=3, lineno=1163)
          36	BINARY_SUBSCR(arg=None, lineno=1163)
          38	LOAD_FAST(arg=0, lineno=1163)
          40	LOAD_FAST(arg=1, lineno=1163)
          42	BINARY_SUBSCR(arg=None, lineno=1163)
          44	ROT_TWO(arg=None, lineno=1163)
          46	LOAD_FAST(arg=0, lineno=1163)
          48	LOAD_FAST(arg=1, lineno=1163)
          50	STORE_SUBSCR(arg=None, lineno=1163)
          52	LOAD_FAST(arg=0, lineno=1163)
          54	LOAD_FAST(arg=3, lineno=1163)
          56	STORE_SUBSCR(arg=None, lineno=1163)
>         58	LOAD_DEREF(arg=0, lineno=1164)
          60	LOAD_FAST(arg=0, lineno=1164)
          62	LOAD_FAST(arg=2, lineno=1164)
          64	BINARY_SUBSCR(arg=None, lineno=1164)
          66	LOAD_FAST(arg=0, lineno=1164)
          68	LOAD_FAST(arg=3, lineno=1164)
          70	BINARY_SUBSCR(arg=None, lineno=1164)
          72	CALL_FUNCTION(arg=2, lineno=1164)
          74	POP_JUMP_IF_FALSE(arg=102, lineno=1164)
          76	LOAD_FAST(arg=0, lineno=1165)
          78	LOAD_FAST(arg=3, lineno=1165)
          80	BINARY_SUBSCR(arg=None, lineno=1165)
          82	LOAD_FAST(arg=0, lineno=1165)
          84	LOAD_FAST(arg=2, lineno=1165)
          86	BINARY_SUBSCR(arg=None, lineno=1165)
          88	ROT_TWO(arg=None, lineno=1165)
          90	LOAD_FAST(arg=0, lineno=1165)
          92	LOAD_FAST(arg=2, lineno=1165)
          94	STORE_SUBSCR(arg=None, lineno=1165)
          96	LOAD_FAST(arg=0, lineno=1165)
          98	LOAD_FAST(arg=3, lineno=1165)
         100	STORE_SUBSCR(arg=None, lineno=1165)
>        102	LOAD_DEREF(arg=0, lineno=1166)
         104	LOAD_FAST(arg=0, lineno=1166)
         106	LOAD_FAST(arg=3, lineno=1166)
         108	BINARY_SUBSCR(arg=None, lineno=1166)
         110	LOAD_FAST(arg=0, lineno=1166)
         112	LOAD_FAST(arg=1, lineno=1166)
         114	BINARY_SUBSCR(arg=None, lineno=1166)
         116	CALL_FUNCTION(arg=2, lineno=1166)
         118	POP_JUMP_IF_FALSE(arg=146, lineno=1166)
         120	LOAD_FAST(arg=0, lineno=1167)
         122	LOAD_FAST(arg=3, lineno=1167)
         124	BINARY_SUBSCR(arg=None, lineno=1167)
         126	LOAD_FAST(arg=0, lineno=1167)
         128	LOAD_FAST(arg=1, lineno=1167)
         130	BINARY_SUBSCR(arg=None, lineno=1167)
         132	ROT_TWO(arg=None, lineno=1167)
         134	LOAD_FAST(arg=0, lineno=1167)
         136	LOAD_FAST(arg=1, lineno=1167)
         138	STORE_SUBSCR(arg=None, lineno=1167)
         140	LOAD_FAST(arg=0, lineno=1167)
         142	LOAD_FAST(arg=3, lineno=1167)
         144	STORE_SUBSCR(arg=None, lineno=1167)
>        146	LOAD_FAST(arg=0, lineno=1168)
         148	LOAD_FAST(arg=3, lineno=1168)
         150	BINARY_SUBSCR(arg=None, lineno=1168)
         152	STORE_FAST(arg=4, lineno=1168)
         154	LOAD_FAST(arg=0, lineno=1170)
         156	LOAD_FAST(arg=3, lineno=1170)
         158	BINARY_SUBSCR(arg=None, lineno=1170)
         160	LOAD_FAST(arg=0, lineno=1170)
         162	LOAD_FAST(arg=2, lineno=1170)
         164	BINARY_SUBSCR(arg=None, lineno=1170)
         166	ROT_TWO(arg=None, lineno=1170)
         168	LOAD_FAST(arg=0, lineno=1170)
         170	LOAD_FAST(arg=2, lineno=1170)
         172	STORE_SUBSCR(arg=None, lineno=1170)
         174	LOAD_FAST(arg=0, lineno=1170)
         176	LOAD_FAST(arg=3, lineno=1170)
         178	STORE_SUBSCR(arg=None, lineno=1170)
         180	LOAD_FAST(arg=1, lineno=1171)
         182	STORE_FAST(arg=5, lineno=1171)
         184	LOAD_FAST(arg=2, lineno=1172)
         186	LOAD_CONST(arg=1, lineno=1172)
         188	BINARY_SUBTRACT(arg=None, lineno=1172)
         190	STORE_FAST(arg=6, lineno=1172)
>        192	LOAD_FAST(arg=5, lineno=1174)
         194	LOAD_FAST(arg=2, lineno=1174)
         196	COMPARE_OP(arg=0, lineno=1174)
         198	POP_JUMP_IF_FALSE(arg=224, lineno=1174)
         200	LOAD_DEREF(arg=0, lineno=1174)
         202	LOAD_FAST(arg=0, lineno=1174)
         204	LOAD_FAST(arg=5, lineno=1174)
         206	BINARY_SUBSCR(arg=None, lineno=1174)
         208	LOAD_FAST(arg=4, lineno=1174)
         210	CALL_FUNCTION(arg=2, lineno=1174)
         212	POP_JUMP_IF_FALSE(arg=224, lineno=1174)
         214	LOAD_FAST(arg=5, lineno=1175)
         216	LOAD_CONST(arg=1, lineno=1175)
         218	INPLACE_ADD(arg=None, lineno=1175)
         220	STORE_FAST(arg=5, lineno=1175)
         222	JUMP_ABSOLUTE(arg=192, lineno=1175)
>        224	LOAD_FAST(arg=6, lineno=1176)
         226	LOAD_FAST(arg=1, lineno=1176)
         228	COMPARE_OP(arg=5, lineno=1176)
         230	POP_JUMP_IF_FALSE(arg=260, lineno=1176)
         234	LOAD_DEREF(arg=0, lineno=1176)
         236	LOAD_FAST(arg=4, lineno=1176)
         238	LOAD_FAST(arg=0, lineno=1176)
         240	LOAD_FAST(arg=6, lineno=1176)
         242	BINARY_SUBSCR(arg=None, lineno=1176)
         244	CALL_FUNCTION(arg=2, lineno=1176)
         246	POP_JUMP_IF_FALSE(arg=260, lineno=1176)
         250	LOAD_FAST(arg=6, lineno=1177)
         252	LOAD_CONST(arg=1, lineno=1177)
         254	INPLACE_SUBTRACT(arg=None, lineno=1177)
         256	STORE_FAST(arg=6, lineno=1177)
         258	JUMP_ABSOLUTE(arg=224, lineno=1177)
>        260	LOAD_FAST(arg=5, lineno=1178)
         262	LOAD_FAST(arg=6, lineno=1178)
         264	COMPARE_OP(arg=5, lineno=1178)
         266	POP_JUMP_IF_FALSE(arg=274, lineno=1178)
         270	JUMP_ABSOLUTE(arg=318, lineno=1179)
>        274	LOAD_FAST(arg=0, lineno=1180)
         276	LOAD_FAST(arg=6, lineno=1180)
         278	BINARY_SUBSCR(arg=None, lineno=1180)
         280	LOAD_FAST(arg=0, lineno=1180)
         282	LOAD_FAST(arg=5, lineno=1180)
         284	BINARY_SUBSCR(arg=None, lineno=1180)
         286	ROT_TWO(arg=None, lineno=1180)
         288	LOAD_FAST(arg=0, lineno=1180)
         290	LOAD_FAST(arg=5, lineno=1180)
         292	STORE_SUBSCR(arg=None, lineno=1180)
         294	LOAD_FAST(arg=0, lineno=1180)
         296	LOAD_FAST(arg=6, lineno=1180)
         298	STORE_SUBSCR(arg=None, lineno=1180)
         300	LOAD_FAST(arg=5, lineno=1181)
         302	LOAD_CONST(arg=1, lineno=1181)
         304	INPLACE_ADD(arg=None, lineno=1181)
         306	STORE_FAST(arg=5, lineno=1181)
         308	LOAD_FAST(arg=6, lineno=1182)
         310	LOAD_CONST(arg=1, lineno=1182)
         312	INPLACE_SUBTRACT(arg=None, lineno=1182)
         314	STORE_FAST(arg=6, lineno=1182)
         316	JUMP_ABSOLUTE(arg=192, lineno=1182)
>        318	LOAD_FAST(arg=0, lineno=1185)
         320	LOAD_FAST(arg=2, lineno=1185)
         322	BINARY_SUBSCR(arg=None, lineno=1185)
         324	LOAD_FAST(arg=0, lineno=1185)
         326	LOAD_FAST(arg=5, lineno=1185)
         328	BINARY_SUBSCR(arg=None, lineno=1185)
         330	ROT_TWO(arg=None, lineno=1185)
         332	LOAD_FAST(arg=0, lineno=1185)
         334	LOAD_FAST(arg=5, lineno=1185)
         336	STORE_SUBSCR(arg=None, lineno=1185)
         338	LOAD_FAST(arg=0, lineno=1185)
         340	LOAD_FAST(arg=2, lineno=1185)
         342	STORE_SUBSCR(arg=None, lineno=1185)
         344	LOAD_FAST(arg=5, lineno=1186)
         346	RETURN_VALUE(arg=None, lineno=1186)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1155)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=1155)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=1155)
DEBUG:numba.core.byteflow:stack ['$low2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=1155)
DEBUG:numba.core.byteflow:stack ['$low2.0', '$high4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1155)
DEBUG:numba.core.byteflow:stack ['$6binary_add.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=BINARY_RSHIFT(arg=None, lineno=1155)
DEBUG:numba.core.byteflow:stack ['$6binary_add.2', '$const8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=STORE_FAST(arg=3, lineno=1155)
DEBUG:numba.core.byteflow:stack ['$10binary_rshift.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_DEREF(arg=0, lineno=1162)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1162)
DEBUG:numba.core.byteflow:stack ['$14load_deref.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=1162)
DEBUG:numba.core.byteflow:stack ['$14load_deref.5', '$A16.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1162)
DEBUG:numba.core.byteflow:stack ['$14load_deref.5', '$A16.6', '$mid18.7']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1162)
DEBUG:numba.core.byteflow:stack ['$14load_deref.5', '$20binary_subscr.8']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1162)
DEBUG:numba.core.byteflow:stack ['$14load_deref.5', '$20binary_subscr.8', '$A22.9']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1162)
DEBUG:numba.core.byteflow:stack ['$14load_deref.5', '$20binary_subscr.8', '$A22.9', '$low24.10']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=1162)
DEBUG:numba.core.byteflow:stack ['$14load_deref.5', '$20binary_subscr.8', '$26binary_subscr.11']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=58, lineno=1162)
DEBUG:numba.core.byteflow:stack ['$28call_function.12']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=1163)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$A32.0']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=BINARY_SUBSCR(arg=None, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$A32.0', '$mid34.1']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$36binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$36binary_subscr.2', '$A38.3']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$36binary_subscr.2', '$A38.3', '$low40.4']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=ROT_TWO(arg=None, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$36binary_subscr.2', '$42binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=0, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$42binary_subscr.5', '$36binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$42binary_subscr.5', '$36binary_subscr.2', '$A46.6']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=STORE_SUBSCR(arg=None, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$42binary_subscr.5', '$36binary_subscr.2', '$A46.6', '$low48.7']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$42binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=3, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$42binary_subscr.5', '$A52.8']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=STORE_SUBSCR(arg=None, lineno=1163)
DEBUG:numba.core.byteflow:stack ['$42binary_subscr.5', '$A52.8', '$mid54.9']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_DEREF(arg=0, lineno=1164)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=0, lineno=1164)
DEBUG:numba.core.byteflow:stack ['$58load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1164)
DEBUG:numba.core.byteflow:stack ['$58load_deref.0', '$A60.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=1164)
DEBUG:numba.core.byteflow:stack ['$58load_deref.0', '$A60.1', '$high62.2']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=1164)
DEBUG:numba.core.byteflow:stack ['$58load_deref.0', '$64binary_subscr.3']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=1164)
DEBUG:numba.core.byteflow:stack ['$58load_deref.0', '$64binary_subscr.3', '$A66.4']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=1164)
DEBUG:numba.core.byteflow:stack ['$58load_deref.0', '$64binary_subscr.3', '$A66.4', '$mid68.5']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=1164)
DEBUG:numba.core.byteflow:stack ['$58load_deref.0', '$64binary_subscr.3', '$70binary_subscr.6']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=102, lineno=1164)
DEBUG:numba.core.byteflow:stack ['$72call_function.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=76, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=1165)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_FAST(arg=3, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$A76.0']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=BINARY_SUBSCR(arg=None, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$A76.0', '$mid78.1']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=LOAD_FAST(arg=0, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$80binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=2, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$80binary_subscr.2', '$A82.3']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=BINARY_SUBSCR(arg=None, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$80binary_subscr.2', '$A82.3', '$high84.4']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=ROT_TWO(arg=None, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$80binary_subscr.2', '$86binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=0, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$86binary_subscr.5', '$80binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$86binary_subscr.5', '$80binary_subscr.2', '$A90.6']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=STORE_SUBSCR(arg=None, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$86binary_subscr.5', '$80binary_subscr.2', '$A90.6', '$high92.7']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=LOAD_FAST(arg=0, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$86binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$86binary_subscr.5', '$A96.8']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=1165)
DEBUG:numba.core.byteflow:stack ['$86binary_subscr.5', '$A96.8', '$mid98.9']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_DEREF(arg=0, lineno=1166)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=1166)
DEBUG:numba.core.byteflow:stack ['$102load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1166)
DEBUG:numba.core.byteflow:stack ['$102load_deref.0', '$A104.1']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=BINARY_SUBSCR(arg=None, lineno=1166)
DEBUG:numba.core.byteflow:stack ['$102load_deref.0', '$A104.1', '$mid106.2']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_FAST(arg=0, lineno=1166)
DEBUG:numba.core.byteflow:stack ['$102load_deref.0', '$108binary_subscr.3']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_FAST(arg=1, lineno=1166)
DEBUG:numba.core.byteflow:stack ['$102load_deref.0', '$108binary_subscr.3', '$A110.4']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=BINARY_SUBSCR(arg=None, lineno=1166)
DEBUG:numba.core.byteflow:stack ['$102load_deref.0', '$108binary_subscr.3', '$A110.4', '$low112.5']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=CALL_FUNCTION(arg=2, lineno=1166)
DEBUG:numba.core.byteflow:stack ['$102load_deref.0', '$108binary_subscr.3', '$114binary_subscr.6']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=POP_JUMP_IF_FALSE(arg=146, lineno=1166)
DEBUG:numba.core.byteflow:stack ['$116call_function.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0), Edge(pc=146, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=120 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_FAST(arg=0, lineno=1167)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=3, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$A120.0']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=BINARY_SUBSCR(arg=None, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$A120.0', '$mid122.1']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$124binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=LOAD_FAST(arg=1, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$124binary_subscr.2', '$A126.3']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$124binary_subscr.2', '$A126.3', '$low128.4']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=ROT_TWO(arg=None, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$124binary_subscr.2', '$130binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=LOAD_FAST(arg=0, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$130binary_subscr.5', '$124binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=LOAD_FAST(arg=1, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$130binary_subscr.5', '$124binary_subscr.2', '$A134.6']
DEBUG:numba.core.byteflow:dispatch pc=138, inst=STORE_SUBSCR(arg=None, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$130binary_subscr.5', '$124binary_subscr.2', '$A134.6', '$low136.7']
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_FAST(arg=0, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$130binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=LOAD_FAST(arg=3, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$130binary_subscr.5', '$A140.8']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=STORE_SUBSCR(arg=None, lineno=1167)
DEBUG:numba.core.byteflow:stack ['$130binary_subscr.5', '$A140.8', '$mid142.9']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_FAST(arg=0, lineno=1168)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=3, lineno=1168)
DEBUG:numba.core.byteflow:stack ['$A146.0']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=BINARY_SUBSCR(arg=None, lineno=1168)
DEBUG:numba.core.byteflow:stack ['$A146.0', '$mid148.1']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=STORE_FAST(arg=4, lineno=1168)
DEBUG:numba.core.byteflow:stack ['$150binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=LOAD_FAST(arg=0, lineno=1170)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_FAST(arg=3, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$A154.3']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=BINARY_SUBSCR(arg=None, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$A154.3', '$mid156.4']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$158binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_FAST(arg=2, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$158binary_subscr.5', '$A160.6']
DEBUG:numba.core.byteflow:dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$158binary_subscr.5', '$A160.6', '$high162.7']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=ROT_TWO(arg=None, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$158binary_subscr.5', '$164binary_subscr.8']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=LOAD_FAST(arg=0, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$164binary_subscr.8', '$158binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=LOAD_FAST(arg=2, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$164binary_subscr.8', '$158binary_subscr.5', '$A168.9']
DEBUG:numba.core.byteflow:dispatch pc=172, inst=STORE_SUBSCR(arg=None, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$164binary_subscr.8', '$158binary_subscr.5', '$A168.9', '$high170.10']
DEBUG:numba.core.byteflow:dispatch pc=174, inst=LOAD_FAST(arg=0, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$164binary_subscr.8']
DEBUG:numba.core.byteflow:dispatch pc=176, inst=LOAD_FAST(arg=3, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$164binary_subscr.8', '$A174.11']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=STORE_SUBSCR(arg=None, lineno=1170)
DEBUG:numba.core.byteflow:stack ['$164binary_subscr.8', '$A174.11', '$mid176.12']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=LOAD_FAST(arg=1, lineno=1171)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=182, inst=STORE_FAST(arg=5, lineno=1171)
DEBUG:numba.core.byteflow:stack ['$low180.13']
DEBUG:numba.core.byteflow:dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=1172)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=186, inst=LOAD_CONST(arg=1, lineno=1172)
DEBUG:numba.core.byteflow:stack ['$high184.14']
DEBUG:numba.core.byteflow:dispatch pc=188, inst=BINARY_SUBTRACT(arg=None, lineno=1172)
DEBUG:numba.core.byteflow:stack ['$high184.14', '$const186.15']
DEBUG:numba.core.byteflow:dispatch pc=190, inst=STORE_FAST(arg=6, lineno=1172)
DEBUG:numba.core.byteflow:stack ['$188binary_subtract.16']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=192 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=192, inst=LOAD_FAST(arg=5, lineno=1174)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=194, inst=LOAD_FAST(arg=2, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$i192.0']
DEBUG:numba.core.byteflow:dispatch pc=196, inst=COMPARE_OP(arg=0, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$i192.0', '$high194.1']
DEBUG:numba.core.byteflow:dispatch pc=198, inst=POP_JUMP_IF_FALSE(arg=224, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$196compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=200, stack=(), blockstack=(), npush=0), Edge(pc=224, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=200 nstack_initial=0), State(pc_initial=224 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=200, inst=LOAD_DEREF(arg=0, lineno=1174)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$200load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=204, inst=LOAD_FAST(arg=5, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$200load_deref.0', '$A202.1']
DEBUG:numba.core.byteflow:dispatch pc=206, inst=BINARY_SUBSCR(arg=None, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$200load_deref.0', '$A202.1', '$i204.2']
DEBUG:numba.core.byteflow:dispatch pc=208, inst=LOAD_FAST(arg=4, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$200load_deref.0', '$206binary_subscr.3']
DEBUG:numba.core.byteflow:dispatch pc=210, inst=CALL_FUNCTION(arg=2, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$200load_deref.0', '$206binary_subscr.3', '$pivot208.4']
DEBUG:numba.core.byteflow:dispatch pc=212, inst=POP_JUMP_IF_FALSE(arg=224, lineno=1174)
DEBUG:numba.core.byteflow:stack ['$210call_function.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=214, stack=(), blockstack=(), npush=0), Edge(pc=224, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=224 nstack_initial=0), State(pc_initial=214 nstack_initial=0), State(pc_initial=224 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=224, inst=LOAD_FAST(arg=6, lineno=1176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=226, inst=LOAD_FAST(arg=1, lineno=1176)
DEBUG:numba.core.byteflow:stack ['$j224.0']
DEBUG:numba.core.byteflow:dispatch pc=228, inst=COMPARE_OP(arg=5, lineno=1176)
DEBUG:numba.core.byteflow:stack ['$j224.0', '$low226.1']
DEBUG:numba.core.byteflow:dispatch pc=230, inst=POP_JUMP_IF_FALSE(arg=260, lineno=1176)
DEBUG:numba.core.byteflow:stack ['$228compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=234, stack=(), blockstack=(), npush=0), Edge(pc=260, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=214 nstack_initial=0), State(pc_initial=224 nstack_initial=0), State(pc_initial=234 nstack_initial=0), State(pc_initial=260 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=214, inst=LOAD_FAST(arg=5, lineno=1175)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=216, inst=LOAD_CONST(arg=1, lineno=1175)
DEBUG:numba.core.byteflow:stack ['$i214.0']
DEBUG:numba.core.byteflow:dispatch pc=218, inst=INPLACE_ADD(arg=None, lineno=1175)
DEBUG:numba.core.byteflow:stack ['$i214.0', '$const216.1']
DEBUG:numba.core.byteflow:dispatch pc=220, inst=STORE_FAST(arg=5, lineno=1175)
DEBUG:numba.core.byteflow:stack ['$218inplace_add.2']
DEBUG:numba.core.byteflow:dispatch pc=222, inst=JUMP_ABSOLUTE(arg=192, lineno=1175)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=224 nstack_initial=0), State(pc_initial=234 nstack_initial=0), State(pc_initial=260 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=234 nstack_initial=0), State(pc_initial=260 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=234, inst=LOAD_DEREF(arg=0, lineno=1176)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=236, inst=LOAD_FAST(arg=4, lineno=1176)
DEBUG:numba.core.byteflow:stack ['$234load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=238, inst=LOAD_FAST(arg=0, lineno=1176)
DEBUG:numba.core.byteflow:stack ['$234load_deref.0', '$pivot236.1']
DEBUG:numba.core.byteflow:dispatch pc=240, inst=LOAD_FAST(arg=6, lineno=1176)
DEBUG:numba.core.byteflow:stack ['$234load_deref.0', '$pivot236.1', '$A238.2']
DEBUG:numba.core.byteflow:dispatch pc=242, inst=BINARY_SUBSCR(arg=None, lineno=1176)
DEBUG:numba.core.byteflow:stack ['$234load_deref.0', '$pivot236.1', '$A238.2', '$j240.3']
DEBUG:numba.core.byteflow:dispatch pc=244, inst=CALL_FUNCTION(arg=2, lineno=1176)
DEBUG:numba.core.byteflow:stack ['$234load_deref.0', '$pivot236.1', '$242binary_subscr.4']
DEBUG:numba.core.byteflow:dispatch pc=246, inst=POP_JUMP_IF_FALSE(arg=260, lineno=1176)
DEBUG:numba.core.byteflow:stack ['$244call_function.5']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=250, stack=(), blockstack=(), npush=0), Edge(pc=260, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=260 nstack_initial=0), State(pc_initial=192 nstack_initial=0), State(pc_initial=250 nstack_initial=0), State(pc_initial=260 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=260, inst=LOAD_FAST(arg=5, lineno=1178)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=262, inst=LOAD_FAST(arg=6, lineno=1178)
DEBUG:numba.core.byteflow:stack ['$i260.0']
DEBUG:numba.core.byteflow:dispatch pc=264, inst=COMPARE_OP(arg=5, lineno=1178)
DEBUG:numba.core.byteflow:stack ['$i260.0', '$j262.1']
DEBUG:numba.core.byteflow:dispatch pc=266, inst=POP_JUMP_IF_FALSE(arg=274, lineno=1178)
DEBUG:numba.core.byteflow:stack ['$264compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=270, stack=(), blockstack=(), npush=0), Edge(pc=274, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=250 nstack_initial=0), State(pc_initial=260 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=274 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=250 nstack_initial=0), State(pc_initial=260 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=274 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=250, inst=LOAD_FAST(arg=6, lineno=1177)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=252, inst=LOAD_CONST(arg=1, lineno=1177)
DEBUG:numba.core.byteflow:stack ['$j250.0']
DEBUG:numba.core.byteflow:dispatch pc=254, inst=INPLACE_SUBTRACT(arg=None, lineno=1177)
DEBUG:numba.core.byteflow:stack ['$j250.0', '$const252.1']
DEBUG:numba.core.byteflow:dispatch pc=256, inst=STORE_FAST(arg=6, lineno=1177)
DEBUG:numba.core.byteflow:stack ['$254inplace_subtract.2']
DEBUG:numba.core.byteflow:dispatch pc=258, inst=JUMP_ABSOLUTE(arg=224, lineno=1177)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=224, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=260 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=274 nstack_initial=0), State(pc_initial=224 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=270 nstack_initial=0), State(pc_initial=274 nstack_initial=0), State(pc_initial=224 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=270, inst=JUMP_ABSOLUTE(arg=318, lineno=1179)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=318, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=274 nstack_initial=0), State(pc_initial=224 nstack_initial=0), State(pc_initial=318 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=274, inst=LOAD_FAST(arg=0, lineno=1180)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=276, inst=LOAD_FAST(arg=6, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$A274.0']
DEBUG:numba.core.byteflow:dispatch pc=278, inst=BINARY_SUBSCR(arg=None, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$A274.0', '$j276.1']
DEBUG:numba.core.byteflow:dispatch pc=280, inst=LOAD_FAST(arg=0, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$278binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=282, inst=LOAD_FAST(arg=5, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$278binary_subscr.2', '$A280.3']
DEBUG:numba.core.byteflow:dispatch pc=284, inst=BINARY_SUBSCR(arg=None, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$278binary_subscr.2', '$A280.3', '$i282.4']
DEBUG:numba.core.byteflow:dispatch pc=286, inst=ROT_TWO(arg=None, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$278binary_subscr.2', '$284binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=288, inst=LOAD_FAST(arg=0, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$284binary_subscr.5', '$278binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=290, inst=LOAD_FAST(arg=5, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$284binary_subscr.5', '$278binary_subscr.2', '$A288.6']
DEBUG:numba.core.byteflow:dispatch pc=292, inst=STORE_SUBSCR(arg=None, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$284binary_subscr.5', '$278binary_subscr.2', '$A288.6', '$i290.7']
DEBUG:numba.core.byteflow:dispatch pc=294, inst=LOAD_FAST(arg=0, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$284binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=296, inst=LOAD_FAST(arg=6, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$284binary_subscr.5', '$A294.8']
DEBUG:numba.core.byteflow:dispatch pc=298, inst=STORE_SUBSCR(arg=None, lineno=1180)
DEBUG:numba.core.byteflow:stack ['$284binary_subscr.5', '$A294.8', '$j296.9']
DEBUG:numba.core.byteflow:dispatch pc=300, inst=LOAD_FAST(arg=5, lineno=1181)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=302, inst=LOAD_CONST(arg=1, lineno=1181)
DEBUG:numba.core.byteflow:stack ['$i300.10']
DEBUG:numba.core.byteflow:dispatch pc=304, inst=INPLACE_ADD(arg=None, lineno=1181)
DEBUG:numba.core.byteflow:stack ['$i300.10', '$const302.11']
DEBUG:numba.core.byteflow:dispatch pc=306, inst=STORE_FAST(arg=5, lineno=1181)
DEBUG:numba.core.byteflow:stack ['$304inplace_add.12']
DEBUG:numba.core.byteflow:dispatch pc=308, inst=LOAD_FAST(arg=6, lineno=1182)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=310, inst=LOAD_CONST(arg=1, lineno=1182)
DEBUG:numba.core.byteflow:stack ['$j308.13']
DEBUG:numba.core.byteflow:dispatch pc=312, inst=INPLACE_SUBTRACT(arg=None, lineno=1182)
DEBUG:numba.core.byteflow:stack ['$j308.13', '$const310.14']
DEBUG:numba.core.byteflow:dispatch pc=314, inst=STORE_FAST(arg=6, lineno=1182)
DEBUG:numba.core.byteflow:stack ['$312inplace_subtract.15']
DEBUG:numba.core.byteflow:dispatch pc=316, inst=JUMP_ABSOLUTE(arg=192, lineno=1182)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=224 nstack_initial=0), State(pc_initial=318 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=318 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=318, inst=LOAD_FAST(arg=0, lineno=1185)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=320, inst=LOAD_FAST(arg=2, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$A318.0']
DEBUG:numba.core.byteflow:dispatch pc=322, inst=BINARY_SUBSCR(arg=None, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$A318.0', '$high320.1']
DEBUG:numba.core.byteflow:dispatch pc=324, inst=LOAD_FAST(arg=0, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$322binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=326, inst=LOAD_FAST(arg=5, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$322binary_subscr.2', '$A324.3']
DEBUG:numba.core.byteflow:dispatch pc=328, inst=BINARY_SUBSCR(arg=None, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$322binary_subscr.2', '$A324.3', '$i326.4']
DEBUG:numba.core.byteflow:dispatch pc=330, inst=ROT_TWO(arg=None, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$322binary_subscr.2', '$328binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=332, inst=LOAD_FAST(arg=0, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$328binary_subscr.5', '$322binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=334, inst=LOAD_FAST(arg=5, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$328binary_subscr.5', '$322binary_subscr.2', '$A332.6']
DEBUG:numba.core.byteflow:dispatch pc=336, inst=STORE_SUBSCR(arg=None, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$328binary_subscr.5', '$322binary_subscr.2', '$A332.6', '$i334.7']
DEBUG:numba.core.byteflow:dispatch pc=338, inst=LOAD_FAST(arg=0, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$328binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=340, inst=LOAD_FAST(arg=2, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$328binary_subscr.5', '$A338.8']
DEBUG:numba.core.byteflow:dispatch pc=342, inst=STORE_SUBSCR(arg=None, lineno=1185)
DEBUG:numba.core.byteflow:stack ['$328binary_subscr.5', '$A338.8', '$high340.9']
DEBUG:numba.core.byteflow:dispatch pc=344, inst=LOAD_FAST(arg=5, lineno=1186)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=346, inst=RETURN_VALUE(arg=None, lineno=1186)
DEBUG:numba.core.byteflow:stack ['$i344.10']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=192 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=200 nstack_initial=0): set(),
             State(pc_initial=214 nstack_initial=0): set(),
             State(pc_initial=224 nstack_initial=0): set(),
             State(pc_initial=234 nstack_initial=0): set(),
             State(pc_initial=250 nstack_initial=0): set(),
             State(pc_initial=260 nstack_initial=0): set(),
             State(pc_initial=270 nstack_initial=0): set(),
             State(pc_initial=274 nstack_initial=0): set(),
             State(pc_initial=318 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$low2.0'}), (4, {'res': '$high4.1'}), (6, {'lhs': '$low2.0', 'rhs': '$high4.1', 'res': '$6binary_add.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_add.2', 'rhs': '$const8.3', 'res': '$10binary_rshift.4'}), (12, {'value': '$10binary_rshift.4'}), (14, {'res': '$14load_deref.5'}), (16, {'res': '$A16.6'}), (18, {'res': '$mid18.7'}), (20, {'index': '$mid18.7', 'target': '$A16.6', 'res': '$20binary_subscr.8'}), (22, {'res': '$A22.9'}), (24, {'res': '$low24.10'}), (26, {'index': '$low24.10', 'target': '$A22.9', 'res': '$26binary_subscr.11'}), (28, {'func': '$14load_deref.5', 'args': ['$20binary_subscr.8', '$26binary_subscr.11'], 'res': '$28call_function.12'}), (30, {'pred': '$28call_function.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 58: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$A32.0'}), (34, {'res': '$mid34.1'}), (36, {'index': '$mid34.1', 'target': '$A32.0', 'res': '$36binary_subscr.2'}), (38, {'res': '$A38.3'}), (40, {'res': '$low40.4'}), (42, {'index': '$low40.4', 'target': '$A38.3', 'res': '$42binary_subscr.5'}), (46, {'res': '$A46.6'}), (48, {'res': '$low48.7'}), (50, {'target': '$A46.6', 'index': '$low48.7', 'value': '$36binary_subscr.2'}), (52, {'res': '$A52.8'}), (54, {'res': '$mid54.9'}), (56, {'target': '$A52.8', 'index': '$mid54.9', 'value': '$42binary_subscr.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$58load_deref.0'}), (60, {'res': '$A60.1'}), (62, {'res': '$high62.2'}), (64, {'index': '$high62.2', 'target': '$A60.1', 'res': '$64binary_subscr.3'}), (66, {'res': '$A66.4'}), (68, {'res': '$mid68.5'}), (70, {'index': '$mid68.5', 'target': '$A66.4', 'res': '$70binary_subscr.6'}), (72, {'func': '$58load_deref.0', 'args': ['$64binary_subscr.3', '$70binary_subscr.6'], 'res': '$72call_function.7'}), (74, {'pred': '$72call_function.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$A76.0'}), (78, {'res': '$mid78.1'}), (80, {'index': '$mid78.1', 'target': '$A76.0', 'res': '$80binary_subscr.2'}), (82, {'res': '$A82.3'}), (84, {'res': '$high84.4'}), (86, {'index': '$high84.4', 'target': '$A82.3', 'res': '$86binary_subscr.5'}), (90, {'res': '$A90.6'}), (92, {'res': '$high92.7'}), (94, {'target': '$A90.6', 'index': '$high92.7', 'value': '$80binary_subscr.2'}), (96, {'res': '$A96.8'}), (98, {'res': '$mid98.9'}), (100, {'target': '$A96.8', 'index': '$mid98.9', 'value': '$86binary_subscr.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_deref.0'}), (104, {'res': '$A104.1'}), (106, {'res': '$mid106.2'}), (108, {'index': '$mid106.2', 'target': '$A104.1', 'res': '$108binary_subscr.3'}), (110, {'res': '$A110.4'}), (112, {'res': '$low112.5'}), (114, {'index': '$low112.5', 'target': '$A110.4', 'res': '$114binary_subscr.6'}), (116, {'func': '$102load_deref.0', 'args': ['$108binary_subscr.3', '$114binary_subscr.6'], 'res': '$116call_function.7'}), (118, {'pred': '$116call_function.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: (), 146: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$A120.0'}), (122, {'res': '$mid122.1'}), (124, {'index': '$mid122.1', 'target': '$A120.0', 'res': '$124binary_subscr.2'}), (126, {'res': '$A126.3'}), (128, {'res': '$low128.4'}), (130, {'index': '$low128.4', 'target': '$A126.3', 'res': '$130binary_subscr.5'}), (134, {'res': '$A134.6'}), (136, {'res': '$low136.7'}), (138, {'target': '$A134.6', 'index': '$low136.7', 'value': '$124binary_subscr.2'}), (140, {'res': '$A140.8'}), (142, {'res': '$mid142.9'}), (144, {'target': '$A140.8', 'index': '$mid142.9', 'value': '$130binary_subscr.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$A146.0'}), (148, {'res': '$mid148.1'}), (150, {'index': '$mid148.1', 'target': '$A146.0', 'res': '$150binary_subscr.2'}), (152, {'value': '$150binary_subscr.2'}), (154, {'res': '$A154.3'}), (156, {'res': '$mid156.4'}), (158, {'index': '$mid156.4', 'target': '$A154.3', 'res': '$158binary_subscr.5'}), (160, {'res': '$A160.6'}), (162, {'res': '$high162.7'}), (164, {'index': '$high162.7', 'target': '$A160.6', 'res': '$164binary_subscr.8'}), (168, {'res': '$A168.9'}), (170, {'res': '$high170.10'}), (172, {'target': '$A168.9', 'index': '$high170.10', 'value': '$158binary_subscr.5'}), (174, {'res': '$A174.11'}), (176, {'res': '$mid176.12'}), (178, {'target': '$A174.11', 'index': '$mid176.12', 'value': '$164binary_subscr.8'}), (180, {'res': '$low180.13'}), (182, {'value': '$low180.13'}), (184, {'res': '$high184.14'}), (186, {'res': '$const186.15'}), (188, {'lhs': '$high184.14', 'rhs': '$const186.15', 'res': '$188binary_subtract.16'}), (190, {'value': '$188binary_subtract.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$i192.0'}), (194, {'res': '$high194.1'}), (196, {'lhs': '$i192.0', 'rhs': '$high194.1', 'res': '$196compare_op.2'}), (198, {'pred': '$196compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: (), 224: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=200 nstack_initial=0):
AdaptBlockInfo(insts=((200, {'res': '$200load_deref.0'}), (202, {'res': '$A202.1'}), (204, {'res': '$i204.2'}), (206, {'index': '$i204.2', 'target': '$A202.1', 'res': '$206binary_subscr.3'}), (208, {'res': '$pivot208.4'}), (210, {'func': '$200load_deref.0', 'args': ['$206binary_subscr.3', '$pivot208.4'], 'res': '$210call_function.5'}), (212, {'pred': '$210call_function.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={214: (), 224: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=214 nstack_initial=0):
AdaptBlockInfo(insts=((214, {'res': '$i214.0'}), (216, {'res': '$const216.1'}), (218, {'lhs': '$i214.0', 'rhs': '$const216.1', 'res': '$218inplace_add.2'}), (220, {'value': '$218inplace_add.2'}), (222, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=224 nstack_initial=0):
AdaptBlockInfo(insts=((224, {'res': '$j224.0'}), (226, {'res': '$low226.1'}), (228, {'lhs': '$j224.0', 'rhs': '$low226.1', 'res': '$228compare_op.2'}), (230, {'pred': '$228compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={234: (), 260: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=234 nstack_initial=0):
AdaptBlockInfo(insts=((234, {'res': '$234load_deref.0'}), (236, {'res': '$pivot236.1'}), (238, {'res': '$A238.2'}), (240, {'res': '$j240.3'}), (242, {'index': '$j240.3', 'target': '$A238.2', 'res': '$242binary_subscr.4'}), (244, {'func': '$234load_deref.0', 'args': ['$pivot236.1', '$242binary_subscr.4'], 'res': '$244call_function.5'}), (246, {'pred': '$244call_function.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={250: (), 260: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=250 nstack_initial=0):
AdaptBlockInfo(insts=((250, {'res': '$j250.0'}), (252, {'res': '$const252.1'}), (254, {'lhs': '$j250.0', 'rhs': '$const252.1', 'res': '$254inplace_subtract.2'}), (256, {'value': '$254inplace_subtract.2'}), (258, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={224: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=260 nstack_initial=0):
AdaptBlockInfo(insts=((260, {'res': '$i260.0'}), (262, {'res': '$j262.1'}), (264, {'lhs': '$i260.0', 'rhs': '$j262.1', 'res': '$264compare_op.2'}), (266, {'pred': '$264compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={270: (), 274: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=270 nstack_initial=0):
AdaptBlockInfo(insts=((270, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={318: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=274 nstack_initial=0):
AdaptBlockInfo(insts=((274, {'res': '$A274.0'}), (276, {'res': '$j276.1'}), (278, {'index': '$j276.1', 'target': '$A274.0', 'res': '$278binary_subscr.2'}), (280, {'res': '$A280.3'}), (282, {'res': '$i282.4'}), (284, {'index': '$i282.4', 'target': '$A280.3', 'res': '$284binary_subscr.5'}), (288, {'res': '$A288.6'}), (290, {'res': '$i290.7'}), (292, {'target': '$A288.6', 'index': '$i290.7', 'value': '$278binary_subscr.2'}), (294, {'res': '$A294.8'}), (296, {'res': '$j296.9'}), (298, {'target': '$A294.8', 'index': '$j296.9', 'value': '$284binary_subscr.5'}), (300, {'res': '$i300.10'}), (302, {'res': '$const302.11'}), (304, {'lhs': '$i300.10', 'rhs': '$const302.11', 'res': '$304inplace_add.12'}), (306, {'value': '$304inplace_add.12'}), (308, {'res': '$j308.13'}), (310, {'res': '$const310.14'}), (312, {'lhs': '$j308.13', 'rhs': '$const310.14', 'res': '$312inplace_subtract.15'}), (314, {'value': '$312inplace_subtract.15'}), (316, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=318 nstack_initial=0):
AdaptBlockInfo(insts=((318, {'res': '$A318.0'}), (320, {'res': '$high320.1'}), (322, {'index': '$high320.1', 'target': '$A318.0', 'res': '$322binary_subscr.2'}), (324, {'res': '$A324.3'}), (326, {'res': '$i326.4'}), (328, {'index': '$i326.4', 'target': '$A324.3', 'res': '$328binary_subscr.5'}), (332, {'res': '$A332.6'}), (334, {'res': '$i334.7'}), (336, {'target': '$A332.6', 'index': '$i334.7', 'value': '$322binary_subscr.2'}), (338, {'res': '$A338.8'}), (340, {'res': '$high340.9'}), (342, {'target': '$A338.8', 'index': '$high340.9', 'value': '$328binary_subscr.5'}), (344, {'res': '$i344.10'}), (346, {'retval': '$i344.10', 'castval': '$346return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    A = arg(0, name=A)                       ['A']
    low = arg(1, name=low)                   ['low']
    high = arg(2, name=high)                 ['high']
    $6binary_add.2 = low + high              ['$6binary_add.2', 'high', 'low']
    $const8.3 = const(int, 1)                ['$const8.3']
    mid = $6binary_add.2 >> $const8.3        ['$6binary_add.2', '$const8.3', 'mid']
    $14load_deref.5 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>) ['$14load_deref.5']
    $20binary_subscr.8 = getitem(value=A, index=mid, fn=<built-in function getitem>) ['$20binary_subscr.8', 'A', 'mid']
    $26binary_subscr.11 = getitem(value=A, index=low, fn=<built-in function getitem>) ['$26binary_subscr.11', 'A', 'low']
    $28call_function.12 = call $14load_deref.5($20binary_subscr.8, $26binary_subscr.11, func=$14load_deref.5, args=[Var($20binary_subscr.8, arraymath.py:1162), Var($26binary_subscr.11, arraymath.py:1162)], kws=(), vararg=None) ['$14load_deref.5', '$20binary_subscr.8', '$26binary_subscr.11', '$28call_function.12']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($28call_function.12, func=bool30, args=(Var($28call_function.12, arraymath.py:1162),), kws=(), vararg=None) ['$28call_function.12', '$30pred', 'bool30']
    branch $30pred, 32, 58                   ['$30pred']
label 32:
    $36binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>) ['$36binary_subscr.2', 'A', 'mid']
    $42binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>) ['$42binary_subscr.5', 'A', 'low']
    A[low] = $36binary_subscr.2              ['$36binary_subscr.2', 'A', 'low']
    A[mid] = $42binary_subscr.5              ['$42binary_subscr.5', 'A', 'mid']
    jump 58                                  []
label 58:
    $58load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>) ['$58load_deref.0']
    $64binary_subscr.3 = getitem(value=A, index=high, fn=<built-in function getitem>) ['$64binary_subscr.3', 'A', 'high']
    $70binary_subscr.6 = getitem(value=A, index=mid, fn=<built-in function getitem>) ['$70binary_subscr.6', 'A', 'mid']
    $72call_function.7 = call $58load_deref.0($64binary_subscr.3, $70binary_subscr.6, func=$58load_deref.0, args=[Var($64binary_subscr.3, arraymath.py:1164), Var($70binary_subscr.6, arraymath.py:1164)], kws=(), vararg=None) ['$58load_deref.0', '$64binary_subscr.3', '$70binary_subscr.6', '$72call_function.7']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72call_function.7, func=bool74, args=(Var($72call_function.7, arraymath.py:1164),), kws=(), vararg=None) ['$72call_function.7', '$74pred', 'bool74']
    branch $74pred, 76, 102                  ['$74pred']
label 76:
    $80binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>) ['$80binary_subscr.2', 'A', 'mid']
    $86binary_subscr.5 = getitem(value=A, index=high, fn=<built-in function getitem>) ['$86binary_subscr.5', 'A', 'high']
    A[high] = $80binary_subscr.2             ['$80binary_subscr.2', 'A', 'high']
    A[mid] = $86binary_subscr.5              ['$86binary_subscr.5', 'A', 'mid']
    jump 102                                 []
label 102:
    $102load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>) ['$102load_deref.0']
    $108binary_subscr.3 = getitem(value=A, index=mid, fn=<built-in function getitem>) ['$108binary_subscr.3', 'A', 'mid']
    $114binary_subscr.6 = getitem(value=A, index=low, fn=<built-in function getitem>) ['$114binary_subscr.6', 'A', 'low']
    $116call_function.7 = call $102load_deref.0($108binary_subscr.3, $114binary_subscr.6, func=$102load_deref.0, args=[Var($108binary_subscr.3, arraymath.py:1166), Var($114binary_subscr.6, arraymath.py:1166)], kws=(), vararg=None) ['$102load_deref.0', '$108binary_subscr.3', '$114binary_subscr.6', '$116call_function.7']
    bool118 = global(bool: <class 'bool'>)   ['bool118']
    $118pred = call bool118($116call_function.7, func=bool118, args=(Var($116call_function.7, arraymath.py:1166),), kws=(), vararg=None) ['$116call_function.7', '$118pred', 'bool118']
    branch $118pred, 120, 146                ['$118pred']
label 120:
    $124binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>) ['$124binary_subscr.2', 'A', 'mid']
    $130binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>) ['$130binary_subscr.5', 'A', 'low']
    A[low] = $124binary_subscr.2             ['$124binary_subscr.2', 'A', 'low']
    A[mid] = $130binary_subscr.5             ['$130binary_subscr.5', 'A', 'mid']
    jump 146                                 []
label 146:
    pivot = getitem(value=A, index=mid, fn=<built-in function getitem>) ['A', 'mid', 'pivot']
    $158binary_subscr.5 = getitem(value=A, index=mid, fn=<built-in function getitem>) ['$158binary_subscr.5', 'A', 'mid']
    $164binary_subscr.8 = getitem(value=A, index=high, fn=<built-in function getitem>) ['$164binary_subscr.8', 'A', 'high']
    A[high] = $158binary_subscr.5            ['$158binary_subscr.5', 'A', 'high']
    A[mid] = $164binary_subscr.8             ['$164binary_subscr.8', 'A', 'mid']
    i = low                                  ['i', 'low']
    $const186.15 = const(int, 1)             ['$const186.15']
    j = high - $const186.15                  ['$const186.15', 'high', 'j']
    jump 192                                 []
label 192:
    $196compare_op.2 = i < high              ['$196compare_op.2', 'high', 'i']
    bool198 = global(bool: <class 'bool'>)   ['bool198']
    $198pred = call bool198($196compare_op.2, func=bool198, args=(Var($196compare_op.2, arraymath.py:1174),), kws=(), vararg=None) ['$196compare_op.2', '$198pred', 'bool198']
    branch $198pred, 200, 224                ['$198pred']
label 200:
    $200load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>) ['$200load_deref.0']
    $206binary_subscr.3 = getitem(value=A, index=i, fn=<built-in function getitem>) ['$206binary_subscr.3', 'A', 'i']
    $210call_function.5 = call $200load_deref.0($206binary_subscr.3, pivot, func=$200load_deref.0, args=[Var($206binary_subscr.3, arraymath.py:1174), Var(pivot, arraymath.py:1168)], kws=(), vararg=None) ['$200load_deref.0', '$206binary_subscr.3', '$210call_function.5', 'pivot']
    bool212 = global(bool: <class 'bool'>)   ['bool212']
    $212pred = call bool212($210call_function.5, func=bool212, args=(Var($210call_function.5, arraymath.py:1174),), kws=(), vararg=None) ['$210call_function.5', '$212pred', 'bool212']
    branch $212pred, 214, 224                ['$212pred']
label 214:
    $const216.1 = const(int, 1)              ['$const216.1']
    $218inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const216.1, static_lhs=Undefined, static_rhs=Undefined) ['$218inplace_add.2', '$const216.1', 'i']
    i = $218inplace_add.2                    ['$218inplace_add.2', 'i']
    jump 192                                 []
label 224:
    $228compare_op.2 = j >= low              ['$228compare_op.2', 'j', 'low']
    bool230 = global(bool: <class 'bool'>)   ['bool230']
    $230pred = call bool230($228compare_op.2, func=bool230, args=(Var($228compare_op.2, arraymath.py:1176),), kws=(), vararg=None) ['$228compare_op.2', '$230pred', 'bool230']
    branch $230pred, 234, 260                ['$230pred']
label 234:
    $234load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>) ['$234load_deref.0']
    $242binary_subscr.4 = getitem(value=A, index=j, fn=<built-in function getitem>) ['$242binary_subscr.4', 'A', 'j']
    $244call_function.5 = call $234load_deref.0(pivot, $242binary_subscr.4, func=$234load_deref.0, args=[Var(pivot, arraymath.py:1168), Var($242binary_subscr.4, arraymath.py:1176)], kws=(), vararg=None) ['$234load_deref.0', '$242binary_subscr.4', '$244call_function.5', 'pivot']
    bool246 = global(bool: <class 'bool'>)   ['bool246']
    $246pred = call bool246($244call_function.5, func=bool246, args=(Var($244call_function.5, arraymath.py:1176),), kws=(), vararg=None) ['$244call_function.5', '$246pred', 'bool246']
    branch $246pred, 250, 260                ['$246pred']
label 250:
    $const252.1 = const(int, 1)              ['$const252.1']
    $254inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const252.1, static_lhs=Undefined, static_rhs=Undefined) ['$254inplace_subtract.2', '$const252.1', 'j']
    j = $254inplace_subtract.2               ['$254inplace_subtract.2', 'j']
    jump 224                                 []
label 260:
    $264compare_op.2 = i >= j                ['$264compare_op.2', 'i', 'j']
    bool266 = global(bool: <class 'bool'>)   ['bool266']
    $266pred = call bool266($264compare_op.2, func=bool266, args=(Var($264compare_op.2, arraymath.py:1178),), kws=(), vararg=None) ['$264compare_op.2', '$266pred', 'bool266']
    branch $266pred, 270, 274                ['$266pred']
label 270:
    jump 318                                 []
label 274:
    $278binary_subscr.2 = getitem(value=A, index=j, fn=<built-in function getitem>) ['$278binary_subscr.2', 'A', 'j']
    $284binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>) ['$284binary_subscr.5', 'A', 'i']
    A[i] = $278binary_subscr.2               ['$278binary_subscr.2', 'A', 'i']
    A[j] = $284binary_subscr.5               ['$284binary_subscr.5', 'A', 'j']
    $const302.11 = const(int, 1)             ['$const302.11']
    $304inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const302.11, static_lhs=Undefined, static_rhs=Undefined) ['$304inplace_add.12', '$const302.11', 'i']
    i = $304inplace_add.12                   ['$304inplace_add.12', 'i']
    $const310.14 = const(int, 1)             ['$const310.14']
    $312inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const310.14, static_lhs=Undefined, static_rhs=Undefined) ['$312inplace_subtract.15', '$const310.14', 'j']
    j = $312inplace_subtract.15              ['$312inplace_subtract.15', 'j']
    jump 192                                 []
label 318:
    $322binary_subscr.2 = getitem(value=A, index=high, fn=<built-in function getitem>) ['$322binary_subscr.2', 'A', 'high']
    $328binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>) ['$328binary_subscr.5', 'A', 'i']
    A[i] = $322binary_subscr.2               ['$322binary_subscr.2', 'A', 'i']
    A[high] = $328binary_subscr.5            ['$328binary_subscr.5', 'A', 'high']
    $346return_value.11 = cast(value=i)      ['$346return_value.11', 'i']
    return $346return_value.11               ['$346return_value.11']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: A = arg(0, name=A)
DEBUG:numba.core.ssa:on stmt: low = arg(1, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(2, name=high)
DEBUG:numba.core.ssa:on stmt: $6binary_add.2 = low + high
DEBUG:numba.core.ssa:on stmt: $const8.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: mid = $6binary_add.2 >> $const8.3
DEBUG:numba.core.ssa:on stmt: $14load_deref.5 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $20binary_subscr.8 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $26binary_subscr.11 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28call_function.12 = call $14load_deref.5($20binary_subscr.8, $26binary_subscr.11, func=$14load_deref.5, args=[Var($20binary_subscr.8, arraymath.py:1162), Var($26binary_subscr.11, arraymath.py:1162)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $30pred = call bool30($28call_function.12, func=bool30, args=(Var($28call_function.12, arraymath.py:1162),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $30pred, 32, 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $36binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[low] = $36binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $42binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $58load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $64binary_subscr.3 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.6 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72call_function.7 = call $58load_deref.0($64binary_subscr.3, $70binary_subscr.6, func=$58load_deref.0, args=[Var($64binary_subscr.3, arraymath.py:1164), Var($70binary_subscr.6, arraymath.py:1164)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool74 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $74pred = call bool74($72call_function.7, func=bool74, args=(Var($72call_function.7, arraymath.py:1164),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $74pred, 76, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 76
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $80binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $86binary_subscr.5 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[high] = $80binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $86binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $102load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $108binary_subscr.3 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $114binary_subscr.6 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $116call_function.7 = call $102load_deref.0($108binary_subscr.3, $114binary_subscr.6, func=$102load_deref.0, args=[Var($108binary_subscr.3, arraymath.py:1166), Var($114binary_subscr.6, arraymath.py:1166)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $118pred = call bool118($116call_function.7, func=bool118, args=(Var($116call_function.7, arraymath.py:1166),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $118pred, 120, 146
DEBUG:numba.core.ssa:==== SSA block analysis pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $124binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $130binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[low] = $124binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $130binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 146
DEBUG:numba.core.ssa:==== SSA block analysis pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: pivot = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $158binary_subscr.5 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $164binary_subscr.8 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[high] = $158binary_subscr.5
DEBUG:numba.core.ssa:on stmt: A[mid] = $164binary_subscr.8
DEBUG:numba.core.ssa:on stmt: i = low
DEBUG:numba.core.ssa:on stmt: $const186.15 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: j = high - $const186.15
DEBUG:numba.core.ssa:on stmt: jump 192
DEBUG:numba.core.ssa:==== SSA block analysis pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $196compare_op.2 = i < high
DEBUG:numba.core.ssa:on stmt: bool198 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $198pred = call bool198($196compare_op.2, func=bool198, args=(Var($196compare_op.2, arraymath.py:1174),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $198pred, 200, 224
DEBUG:numba.core.ssa:==== SSA block analysis pass on 200
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $200load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $206binary_subscr.3 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $210call_function.5 = call $200load_deref.0($206binary_subscr.3, pivot, func=$200load_deref.0, args=[Var($206binary_subscr.3, arraymath.py:1174), Var(pivot, arraymath.py:1168)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $212pred = call bool212($210call_function.5, func=bool212, args=(Var($210call_function.5, arraymath.py:1174),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $212pred, 214, 224
DEBUG:numba.core.ssa:==== SSA block analysis pass on 214
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $const216.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $218inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const216.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: i = $218inplace_add.2
DEBUG:numba.core.ssa:on stmt: jump 319
DEBUG:numba.core.ssa:==== SSA block analysis pass on 224
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $228compare_op.2 = j >= low
DEBUG:numba.core.ssa:on stmt: bool230 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $230pred = call bool230($228compare_op.2, func=bool230, args=(Var($228compare_op.2, arraymath.py:1176),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $230pred, 234, 260
DEBUG:numba.core.ssa:==== SSA block analysis pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $234load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $242binary_subscr.4 = getitem(value=A, index=j, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $244call_function.5 = call $234load_deref.0(pivot, $242binary_subscr.4, func=$234load_deref.0, args=[Var(pivot, arraymath.py:1168), Var($242binary_subscr.4, arraymath.py:1176)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool246 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $246pred = call bool246($244call_function.5, func=bool246, args=(Var($244call_function.5, arraymath.py:1176),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $246pred, 250, 260
DEBUG:numba.core.ssa:==== SSA block analysis pass on 250
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $const252.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $254inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const252.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: j = $254inplace_subtract.2
DEBUG:numba.core.ssa:on stmt: jump 224
DEBUG:numba.core.ssa:==== SSA block analysis pass on 260
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $264compare_op.2 = i >= j
DEBUG:numba.core.ssa:on stmt: bool266 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $266pred = call bool266($264compare_op.2, func=bool266, args=(Var($264compare_op.2, arraymath.py:1178),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $266pred, 270, 274
DEBUG:numba.core.ssa:==== SSA block analysis pass on 270
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: jump 318
DEBUG:numba.core.ssa:==== SSA block analysis pass on 274
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $278binary_subscr.2 = getitem(value=A, index=j, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[i] = $278binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[j] = $284binary_subscr.5
DEBUG:numba.core.ssa:on stmt: $const302.11 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $304inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const302.11, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: i = $304inplace_add.12
DEBUG:numba.core.ssa:on stmt: $const310.14 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $312inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const310.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: j = $312inplace_subtract.15
DEBUG:numba.core.ssa:on stmt: jump 319
DEBUG:numba.core.ssa:==== SSA block analysis pass on 318
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $322binary_subscr.2 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $328binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[i] = $322binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[high] = $328binary_subscr.5
DEBUG:numba.core.ssa:on stmt: $346return_value.11 = cast(value=i)
DEBUG:numba.core.ssa:on stmt: return $346return_value.11
DEBUG:numba.core.ssa:==== SSA block analysis pass on 319
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: jump 192
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$102load_deref.0': [<numba.core.ir.Assign object at 0x7fa9e03f5790>],
             '$108binary_subscr.3': [<numba.core.ir.Assign object at 0x7fa9e03a4fd0>],
             '$114binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa9e03a44c0>],
             '$116call_function.7': [<numba.core.ir.Assign object at 0x7fa9e03a4130>],
             '$118pred': [<numba.core.ir.Assign object at 0x7fa9e03a4b50>],
             '$124binary_subscr.2': [<numba.core.ir.Assign object at 0x7fa9e03a4fa0>],
             '$130binary_subscr.5': [<numba.core.ir.Assign object at 0x7faa24613be0>],
             '$14load_deref.5': [<numba.core.ir.Assign object at 0x7faa1c474040>],
             '$158binary_subscr.5': [<numba.core.ir.Assign object at 0x7faa24613760>],
             '$164binary_subscr.8': [<numba.core.ir.Assign object at 0x7faa2466f610>],
             '$196compare_op.2': [<numba.core.ir.Assign object at 0x7faa2466f130>],
             '$198pred': [<numba.core.ir.Assign object at 0x7faa1c39fdc0>],
             '$200load_deref.0': [<numba.core.ir.Assign object at 0x7faa1c39f100>],
             '$206binary_subscr.3': [<numba.core.ir.Assign object at 0x7faa1c39f070>],
             '$20binary_subscr.8': [<numba.core.ir.Assign object at 0x7faa1c474190>],
             '$210call_function.5': [<numba.core.ir.Assign object at 0x7faa1c39f6d0>],
             '$212pred': [<numba.core.ir.Assign object at 0x7faa1c39f130>],
             '$218inplace_add.2': [<numba.core.ir.Assign object at 0x7faa2442f0a0>],
             '$228compare_op.2': [<numba.core.ir.Assign object at 0x7faa2442fc10>],
             '$230pred': [<numba.core.ir.Assign object at 0x7faa2442fa00>],
             '$234load_deref.0': [<numba.core.ir.Assign object at 0x7faa2442fbb0>],
             '$242binary_subscr.4': [<numba.core.ir.Assign object at 0x7faa243aac70>],
             '$244call_function.5': [<numba.core.ir.Assign object at 0x7faa243aa490>],
             '$246pred': [<numba.core.ir.Assign object at 0x7faa243aa8e0>],
             '$254inplace_subtract.2': [<numba.core.ir.Assign object at 0x7faa243aaee0>],
             '$264compare_op.2': [<numba.core.ir.Assign object at 0x7fa9c41b9cd0>],
             '$266pred': [<numba.core.ir.Assign object at 0x7fa9e03a8760>],
             '$26binary_subscr.11': [<numba.core.ir.Assign object at 0x7faa1c474400>],
             '$278binary_subscr.2': [<numba.core.ir.Assign object at 0x7fa9e03a86d0>],
             '$284binary_subscr.5': [<numba.core.ir.Assign object at 0x7faa1c40f1f0>],
             '$28call_function.12': [<numba.core.ir.Assign object at 0x7faa1c474c40>],
             '$304inplace_add.12': [<numba.core.ir.Assign object at 0x7faa246033a0>],
             '$30pred': [<numba.core.ir.Assign object at 0x7faa245fbca0>],
             '$312inplace_subtract.15': [<numba.core.ir.Assign object at 0x7faa246031f0>],
             '$322binary_subscr.2': [<numba.core.ir.Assign object at 0x7faa24603490>],
             '$328binary_subscr.5': [<numba.core.ir.Assign object at 0x7faa24603250>],
             '$346return_value.11': [<numba.core.ir.Assign object at 0x7fa9c420a430>],
             '$36binary_subscr.2': [<numba.core.ir.Assign object at 0x7faa245fb0a0>],
             '$42binary_subscr.5': [<numba.core.ir.Assign object at 0x7faa245fb190>],
             '$58load_deref.0': [<numba.core.ir.Assign object at 0x7faa1c4006d0>],
             '$64binary_subscr.3': [<numba.core.ir.Assign object at 0x7faa1c4005e0>],
             '$6binary_add.2': [<numba.core.ir.Assign object at 0x7faa1c474e50>],
             '$70binary_subscr.6': [<numba.core.ir.Assign object at 0x7faa1c400700>],
             '$72call_function.7': [<numba.core.ir.Assign object at 0x7faa1c400d30>],
             '$74pred': [<numba.core.ir.Assign object at 0x7faa1c400b50>],
             '$80binary_subscr.2': [<numba.core.ir.Assign object at 0x7fa9e03f5c40>],
             '$86binary_subscr.5': [<numba.core.ir.Assign object at 0x7fa9e03f5130>],
             '$const186.15': [<numba.core.ir.Assign object at 0x7faa2466f8e0>],
             '$const216.1': [<numba.core.ir.Assign object at 0x7faa1c39f940>],
             '$const252.1': [<numba.core.ir.Assign object at 0x7faa243aad00>],
             '$const302.11': [<numba.core.ir.Assign object at 0x7faa24603b20>],
             '$const310.14': [<numba.core.ir.Assign object at 0x7faa24603f40>],
             '$const8.3': [<numba.core.ir.Assign object at 0x7faa1c474070>],
             'A': [<numba.core.ir.Assign object at 0x7faa246db5b0>],
             'bool118': [<numba.core.ir.Assign object at 0x7fa9e03a47c0>],
             'bool198': [<numba.core.ir.Assign object at 0x7faa1c39fc70>],
             'bool212': [<numba.core.ir.Assign object at 0x7faa1c39fe50>],
             'bool230': [<numba.core.ir.Assign object at 0x7faa2442f940>],
             'bool246': [<numba.core.ir.Assign object at 0x7faa243aa190>],
             'bool266': [<numba.core.ir.Assign object at 0x7fa9c41b91f0>],
             'bool30': [<numba.core.ir.Assign object at 0x7faa245fbfd0>],
             'bool74': [<numba.core.ir.Assign object at 0x7faa1c400d60>],
             'high': [<numba.core.ir.Assign object at 0x7faa246dbc40>],
             'i': [<numba.core.ir.Assign object at 0x7faa2466f4f0>,
                   <numba.core.ir.Assign object at 0x7faa2442f6d0>,
                   <numba.core.ir.Assign object at 0x7faa24603220>],
             'j': [<numba.core.ir.Assign object at 0x7faa2466feb0>,
                   <numba.core.ir.Assign object at 0x7faa243aafa0>,
                   <numba.core.ir.Assign object at 0x7faa24603910>],
             'low': [<numba.core.ir.Assign object at 0x7faa246dbdc0>],
             'mid': [<numba.core.ir.Assign object at 0x7faa1c4748e0>],
             'pivot': [<numba.core.ir.Assign object at 0x7faa24613730>]})
DEBUG:numba.core.ssa:SSA violators {'j', 'i'}
DEBUG:numba.core.ssa:Fix SSA violator on var j
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: A = arg(0, name=A)
DEBUG:numba.core.ssa:on stmt: low = arg(1, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(2, name=high)
DEBUG:numba.core.ssa:on stmt: $6binary_add.2 = low + high
DEBUG:numba.core.ssa:on stmt: $const8.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: mid = $6binary_add.2 >> $const8.3
DEBUG:numba.core.ssa:on stmt: $14load_deref.5 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $20binary_subscr.8 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $26binary_subscr.11 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28call_function.12 = call $14load_deref.5($20binary_subscr.8, $26binary_subscr.11, func=$14load_deref.5, args=[Var($20binary_subscr.8, arraymath.py:1162), Var($26binary_subscr.11, arraymath.py:1162)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $30pred = call bool30($28call_function.12, func=bool30, args=(Var($28call_function.12, arraymath.py:1162),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $30pred, 32, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $36binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[low] = $36binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $42binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $58load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $64binary_subscr.3 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.6 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72call_function.7 = call $58load_deref.0($64binary_subscr.3, $70binary_subscr.6, func=$58load_deref.0, args=[Var($64binary_subscr.3, arraymath.py:1164), Var($70binary_subscr.6, arraymath.py:1164)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool74 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $74pred = call bool74($72call_function.7, func=bool74, args=(Var($72call_function.7, arraymath.py:1164),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $74pred, 76, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 76
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $80binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $86binary_subscr.5 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[high] = $80binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $86binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $102load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $108binary_subscr.3 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $114binary_subscr.6 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $116call_function.7 = call $102load_deref.0($108binary_subscr.3, $114binary_subscr.6, func=$102load_deref.0, args=[Var($108binary_subscr.3, arraymath.py:1166), Var($114binary_subscr.6, arraymath.py:1166)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $118pred = call bool118($116call_function.7, func=bool118, args=(Var($116call_function.7, arraymath.py:1166),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $118pred, 120, 146
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $124binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $130binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[low] = $124binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $130binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 146
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: pivot = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $158binary_subscr.5 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $164binary_subscr.8 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[high] = $158binary_subscr.5
DEBUG:numba.core.ssa:on stmt: A[mid] = $164binary_subscr.8
DEBUG:numba.core.ssa:on stmt: i = low
DEBUG:numba.core.ssa:on stmt: $const186.15 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: j = high - $const186.15
DEBUG:numba.core.ssa:first assign: j
DEBUG:numba.core.ssa:replaced with: j = high - $const186.15
DEBUG:numba.core.ssa:on stmt: jump 192
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $196compare_op.2 = i < high
DEBUG:numba.core.ssa:on stmt: bool198 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $198pred = call bool198($196compare_op.2, func=bool198, args=(Var($196compare_op.2, arraymath.py:1174),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $198pred, 200, 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 200
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $200load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $206binary_subscr.3 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $210call_function.5 = call $200load_deref.0($206binary_subscr.3, pivot, func=$200load_deref.0, args=[Var($206binary_subscr.3, arraymath.py:1174), Var(pivot, arraymath.py:1168)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $212pred = call bool212($210call_function.5, func=bool212, args=(Var($210call_function.5, arraymath.py:1174),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $212pred, 214, 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 214
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $const216.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $218inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const216.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: i = $218inplace_add.2
DEBUG:numba.core.ssa:on stmt: jump 319
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 224
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $228compare_op.2 = j >= low
DEBUG:numba.core.ssa:on stmt: bool230 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $230pred = call bool230($228compare_op.2, func=bool230, args=(Var($228compare_op.2, arraymath.py:1176),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $230pred, 234, 260
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $234load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $242binary_subscr.4 = getitem(value=A, index=j, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $244call_function.5 = call $234load_deref.0(pivot, $242binary_subscr.4, func=$234load_deref.0, args=[Var(pivot, arraymath.py:1168), Var($242binary_subscr.4, arraymath.py:1176)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool246 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $246pred = call bool246($244call_function.5, func=bool246, args=(Var($244call_function.5, arraymath.py:1176),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $246pred, 250, 260
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 250
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $const252.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $254inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const252.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: j = $254inplace_subtract.2
DEBUG:numba.core.ssa:replaced with: j.1 = $254inplace_subtract.2
DEBUG:numba.core.ssa:on stmt: jump 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 260
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $264compare_op.2 = i >= j
DEBUG:numba.core.ssa:on stmt: bool266 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $266pred = call bool266($264compare_op.2, func=bool266, args=(Var($264compare_op.2, arraymath.py:1178),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $266pred, 270, 274
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 270
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: jump 318
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 274
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $278binary_subscr.2 = getitem(value=A, index=j, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[i] = $278binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[j] = $284binary_subscr.5
DEBUG:numba.core.ssa:on stmt: $const302.11 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $304inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const302.11, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: i = $304inplace_add.12
DEBUG:numba.core.ssa:on stmt: $const310.14 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $312inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const310.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: j = $312inplace_subtract.15
DEBUG:numba.core.ssa:replaced with: j.2 = $312inplace_subtract.15
DEBUG:numba.core.ssa:on stmt: jump 319
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 318
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: $322binary_subscr.2 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $328binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[i] = $322binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[high] = $328binary_subscr.5
DEBUG:numba.core.ssa:on stmt: $346return_value.11 = cast(value=i)
DEBUG:numba.core.ssa:on stmt: return $346return_value.11
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 319
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa241f16d0>
DEBUG:numba.core.ssa:on stmt: jump 192
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {146: [<numba.core.ir.Assign object at 0x7fa9e03920d0>],
             250: [<numba.core.ir.Assign object at 0x7fa9e0392430>],
             274: [<numba.core.ir.Assign object at 0x7fa9e0392910>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: A = arg(0, name=A)
DEBUG:numba.core.ssa:on stmt: low = arg(1, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(2, name=high)
DEBUG:numba.core.ssa:on stmt: $6binary_add.2 = low + high
DEBUG:numba.core.ssa:on stmt: $const8.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: mid = $6binary_add.2 >> $const8.3
DEBUG:numba.core.ssa:on stmt: $14load_deref.5 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $20binary_subscr.8 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $26binary_subscr.11 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28call_function.12 = call $14load_deref.5($20binary_subscr.8, $26binary_subscr.11, func=$14load_deref.5, args=[Var($20binary_subscr.8, arraymath.py:1162), Var($26binary_subscr.11, arraymath.py:1162)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $30pred = call bool30($28call_function.12, func=bool30, args=(Var($28call_function.12, arraymath.py:1162),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $30pred, 32, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $36binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[low] = $36binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $42binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $58load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $64binary_subscr.3 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.6 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72call_function.7 = call $58load_deref.0($64binary_subscr.3, $70binary_subscr.6, func=$58load_deref.0, args=[Var($64binary_subscr.3, arraymath.py:1164), Var($70binary_subscr.6, arraymath.py:1164)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool74 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $74pred = call bool74($72call_function.7, func=bool74, args=(Var($72call_function.7, arraymath.py:1164),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $74pred, 76, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 76
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $80binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $86binary_subscr.5 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[high] = $80binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $86binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $102load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $108binary_subscr.3 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $114binary_subscr.6 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $116call_function.7 = call $102load_deref.0($108binary_subscr.3, $114binary_subscr.6, func=$102load_deref.0, args=[Var($108binary_subscr.3, arraymath.py:1166), Var($114binary_subscr.6, arraymath.py:1166)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $118pred = call bool118($116call_function.7, func=bool118, args=(Var($116call_function.7, arraymath.py:1166),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $118pred, 120, 146
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $124binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $130binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[low] = $124binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $130binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 146
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: pivot = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $158binary_subscr.5 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $164binary_subscr.8 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[high] = $158binary_subscr.5
DEBUG:numba.core.ssa:on stmt: A[mid] = $164binary_subscr.8
DEBUG:numba.core.ssa:on stmt: i = low
DEBUG:numba.core.ssa:on stmt: $const186.15 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: j = high - $const186.15
DEBUG:numba.core.ssa:on stmt: jump 192
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $196compare_op.2 = i < high
DEBUG:numba.core.ssa:on stmt: bool198 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $198pred = call bool198($196compare_op.2, func=bool198, args=(Var($196compare_op.2, arraymath.py:1174),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $198pred, 200, 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 200
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $200load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $206binary_subscr.3 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $210call_function.5 = call $200load_deref.0($206binary_subscr.3, pivot, func=$200load_deref.0, args=[Var($206binary_subscr.3, arraymath.py:1174), Var(pivot, arraymath.py:1168)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $212pred = call bool212($210call_function.5, func=bool212, args=(Var($210call_function.5, arraymath.py:1174),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $212pred, 214, 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 214
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $const216.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $218inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const216.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: i = $218inplace_add.2
DEBUG:numba.core.ssa:on stmt: jump 319
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 224
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $228compare_op.2 = j >= low
DEBUG:numba.core.ssa:find_def var='j' stmt=$228compare_op.2 = j >= low
DEBUG:numba.core.ssa:find_def_from_top label 224
DEBUG:numba.core.ssa:insert phi node j.3 = phi(incoming_values=[], incoming_blocks=[]) at 224
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:find_def_from_top label 192
DEBUG:numba.core.ssa:insert phi node j.4 = phi(incoming_values=[], incoming_blocks=[]) at 192
DEBUG:numba.core.ssa:find_def_from_bottom label 146
DEBUG:numba.core.ssa:incoming_def j = high - $const186.15
DEBUG:numba.core.ssa:find_def_from_bottom label 319
DEBUG:numba.core.ssa:find_def_from_top label 319
DEBUG:numba.core.ssa:insert phi node j.5 = phi(incoming_values=[], incoming_blocks=[]) at 319
DEBUG:numba.core.ssa:find_def_from_bottom label 274
DEBUG:numba.core.ssa:incoming_def j.2 = $312inplace_subtract.15
DEBUG:numba.core.ssa:find_def_from_bottom label 214
DEBUG:numba.core.ssa:find_def_from_top label 214
DEBUG:numba.core.ssa:idom 200 from label 214
DEBUG:numba.core.ssa:find_def_from_bottom label 200
DEBUG:numba.core.ssa:find_def_from_top label 200
DEBUG:numba.core.ssa:idom 192 from label 200
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:incoming_def j.4 = phi(incoming_values=[Var(j, arraymath.py:1172)], incoming_blocks=[146])
DEBUG:numba.core.ssa:incoming_def j.5 = phi(incoming_values=[Var(j.2, arraymath.py:1182), Var(j.4, arraymath.py:1176)], incoming_blocks=[274, 214])
DEBUG:numba.core.ssa:incoming_def j.4 = phi(incoming_values=[Var(j, arraymath.py:1172), Var(j.5, arraymath.py:1176)], incoming_blocks=[146, 319])
DEBUG:numba.core.ssa:find_def_from_bottom label 250
DEBUG:numba.core.ssa:incoming_def j.1 = $254inplace_subtract.2
DEBUG:numba.core.ssa:find_def_from_bottom label 200
DEBUG:numba.core.ssa:find_def_from_top label 200
DEBUG:numba.core.ssa:idom 192 from label 200
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:incoming_def j.4 = phi(incoming_values=[Var(j, arraymath.py:1172), Var(j.5, arraymath.py:1176)], incoming_blocks=[146, 319])
DEBUG:numba.core.ssa:replaced with: $228compare_op.2 = j.3 >= low
DEBUG:numba.core.ssa:on stmt: bool230 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $230pred = call bool230($228compare_op.2, func=bool230, args=(Var($228compare_op.2, arraymath.py:1176),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $230pred, 234, 260
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $234load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $242binary_subscr.4 = getitem(value=A, index=j, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='j' stmt=$242binary_subscr.4 = getitem(value=A, index=j, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 234
DEBUG:numba.core.ssa:idom 224 from label 234
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:replaced with: $242binary_subscr.4 = getitem(value=A, index=j.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $244call_function.5 = call $234load_deref.0(pivot, $242binary_subscr.4, func=$234load_deref.0, args=[Var(pivot, arraymath.py:1168), Var($242binary_subscr.4, arraymath.py:1176)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool246 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $246pred = call bool246($244call_function.5, func=bool246, args=(Var($244call_function.5, arraymath.py:1176),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $246pred, 250, 260
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 250
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $const252.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $254inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const252.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='j' stmt=$254inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const252.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 250
DEBUG:numba.core.ssa:idom 234 from label 250
DEBUG:numba.core.ssa:find_def_from_bottom label 234
DEBUG:numba.core.ssa:find_def_from_top label 234
DEBUG:numba.core.ssa:idom 224 from label 234
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:replaced with: $254inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const252.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: j.1 = $254inplace_subtract.2
DEBUG:numba.core.ssa:on stmt: jump 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 260
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $264compare_op.2 = i >= j
DEBUG:numba.core.ssa:find_def var='j' stmt=$264compare_op.2 = i >= j
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:replaced with: $264compare_op.2 = i >= j.3
DEBUG:numba.core.ssa:on stmt: bool266 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $266pred = call bool266($264compare_op.2, func=bool266, args=(Var($264compare_op.2, arraymath.py:1178),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $266pred, 270, 274
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 270
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: jump 318
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 274
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $278binary_subscr.2 = getitem(value=A, index=j, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='j' stmt=$278binary_subscr.2 = getitem(value=A, index=j, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 274
DEBUG:numba.core.ssa:idom 260 from label 274
DEBUG:numba.core.ssa:find_def_from_bottom label 260
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:replaced with: $278binary_subscr.2 = getitem(value=A, index=j.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[i] = $278binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[j] = $284binary_subscr.5
DEBUG:numba.core.ssa:find_def var='j' stmt=A[j] = $284binary_subscr.5
DEBUG:numba.core.ssa:find_def_from_top label 274
DEBUG:numba.core.ssa:idom 260 from label 274
DEBUG:numba.core.ssa:find_def_from_bottom label 260
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:replaced with: A[j.3] = $284binary_subscr.5
DEBUG:numba.core.ssa:on stmt: $const302.11 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $304inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const302.11, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: i = $304inplace_add.12
DEBUG:numba.core.ssa:on stmt: $const310.14 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $312inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const310.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='j' stmt=$312inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const310.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 274
DEBUG:numba.core.ssa:idom 260 from label 274
DEBUG:numba.core.ssa:find_def_from_bottom label 260
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:replaced with: $312inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const310.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: j.2 = $312inplace_subtract.15
DEBUG:numba.core.ssa:on stmt: jump 319
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 318
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: $322binary_subscr.2 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $328binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[i] = $322binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[high] = $328binary_subscr.5
DEBUG:numba.core.ssa:on stmt: $346return_value.11 = cast(value=i)
DEBUG:numba.core.ssa:on stmt: return $346return_value.11
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 319
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03926a0>
DEBUG:numba.core.ssa:on stmt: jump 192
DEBUG:numba.core.ssa:Fix SSA violator on var i
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: A = arg(0, name=A)
DEBUG:numba.core.ssa:on stmt: low = arg(1, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(2, name=high)
DEBUG:numba.core.ssa:on stmt: $6binary_add.2 = low + high
DEBUG:numba.core.ssa:on stmt: $const8.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: mid = $6binary_add.2 >> $const8.3
DEBUG:numba.core.ssa:on stmt: $14load_deref.5 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $20binary_subscr.8 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $26binary_subscr.11 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28call_function.12 = call $14load_deref.5($20binary_subscr.8, $26binary_subscr.11, func=$14load_deref.5, args=[Var($20binary_subscr.8, arraymath.py:1162), Var($26binary_subscr.11, arraymath.py:1162)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $30pred = call bool30($28call_function.12, func=bool30, args=(Var($28call_function.12, arraymath.py:1162),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $30pred, 32, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $36binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[low] = $36binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $42binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $58load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $64binary_subscr.3 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.6 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72call_function.7 = call $58load_deref.0($64binary_subscr.3, $70binary_subscr.6, func=$58load_deref.0, args=[Var($64binary_subscr.3, arraymath.py:1164), Var($70binary_subscr.6, arraymath.py:1164)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool74 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $74pred = call bool74($72call_function.7, func=bool74, args=(Var($72call_function.7, arraymath.py:1164),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $74pred, 76, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 76
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $80binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $86binary_subscr.5 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[high] = $80binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $86binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $102load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $108binary_subscr.3 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $114binary_subscr.6 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $116call_function.7 = call $102load_deref.0($108binary_subscr.3, $114binary_subscr.6, func=$102load_deref.0, args=[Var($108binary_subscr.3, arraymath.py:1166), Var($114binary_subscr.6, arraymath.py:1166)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $118pred = call bool118($116call_function.7, func=bool118, args=(Var($116call_function.7, arraymath.py:1166),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $118pred, 120, 146
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $124binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $130binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[low] = $124binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $130binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 146
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: pivot = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $158binary_subscr.5 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $164binary_subscr.8 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[high] = $158binary_subscr.5
DEBUG:numba.core.ssa:on stmt: A[mid] = $164binary_subscr.8
DEBUG:numba.core.ssa:on stmt: i = low
DEBUG:numba.core.ssa:first assign: i
DEBUG:numba.core.ssa:replaced with: i = low
DEBUG:numba.core.ssa:on stmt: $const186.15 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: j = high - $const186.15
DEBUG:numba.core.ssa:on stmt: jump 192
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: j.4 = phi(incoming_values=[Var(j, arraymath.py:1172), Var(j.5, arraymath.py:1176)], incoming_blocks=[146, 319])
DEBUG:numba.core.ssa:on stmt: $196compare_op.2 = i < high
DEBUG:numba.core.ssa:on stmt: bool198 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $198pred = call bool198($196compare_op.2, func=bool198, args=(Var($196compare_op.2, arraymath.py:1174),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $198pred, 200, 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 200
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $200load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $206binary_subscr.3 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $210call_function.5 = call $200load_deref.0($206binary_subscr.3, pivot, func=$200load_deref.0, args=[Var($206binary_subscr.3, arraymath.py:1174), Var(pivot, arraymath.py:1168)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $212pred = call bool212($210call_function.5, func=bool212, args=(Var($210call_function.5, arraymath.py:1174),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $212pred, 214, 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 214
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $const216.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $218inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const216.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: i = $218inplace_add.2
DEBUG:numba.core.ssa:replaced with: i.1 = $218inplace_add.2
DEBUG:numba.core.ssa:on stmt: jump 319
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 224
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: j.3 = phi(incoming_values=[Var(j.4, arraymath.py:1176), Var(j.1, arraymath.py:1177), Var(j.4, arraymath.py:1176)], incoming_blocks=[192, 250, 200])
DEBUG:numba.core.ssa:on stmt: $228compare_op.2 = j.3 >= low
DEBUG:numba.core.ssa:on stmt: bool230 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $230pred = call bool230($228compare_op.2, func=bool230, args=(Var($228compare_op.2, arraymath.py:1176),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $230pred, 234, 260
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $234load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $242binary_subscr.4 = getitem(value=A, index=j.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $244call_function.5 = call $234load_deref.0(pivot, $242binary_subscr.4, func=$234load_deref.0, args=[Var(pivot, arraymath.py:1168), Var($242binary_subscr.4, arraymath.py:1176)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool246 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $246pred = call bool246($244call_function.5, func=bool246, args=(Var($244call_function.5, arraymath.py:1176),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $246pred, 250, 260
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 250
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $const252.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $254inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const252.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: j.1 = $254inplace_subtract.2
DEBUG:numba.core.ssa:on stmt: jump 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 260
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $264compare_op.2 = i >= j.3
DEBUG:numba.core.ssa:on stmt: bool266 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $266pred = call bool266($264compare_op.2, func=bool266, args=(Var($264compare_op.2, arraymath.py:1178),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $266pred, 270, 274
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 270
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: jump 318
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 274
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $278binary_subscr.2 = getitem(value=A, index=j.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[i] = $278binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[j.3] = $284binary_subscr.5
DEBUG:numba.core.ssa:on stmt: $const302.11 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $304inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const302.11, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: i = $304inplace_add.12
DEBUG:numba.core.ssa:replaced with: i.2 = $304inplace_add.12
DEBUG:numba.core.ssa:on stmt: $const310.14 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $312inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const310.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: j.2 = $312inplace_subtract.15
DEBUG:numba.core.ssa:on stmt: jump 319
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 318
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: $322binary_subscr.2 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $328binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[i] = $322binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[high] = $328binary_subscr.5
DEBUG:numba.core.ssa:on stmt: $346return_value.11 = cast(value=i)
DEBUG:numba.core.ssa:on stmt: return $346return_value.11
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 319
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e0392760>
DEBUG:numba.core.ssa:on stmt: j.5 = phi(incoming_values=[Var(j.2, arraymath.py:1182), Var(j.4, arraymath.py:1176)], incoming_blocks=[274, 214])
DEBUG:numba.core.ssa:on stmt: jump 192
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {146: [<numba.core.ir.Assign object at 0x7fa9e0392fa0>],
             214: [<numba.core.ir.Assign object at 0x7fa9e0392ac0>],
             274: [<numba.core.ir.Assign object at 0x7fa9c41db2b0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: A = arg(0, name=A)
DEBUG:numba.core.ssa:on stmt: low = arg(1, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(2, name=high)
DEBUG:numba.core.ssa:on stmt: $6binary_add.2 = low + high
DEBUG:numba.core.ssa:on stmt: $const8.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: mid = $6binary_add.2 >> $const8.3
DEBUG:numba.core.ssa:on stmt: $14load_deref.5 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $20binary_subscr.8 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $26binary_subscr.11 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $28call_function.12 = call $14load_deref.5($20binary_subscr.8, $26binary_subscr.11, func=$14load_deref.5, args=[Var($20binary_subscr.8, arraymath.py:1162), Var($26binary_subscr.11, arraymath.py:1162)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool30 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $30pred = call bool30($28call_function.12, func=bool30, args=(Var($28call_function.12, arraymath.py:1162),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $30pred, 32, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 32
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $36binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $42binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[low] = $36binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $42binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $58load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $64binary_subscr.3 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $70binary_subscr.6 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $72call_function.7 = call $58load_deref.0($64binary_subscr.3, $70binary_subscr.6, func=$58load_deref.0, args=[Var($64binary_subscr.3, arraymath.py:1164), Var($70binary_subscr.6, arraymath.py:1164)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool74 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $74pred = call bool74($72call_function.7, func=bool74, args=(Var($72call_function.7, arraymath.py:1164),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $74pred, 76, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 76
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $80binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $86binary_subscr.5 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[high] = $80binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $86binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $102load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $108binary_subscr.3 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $114binary_subscr.6 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $116call_function.7 = call $102load_deref.0($108binary_subscr.3, $114binary_subscr.6, func=$102load_deref.0, args=[Var($108binary_subscr.3, arraymath.py:1166), Var($114binary_subscr.6, arraymath.py:1166)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $118pred = call bool118($116call_function.7, func=bool118, args=(Var($116call_function.7, arraymath.py:1166),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $118pred, 120, 146
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $124binary_subscr.2 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $130binary_subscr.5 = getitem(value=A, index=low, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[low] = $124binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[mid] = $130binary_subscr.5
DEBUG:numba.core.ssa:on stmt: jump 146
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: pivot = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $158binary_subscr.5 = getitem(value=A, index=mid, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $164binary_subscr.8 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[high] = $158binary_subscr.5
DEBUG:numba.core.ssa:on stmt: A[mid] = $164binary_subscr.8
DEBUG:numba.core.ssa:on stmt: i = low
DEBUG:numba.core.ssa:on stmt: $const186.15 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: j = high - $const186.15
DEBUG:numba.core.ssa:on stmt: jump 192
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: j.4 = phi(incoming_values=[Var(j, arraymath.py:1172), Var(j.5, arraymath.py:1176)], incoming_blocks=[146, 319])
DEBUG:numba.core.ssa:on stmt: $196compare_op.2 = i < high
DEBUG:numba.core.ssa:find_def var='i' stmt=$196compare_op.2 = i < high
DEBUG:numba.core.ssa:find_def_from_top label 192
DEBUG:numba.core.ssa:insert phi node i.3 = phi(incoming_values=[], incoming_blocks=[]) at 192
DEBUG:numba.core.ssa:find_def_from_bottom label 146
DEBUG:numba.core.ssa:incoming_def i = low
DEBUG:numba.core.ssa:find_def_from_bottom label 319
DEBUG:numba.core.ssa:find_def_from_top label 319
DEBUG:numba.core.ssa:insert phi node i.4 = phi(incoming_values=[], incoming_blocks=[]) at 319
DEBUG:numba.core.ssa:find_def_from_bottom label 274
DEBUG:numba.core.ssa:incoming_def i.2 = $304inplace_add.12
DEBUG:numba.core.ssa:find_def_from_bottom label 214
DEBUG:numba.core.ssa:incoming_def i.1 = $218inplace_add.2
DEBUG:numba.core.ssa:incoming_def i.4 = phi(incoming_values=[Var(i.2, arraymath.py:1181), Var(i.1, arraymath.py:1175)], incoming_blocks=[274, 214])
DEBUG:numba.core.ssa:replaced with: $196compare_op.2 = i.3 < high
DEBUG:numba.core.ssa:on stmt: bool198 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $198pred = call bool198($196compare_op.2, func=bool198, args=(Var($196compare_op.2, arraymath.py:1174),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $198pred, 200, 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 200
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $200load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $206binary_subscr.3 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='i' stmt=$206binary_subscr.3 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 200
DEBUG:numba.core.ssa:idom 192 from label 200
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:replaced with: $206binary_subscr.3 = getitem(value=A, index=i.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $210call_function.5 = call $200load_deref.0($206binary_subscr.3, pivot, func=$200load_deref.0, args=[Var($206binary_subscr.3, arraymath.py:1174), Var(pivot, arraymath.py:1168)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool212 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $212pred = call bool212($210call_function.5, func=bool212, args=(Var($210call_function.5, arraymath.py:1174),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $212pred, 214, 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 214
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $const216.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $218inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const216.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='i' stmt=$218inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const216.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 214
DEBUG:numba.core.ssa:idom 200 from label 214
DEBUG:numba.core.ssa:find_def_from_bottom label 200
DEBUG:numba.core.ssa:find_def_from_top label 200
DEBUG:numba.core.ssa:idom 192 from label 200
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:replaced with: $218inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.3, rhs=$const216.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: i.1 = $218inplace_add.2
DEBUG:numba.core.ssa:on stmt: jump 319
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 224
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: j.3 = phi(incoming_values=[Var(j.4, arraymath.py:1176), Var(j.1, arraymath.py:1177), Var(j.4, arraymath.py:1176)], incoming_blocks=[192, 250, 200])
DEBUG:numba.core.ssa:on stmt: $228compare_op.2 = j.3 >= low
DEBUG:numba.core.ssa:on stmt: bool230 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $230pred = call bool230($228compare_op.2, func=bool230, args=(Var($228compare_op.2, arraymath.py:1176),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $230pred, 234, 260
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 234
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $234load_deref.0 = freevar(pivotimpl: <function less_than at 0x7faa40162f70>)
DEBUG:numba.core.ssa:on stmt: $242binary_subscr.4 = getitem(value=A, index=j.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $244call_function.5 = call $234load_deref.0(pivot, $242binary_subscr.4, func=$234load_deref.0, args=[Var(pivot, arraymath.py:1168), Var($242binary_subscr.4, arraymath.py:1176)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: bool246 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $246pred = call bool246($244call_function.5, func=bool246, args=(Var($244call_function.5, arraymath.py:1176),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $246pred, 250, 260
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 250
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $const252.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $254inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const252.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: j.1 = $254inplace_subtract.2
DEBUG:numba.core.ssa:on stmt: jump 224
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 260
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $264compare_op.2 = i >= j.3
DEBUG:numba.core.ssa:find_def var='i' stmt=$264compare_op.2 = i >= j.3
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:find_def_from_top label 224
DEBUG:numba.core.ssa:idom 192 from label 224
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:replaced with: $264compare_op.2 = i.3 >= j.3
DEBUG:numba.core.ssa:on stmt: bool266 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $266pred = call bool266($264compare_op.2, func=bool266, args=(Var($264compare_op.2, arraymath.py:1178),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $266pred, 270, 274
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 270
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: jump 318
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 274
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $278binary_subscr.2 = getitem(value=A, index=j.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $284binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='i' stmt=$284binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 274
DEBUG:numba.core.ssa:idom 260 from label 274
DEBUG:numba.core.ssa:find_def_from_bottom label 260
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:find_def_from_top label 224
DEBUG:numba.core.ssa:idom 192 from label 224
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:replaced with: $284binary_subscr.5 = getitem(value=A, index=i.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[i] = $278binary_subscr.2
DEBUG:numba.core.ssa:find_def var='i' stmt=A[i] = $278binary_subscr.2
DEBUG:numba.core.ssa:find_def_from_top label 274
DEBUG:numba.core.ssa:idom 260 from label 274
DEBUG:numba.core.ssa:find_def_from_bottom label 260
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:find_def_from_top label 224
DEBUG:numba.core.ssa:idom 192 from label 224
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:replaced with: A[i.3] = $278binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[j.3] = $284binary_subscr.5
DEBUG:numba.core.ssa:on stmt: $const302.11 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $304inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const302.11, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='i' stmt=$304inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const302.11, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 274
DEBUG:numba.core.ssa:idom 260 from label 274
DEBUG:numba.core.ssa:find_def_from_bottom label 260
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:find_def_from_top label 224
DEBUG:numba.core.ssa:idom 192 from label 224
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:replaced with: $304inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.3, rhs=$const302.11, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: i.2 = $304inplace_add.12
DEBUG:numba.core.ssa:on stmt: $const310.14 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $312inplace_subtract.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.3, rhs=$const310.14, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: j.2 = $312inplace_subtract.15
DEBUG:numba.core.ssa:on stmt: jump 319
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 318
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: $322binary_subscr.2 = getitem(value=A, index=high, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $328binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='i' stmt=$328binary_subscr.5 = getitem(value=A, index=i, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 318
DEBUG:numba.core.ssa:idom 270 from label 318
DEBUG:numba.core.ssa:find_def_from_bottom label 270
DEBUG:numba.core.ssa:find_def_from_top label 270
DEBUG:numba.core.ssa:idom 260 from label 270
DEBUG:numba.core.ssa:find_def_from_bottom label 260
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:find_def_from_top label 224
DEBUG:numba.core.ssa:idom 192 from label 224
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:replaced with: $328binary_subscr.5 = getitem(value=A, index=i.3, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: A[i] = $322binary_subscr.2
DEBUG:numba.core.ssa:find_def var='i' stmt=A[i] = $322binary_subscr.2
DEBUG:numba.core.ssa:find_def_from_top label 318
DEBUG:numba.core.ssa:idom 270 from label 318
DEBUG:numba.core.ssa:find_def_from_bottom label 270
DEBUG:numba.core.ssa:find_def_from_top label 270
DEBUG:numba.core.ssa:idom 260 from label 270
DEBUG:numba.core.ssa:find_def_from_bottom label 260
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:find_def_from_top label 224
DEBUG:numba.core.ssa:idom 192 from label 224
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:replaced with: A[i.3] = $322binary_subscr.2
DEBUG:numba.core.ssa:on stmt: A[high] = $328binary_subscr.5
DEBUG:numba.core.ssa:on stmt: $346return_value.11 = cast(value=i)
DEBUG:numba.core.ssa:find_def var='i' stmt=$346return_value.11 = cast(value=i)
DEBUG:numba.core.ssa:find_def_from_top label 318
DEBUG:numba.core.ssa:idom 270 from label 318
DEBUG:numba.core.ssa:find_def_from_bottom label 270
DEBUG:numba.core.ssa:find_def_from_top label 270
DEBUG:numba.core.ssa:idom 260 from label 270
DEBUG:numba.core.ssa:find_def_from_bottom label 260
DEBUG:numba.core.ssa:find_def_from_top label 260
DEBUG:numba.core.ssa:idom 224 from label 260
DEBUG:numba.core.ssa:find_def_from_bottom label 224
DEBUG:numba.core.ssa:find_def_from_top label 224
DEBUG:numba.core.ssa:idom 192 from label 224
DEBUG:numba.core.ssa:find_def_from_bottom label 192
DEBUG:numba.core.ssa:replaced with: $346return_value.11 = cast(value=i.3)
DEBUG:numba.core.ssa:on stmt: return $346return_value.11
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 319
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0392eb0>
DEBUG:numba.core.ssa:on stmt: j.5 = phi(incoming_values=[Var(j.2, arraymath.py:1182), Var(j.4, arraymath.py:1176)], incoming_blocks=[274, 214])
DEBUG:numba.core.ssa:on stmt: jump 192
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=816)
           2	LOAD_FAST(arg=0, lineno=816)
           4	LOAD_FAST(arg=1, lineno=816)
           6	COMPARE_OP(arg=0, lineno=816)
           8	RETURN_VALUE(arg=None, lineno=816)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=816)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=816)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=816)
DEBUG:numba.core.byteflow:stack ['$a2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=COMPARE_OP(arg=0, lineno=816)
DEBUG:numba.core.byteflow:stack ['$a2.0', '$b4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=816)
DEBUG:numba.core.byteflow:stack ['$6compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$b4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$b4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $6compare_op.2 = a < b                   ['$6compare_op.2', 'a', 'b']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = a < b
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7faa243afeb0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7faa1c409190>],
             'a': [<numba.core.ir.Assign object at 0x7fa9e0188b80>],
             'b': [<numba.core.ir.Assign object at 0x7fa9e0188430>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1199)
           2	LOAD_DEREF(arg=0, lineno=1199)
           4	LOAD_FAST(arg=0, lineno=1199)
           6	LOAD_FAST(arg=2, lineno=1199)
           8	LOAD_FAST(arg=3, lineno=1199)
          10	CALL_FUNCTION(arg=3, lineno=1199)
          12	STORE_FAST(arg=4, lineno=1199)
>         14	LOAD_FAST(arg=4, lineno=1200)
          16	LOAD_FAST(arg=1, lineno=1200)
          18	COMPARE_OP(arg=3, lineno=1200)
          20	POP_JUMP_IF_FALSE(arg=74, lineno=1200)
          22	LOAD_FAST(arg=4, lineno=1201)
          24	LOAD_FAST(arg=1, lineno=1201)
          26	COMPARE_OP(arg=0, lineno=1201)
          28	POP_JUMP_IF_FALSE(arg=52, lineno=1201)
          30	LOAD_FAST(arg=4, lineno=1202)
          32	LOAD_CONST(arg=1, lineno=1202)
          34	BINARY_ADD(arg=None, lineno=1202)
          36	STORE_FAST(arg=2, lineno=1202)
          38	LOAD_DEREF(arg=0, lineno=1203)
          40	LOAD_FAST(arg=0, lineno=1203)
          42	LOAD_FAST(arg=2, lineno=1203)
          44	LOAD_FAST(arg=3, lineno=1203)
          46	CALL_FUNCTION(arg=3, lineno=1203)
          48	STORE_FAST(arg=4, lineno=1203)
          50	JUMP_ABSOLUTE(arg=14, lineno=1203)
>         52	LOAD_FAST(arg=4, lineno=1205)
          54	LOAD_CONST(arg=1, lineno=1205)
          56	BINARY_SUBTRACT(arg=None, lineno=1205)
          58	STORE_FAST(arg=3, lineno=1205)
          60	LOAD_DEREF(arg=0, lineno=1206)
          62	LOAD_FAST(arg=0, lineno=1206)
          64	LOAD_FAST(arg=2, lineno=1206)
          66	LOAD_FAST(arg=3, lineno=1206)
          68	CALL_FUNCTION(arg=3, lineno=1206)
          70	STORE_FAST(arg=4, lineno=1206)
          72	JUMP_ABSOLUTE(arg=14, lineno=1206)
>         74	LOAD_FAST(arg=0, lineno=1207)
          76	LOAD_FAST(arg=1, lineno=1207)
          78	BINARY_SUBSCR(arg=None, lineno=1207)
          80	RETURN_VALUE(arg=None, lineno=1207)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1199)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=1199)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1199)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=1199)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$arry4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=3, lineno=1199)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$arry4.1', '$low6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=1199)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$arry4.1', '$low6.2', '$high8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=STORE_FAST(arg=4, lineno=1199)
DEBUG:numba.core.byteflow:stack ['$10call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=4, lineno=1200)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=1200)
DEBUG:numba.core.byteflow:stack ['$i14.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=COMPARE_OP(arg=3, lineno=1200)
DEBUG:numba.core.byteflow:stack ['$i14.0', '$k16.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=74, lineno=1200)
DEBUG:numba.core.byteflow:stack ['$18compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=4, lineno=1201)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1201)
DEBUG:numba.core.byteflow:stack ['$i22.0']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=COMPARE_OP(arg=0, lineno=1201)
DEBUG:numba.core.byteflow:stack ['$i22.0', '$k24.1']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1201)
DEBUG:numba.core.byteflow:stack ['$26compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=0, lineno=1207)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=1, lineno=1207)
DEBUG:numba.core.byteflow:stack ['$arry74.0']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_SUBSCR(arg=None, lineno=1207)
DEBUG:numba.core.byteflow:stack ['$arry74.0', '$k76.1']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=1207)
DEBUG:numba.core.byteflow:stack ['$78binary_subscr.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=4, lineno=1202)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=1202)
DEBUG:numba.core.byteflow:stack ['$i30.0']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=BINARY_ADD(arg=None, lineno=1202)
DEBUG:numba.core.byteflow:stack ['$i30.0', '$const32.1']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=STORE_FAST(arg=2, lineno=1202)
DEBUG:numba.core.byteflow:stack ['$34binary_add.2']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_DEREF(arg=0, lineno=1203)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1203)
DEBUG:numba.core.byteflow:stack ['$38load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=1203)
DEBUG:numba.core.byteflow:stack ['$38load_deref.3', '$arry40.4']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=1203)
DEBUG:numba.core.byteflow:stack ['$38load_deref.3', '$arry40.4', '$low42.5']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=CALL_FUNCTION(arg=3, lineno=1203)
DEBUG:numba.core.byteflow:stack ['$38load_deref.3', '$arry40.4', '$low42.5', '$high44.6']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=4, lineno=1203)
DEBUG:numba.core.byteflow:stack ['$46call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=JUMP_ABSOLUTE(arg=14, lineno=1203)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1205)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1205)
DEBUG:numba.core.byteflow:stack ['$i52.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=BINARY_SUBTRACT(arg=None, lineno=1205)
DEBUG:numba.core.byteflow:stack ['$i52.0', '$const54.1']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=STORE_FAST(arg=3, lineno=1205)
DEBUG:numba.core.byteflow:stack ['$56binary_subtract.2']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_DEREF(arg=0, lineno=1206)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=1206)
DEBUG:numba.core.byteflow:stack ['$60load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=1206)
DEBUG:numba.core.byteflow:stack ['$60load_deref.3', '$arry62.4']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=1206)
DEBUG:numba.core.byteflow:stack ['$60load_deref.3', '$arry62.4', '$low64.5']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=CALL_FUNCTION(arg=3, lineno=1206)
DEBUG:numba.core.byteflow:stack ['$60load_deref.3', '$arry62.4', '$low64.5', '$high66.6']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=STORE_FAST(arg=4, lineno=1206)
DEBUG:numba.core.byteflow:stack ['$68call_function.7']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=JUMP_ABSOLUTE(arg=14, lineno=1206)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$arry4.1'}), (6, {'res': '$low6.2'}), (8, {'res': '$high8.3'}), (10, {'func': '$2load_deref.0', 'args': ['$arry4.1', '$low6.2', '$high8.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$i14.0'}), (16, {'res': '$k16.1'}), (18, {'lhs': '$i14.0', 'rhs': '$k16.1', 'res': '$18compare_op.2'}), (20, {'pred': '$18compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 74: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$i22.0'}), (24, {'res': '$k24.1'}), (26, {'lhs': '$i22.0', 'rhs': '$k24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 52: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$i30.0'}), (32, {'res': '$const32.1'}), (34, {'lhs': '$i30.0', 'rhs': '$const32.1', 'res': '$34binary_add.2'}), (36, {'value': '$34binary_add.2'}), (38, {'res': '$38load_deref.3'}), (40, {'res': '$arry40.4'}), (42, {'res': '$low42.5'}), (44, {'res': '$high44.6'}), (46, {'func': '$38load_deref.3', 'args': ['$arry40.4', '$low42.5', '$high44.6'], 'res': '$46call_function.7'}), (48, {'value': '$46call_function.7'}), (50, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$i52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$i52.0', 'rhs': '$const54.1', 'res': '$56binary_subtract.2'}), (58, {'value': '$56binary_subtract.2'}), (60, {'res': '$60load_deref.3'}), (62, {'res': '$arry62.4'}), (64, {'res': '$low64.5'}), (66, {'res': '$high66.6'}), (68, {'func': '$60load_deref.3', 'args': ['$arry62.4', '$low64.5', '$high66.6'], 'res': '$68call_function.7'}), (70, {'value': '$68call_function.7'}), (72, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$arry74.0'}), (76, {'res': '$k76.1'}), (78, {'index': '$k76.1', 'target': '$arry74.0', 'res': '$78binary_subscr.2'}), (80, {'retval': '$78binary_subscr.2', 'castval': '$80return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arry = arg(0, name=arry)                 ['arry']
    k = arg(1, name=k)                       ['k']
    low = arg(2, name=low)                   ['low']
    high = arg(3, name=high)                 ['high']
    $2load_deref.0 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>) ['$2load_deref.0']
    i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None) ['$2load_deref.0', 'arry', 'high', 'i', 'low']
    jump 14                                  []
label 14:
    $18compare_op.2 = i != k                 ['$18compare_op.2', 'i', 'k']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, arraymath.py:1200),), kws=(), vararg=None) ['$18compare_op.2', '$20pred', 'bool20']
    branch $20pred, 22, 74                   ['$20pred']
label 22:
    $26compare_op.2 = i < k                  ['$26compare_op.2', 'i', 'k']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, arraymath.py:1201),), kws=(), vararg=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 52                   ['$28pred']
label 30:
    $const32.1 = const(int, 1)               ['$const32.1']
    low = i + $const32.1                     ['$const32.1', 'i', 'low']
    $38load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>) ['$38load_deref.3']
    i = call $38load_deref.3(arry, low, high, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None) ['$38load_deref.3', 'arry', 'high', 'i', 'low']
    jump 14                                  []
label 52:
    $const54.1 = const(int, 1)               ['$const54.1']
    high = i - $const54.1                    ['$const54.1', 'high', 'i']
    $60load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>) ['$60load_deref.3']
    i = call $60load_deref.3(arry, low, high, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None) ['$60load_deref.3', 'arry', 'high', 'i', 'low']
    jump 14                                  []
label 74:
    $78binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>) ['$78binary_subscr.2', 'arry', 'k']
    $80return_value.3 = cast(value=$78binary_subscr.2) ['$78binary_subscr.2', '$80return_value.3']
    return $80return_value.3                 ['$80return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: $18compare_op.2 = i != k
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, arraymath.py:1200),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 22, 74
DEBUG:numba.core.ssa:==== SSA block analysis pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: $26compare_op.2 = i < k
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, arraymath.py:1201),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 52
DEBUG:numba.core.ssa:==== SSA block analysis pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: $const32.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low = i + $const32.1
DEBUG:numba.core.ssa:on stmt: $38load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $38load_deref.3(arry, low, high, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block analysis pass on 52
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: $const54.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high = i - $const54.1
DEBUG:numba.core.ssa:on stmt: $60load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $60load_deref.3(arry, low, high, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: $78binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $80return_value.3 = cast(value=$78binary_subscr.2)
DEBUG:numba.core.ssa:on stmt: return $80return_value.3
DEBUG:numba.core.ssa:==== SSA block analysis pass on 75
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$18compare_op.2': [<numba.core.ir.Assign object at 0x7faa246dba30>],
             '$20pred': [<numba.core.ir.Assign object at 0x7faa246db100>],
             '$26compare_op.2': [<numba.core.ir.Assign object at 0x7faa2442f6d0>],
             '$28pred': [<numba.core.ir.Assign object at 0x7fa9e0392100>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7faa243aa550>],
             '$38load_deref.3': [<numba.core.ir.Assign object at 0x7faa240cbfd0>],
             '$60load_deref.3': [<numba.core.ir.Assign object at 0x7faa1c3c0130>],
             '$78binary_subscr.2': [<numba.core.ir.Assign object at 0x7fa9e04992e0>],
             '$80return_value.3': [<numba.core.ir.Assign object at 0x7fa9e0499280>],
             '$const32.1': [<numba.core.ir.Assign object at 0x7fa9e0392f10>],
             '$const54.1': [<numba.core.ir.Assign object at 0x7faa1c6ee6a0>],
             'arry': [<numba.core.ir.Assign object at 0x7faa24603be0>],
             'bool20': [<numba.core.ir.Assign object at 0x7faa246dbaf0>],
             'bool28': [<numba.core.ir.Assign object at 0x7fa9e0392130>],
             'high': [<numba.core.ir.Assign object at 0x7faa243aabb0>,
                      <numba.core.ir.Assign object at 0x7faa1c3c0520>],
             'i': [<numba.core.ir.Assign object at 0x7faa245fba60>,
                   <numba.core.ir.Assign object at 0x7faa1c409d60>,
                   <numba.core.ir.Assign object at 0x7fa9e0392a00>],
             'k': [<numba.core.ir.Assign object at 0x7faa246039a0>],
             'low': [<numba.core.ir.Assign object at 0x7fa9c41b9130>,
                     <numba.core.ir.Assign object at 0x7fa9c420adf0>]})
DEBUG:numba.core.ssa:SSA violators {'high', 'low', 'i'}
DEBUG:numba.core.ssa:Fix SSA violator on var high
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:first assign: high
DEBUG:numba.core.ssa:replaced with: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: $18compare_op.2 = i != k
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, arraymath.py:1200),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 22, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: $26compare_op.2 = i < k
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, arraymath.py:1201),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 52
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: $const32.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low = i + $const32.1
DEBUG:numba.core.ssa:on stmt: $38load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $38load_deref.3(arry, low, high, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 52
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: $const54.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high = i - $const54.1
DEBUG:numba.core.ssa:replaced with: high.1 = i - $const54.1
DEBUG:numba.core.ssa:on stmt: $60load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $60load_deref.3(arry, low, high, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: $78binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $80return_value.3 = cast(value=$78binary_subscr.2)
DEBUG:numba.core.ssa:on stmt: return $80return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 75
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243af8b0>
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa9e0499610>],
             52: [<numba.core.ir.Assign object at 0x7faa240e4250>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e06793a0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='high' stmt=i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e06793a0>
DEBUG:numba.core.ssa:on stmt: $18compare_op.2 = i != k
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, arraymath.py:1200),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 22, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e06793a0>
DEBUG:numba.core.ssa:on stmt: $26compare_op.2 = i < k
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, arraymath.py:1201),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 52
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e06793a0>
DEBUG:numba.core.ssa:on stmt: $const32.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low = i + $const32.1
DEBUG:numba.core.ssa:on stmt: $38load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $38load_deref.3(arry, low, high, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='high' stmt=i = call $38load_deref.3(arry, low, high, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def_from_top label 30
DEBUG:numba.core.ssa:idom 22 from label 30
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 14 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:insert phi node high.2 = phi(incoming_values=[], incoming_blocks=[]) at 14
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def high = arg(3, name=high)
DEBUG:numba.core.ssa:find_def_from_bottom label 75
DEBUG:numba.core.ssa:find_def_from_top label 75
DEBUG:numba.core.ssa:insert phi node high.3 = phi(incoming_values=[], incoming_blocks=[]) at 75
DEBUG:numba.core.ssa:find_def_from_bottom label 52
DEBUG:numba.core.ssa:incoming_def high.1 = i - $const54.1
DEBUG:numba.core.ssa:find_def_from_bottom label 30
DEBUG:numba.core.ssa:find_def_from_top label 30
DEBUG:numba.core.ssa:idom 22 from label 30
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 14 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:incoming_def high.2 = phi(incoming_values=[Var(high, arraymath.py:1199)], incoming_blocks=[0])
DEBUG:numba.core.ssa:incoming_def high.3 = phi(incoming_values=[Var(high.1, arraymath.py:1205), Var(high.2, arraymath.py:1202)], incoming_blocks=[52, 30])
DEBUG:numba.core.ssa:replaced with: i = call $38load_deref.3(arry, low, high.2, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high.2, arraymath.py:1202)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 52
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e06793a0>
DEBUG:numba.core.ssa:on stmt: $const54.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high.1 = i - $const54.1
DEBUG:numba.core.ssa:on stmt: $60load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $60load_deref.3(arry, low, high, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='high' stmt=i = call $60load_deref.3(arry, low, high, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:replaced with: i = call $60load_deref.3(arry, low, high.1, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high.1, arraymath.py:1205)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e06793a0>
DEBUG:numba.core.ssa:on stmt: $78binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $80return_value.3 = cast(value=$78binary_subscr.2)
DEBUG:numba.core.ssa:on stmt: return $80return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 75
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e06793a0>
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:Fix SSA violator on var low
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240d65b0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:first assign: low
DEBUG:numba.core.ssa:replaced with: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240d65b0>
DEBUG:numba.core.ssa:on stmt: high.2 = phi(incoming_values=[Var(high, arraymath.py:1199), Var(high.3, arraymath.py:1202)], incoming_blocks=[0, 75])
DEBUG:numba.core.ssa:on stmt: $18compare_op.2 = i != k
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, arraymath.py:1200),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 22, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240d65b0>
DEBUG:numba.core.ssa:on stmt: $26compare_op.2 = i < k
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, arraymath.py:1201),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 52
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240d65b0>
DEBUG:numba.core.ssa:on stmt: $const32.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low = i + $const32.1
DEBUG:numba.core.ssa:replaced with: low.1 = i + $const32.1
DEBUG:numba.core.ssa:on stmt: $38load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $38load_deref.3(arry, low, high.2, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high.2, arraymath.py:1202)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 52
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240d65b0>
DEBUG:numba.core.ssa:on stmt: $const54.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high.1 = i - $const54.1
DEBUG:numba.core.ssa:on stmt: $60load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $60load_deref.3(arry, low, high.1, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high.1, arraymath.py:1205)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240d65b0>
DEBUG:numba.core.ssa:on stmt: $78binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $80return_value.3 = cast(value=$78binary_subscr.2)
DEBUG:numba.core.ssa:on stmt: return $80return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 75
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa240d65b0>
DEBUG:numba.core.ssa:on stmt: high.3 = phi(incoming_values=[Var(high.1, arraymath.py:1205), Var(high.2, arraymath.py:1202)], incoming_blocks=[52, 30])
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa9e0499a90>],
             30: [<numba.core.ir.Assign object at 0x7fa9e0679820>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679d30>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='low' stmt=i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679d30>
DEBUG:numba.core.ssa:on stmt: high.2 = phi(incoming_values=[Var(high, arraymath.py:1199), Var(high.3, arraymath.py:1202)], incoming_blocks=[0, 75])
DEBUG:numba.core.ssa:on stmt: $18compare_op.2 = i != k
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, arraymath.py:1200),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 22, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679d30>
DEBUG:numba.core.ssa:on stmt: $26compare_op.2 = i < k
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, arraymath.py:1201),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 52
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679d30>
DEBUG:numba.core.ssa:on stmt: $const32.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low.1 = i + $const32.1
DEBUG:numba.core.ssa:on stmt: $38load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $38load_deref.3(arry, low, high.2, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high.2, arraymath.py:1202)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='low' stmt=i = call $38load_deref.3(arry, low, high.2, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high.2, arraymath.py:1202)], kws=(), vararg=None)
DEBUG:numba.core.ssa:replaced with: i = call $38load_deref.3(arry, low.1, high.2, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low.1, arraymath.py:1202), Var(high.2, arraymath.py:1202)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 52
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679d30>
DEBUG:numba.core.ssa:on stmt: $const54.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high.1 = i - $const54.1
DEBUG:numba.core.ssa:on stmt: $60load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $60load_deref.3(arry, low, high.1, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high.1, arraymath.py:1205)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='low' stmt=i = call $60load_deref.3(arry, low, high.1, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high.1, arraymath.py:1205)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def_from_top label 52
DEBUG:numba.core.ssa:idom 22 from label 52
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 14 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:insert phi node low.2 = phi(incoming_values=[], incoming_blocks=[]) at 14
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def low = arg(2, name=low)
DEBUG:numba.core.ssa:find_def_from_bottom label 75
DEBUG:numba.core.ssa:find_def_from_top label 75
DEBUG:numba.core.ssa:insert phi node low.3 = phi(incoming_values=[], incoming_blocks=[]) at 75
DEBUG:numba.core.ssa:find_def_from_bottom label 52
DEBUG:numba.core.ssa:find_def_from_top label 52
DEBUG:numba.core.ssa:idom 22 from label 52
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 14 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:incoming_def low.2 = phi(incoming_values=[Var(low, arraymath.py:1199)], incoming_blocks=[0])
DEBUG:numba.core.ssa:find_def_from_bottom label 30
DEBUG:numba.core.ssa:incoming_def low.1 = i + $const32.1
DEBUG:numba.core.ssa:incoming_def low.3 = phi(incoming_values=[Var(low.2, arraymath.py:1205), Var(low.1, arraymath.py:1202)], incoming_blocks=[52, 30])
DEBUG:numba.core.ssa:replaced with: i = call $60load_deref.3(arry, low.2, high.1, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low.2, arraymath.py:1205), Var(high.1, arraymath.py:1205)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679d30>
DEBUG:numba.core.ssa:on stmt: $78binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $80return_value.3 = cast(value=$78binary_subscr.2)
DEBUG:numba.core.ssa:on stmt: return $80return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 75
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679d30>
DEBUG:numba.core.ssa:on stmt: high.3 = phi(incoming_values=[Var(high.1, arraymath.py:1205), Var(high.2, arraymath.py:1202)], incoming_blocks=[52, 30])
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:Fix SSA violator on var i
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa2442fa60>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:first assign: i
DEBUG:numba.core.ssa:replaced with: i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa2442fa60>
DEBUG:numba.core.ssa:on stmt: low.2 = phi(incoming_values=[Var(low, arraymath.py:1199), Var(low.3, arraymath.py:1205)], incoming_blocks=[0, 75])
DEBUG:numba.core.ssa:on stmt: high.2 = phi(incoming_values=[Var(high, arraymath.py:1199), Var(high.3, arraymath.py:1202)], incoming_blocks=[0, 75])
DEBUG:numba.core.ssa:on stmt: $18compare_op.2 = i != k
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, arraymath.py:1200),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 22, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa2442fa60>
DEBUG:numba.core.ssa:on stmt: $26compare_op.2 = i < k
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, arraymath.py:1201),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 52
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa2442fa60>
DEBUG:numba.core.ssa:on stmt: $const32.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low.1 = i + $const32.1
DEBUG:numba.core.ssa:on stmt: $38load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $38load_deref.3(arry, low.1, high.2, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low.1, arraymath.py:1202), Var(high.2, arraymath.py:1202)], kws=(), vararg=None)
DEBUG:numba.core.ssa:replaced with: i.1 = call $38load_deref.3(arry, low.1, high.2, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low.1, arraymath.py:1202), Var(high.2, arraymath.py:1202)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 52
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa2442fa60>
DEBUG:numba.core.ssa:on stmt: $const54.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high.1 = i - $const54.1
DEBUG:numba.core.ssa:on stmt: $60load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $60load_deref.3(arry, low.2, high.1, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low.2, arraymath.py:1205), Var(high.1, arraymath.py:1205)], kws=(), vararg=None)
DEBUG:numba.core.ssa:replaced with: i.2 = call $60load_deref.3(arry, low.2, high.1, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low.2, arraymath.py:1205), Var(high.1, arraymath.py:1205)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa2442fa60>
DEBUG:numba.core.ssa:on stmt: $78binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $80return_value.3 = cast(value=$78binary_subscr.2)
DEBUG:numba.core.ssa:on stmt: return $80return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 75
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa2442fa60>
DEBUG:numba.core.ssa:on stmt: low.3 = phi(incoming_values=[Var(low.2, arraymath.py:1205), Var(low.1, arraymath.py:1202)], incoming_blocks=[52, 30])
DEBUG:numba.core.ssa:on stmt: high.3 = phi(incoming_values=[Var(high.1, arraymath.py:1205), Var(high.2, arraymath.py:1202)], incoming_blocks=[52, 30])
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa9e0499d60>],
             30: [<numba.core.ir.Assign object at 0x7fa9e0679c40>],
             52: [<numba.core.ir.Assign object at 0x7fa9c4348100>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679940>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: k = arg(1, name=k)
DEBUG:numba.core.ssa:on stmt: low = arg(2, name=low)
DEBUG:numba.core.ssa:on stmt: high = arg(3, name=high)
DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679940>
DEBUG:numba.core.ssa:on stmt: low.2 = phi(incoming_values=[Var(low, arraymath.py:1199), Var(low.3, arraymath.py:1205)], incoming_blocks=[0, 75])
DEBUG:numba.core.ssa:on stmt: high.2 = phi(incoming_values=[Var(high, arraymath.py:1199), Var(high.3, arraymath.py:1202)], incoming_blocks=[0, 75])
DEBUG:numba.core.ssa:on stmt: $18compare_op.2 = i != k
DEBUG:numba.core.ssa:find_def var='i' stmt=$18compare_op.2 = i != k
DEBUG:numba.core.ssa:find_def_from_top label 14
DEBUG:numba.core.ssa:insert phi node i.3 = phi(incoming_values=[], incoming_blocks=[]) at 14
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def i = call $2load_deref.0(arry, low, high, func=$2load_deref.0, args=[Var(arry, arraymath.py:1199), Var(low, arraymath.py:1199), Var(high, arraymath.py:1199)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def_from_bottom label 75
DEBUG:numba.core.ssa:find_def_from_top label 75
DEBUG:numba.core.ssa:insert phi node i.4 = phi(incoming_values=[], incoming_blocks=[]) at 75
DEBUG:numba.core.ssa:find_def_from_bottom label 52
DEBUG:numba.core.ssa:incoming_def i.2 = call $60load_deref.3(arry, low.2, high.1, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low.2, arraymath.py:1205), Var(high.1, arraymath.py:1205)], kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def_from_bottom label 30
DEBUG:numba.core.ssa:incoming_def i.1 = call $38load_deref.3(arry, low.1, high.2, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low.1, arraymath.py:1202), Var(high.2, arraymath.py:1202)], kws=(), vararg=None)
DEBUG:numba.core.ssa:incoming_def i.4 = phi(incoming_values=[Var(i.2, arraymath.py:1206), Var(i.1, arraymath.py:1203)], incoming_blocks=[52, 30])
DEBUG:numba.core.ssa:replaced with: $18compare_op.2 = i.3 != k
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20($18compare_op.2, func=bool20, args=(Var($18compare_op.2, arraymath.py:1200),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 22, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679940>
DEBUG:numba.core.ssa:on stmt: $26compare_op.2 = i < k
DEBUG:numba.core.ssa:find_def var='i' stmt=$26compare_op.2 = i < k
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 14 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:replaced with: $26compare_op.2 = i.3 < k
DEBUG:numba.core.ssa:on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, arraymath.py:1201),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $28pred, 30, 52
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 30
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679940>
DEBUG:numba.core.ssa:on stmt: $const32.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: low.1 = i + $const32.1
DEBUG:numba.core.ssa:find_def var='i' stmt=low.1 = i + $const32.1
DEBUG:numba.core.ssa:find_def_from_top label 30
DEBUG:numba.core.ssa:idom 22 from label 30
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 14 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:replaced with: low.1 = i.3 + $const32.1
DEBUG:numba.core.ssa:on stmt: $38load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i.1 = call $38load_deref.3(arry, low.1, high.2, func=$38load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low.1, arraymath.py:1202), Var(high.2, arraymath.py:1202)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 52
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679940>
DEBUG:numba.core.ssa:on stmt: $const54.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: high.1 = i - $const54.1
DEBUG:numba.core.ssa:find_def var='i' stmt=high.1 = i - $const54.1
DEBUG:numba.core.ssa:find_def_from_top label 52
DEBUG:numba.core.ssa:idom 22 from label 52
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:idom 14 from label 22
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:replaced with: high.1 = i.3 - $const54.1
DEBUG:numba.core.ssa:on stmt: $60load_deref.3 = freevar(partitionimpl: <function _partition_factory.<locals>._partition at 0x7faa400fd9d0>)
DEBUG:numba.core.ssa:on stmt: i.2 = call $60load_deref.3(arry, low.2, high.1, func=$60load_deref.3, args=[Var(arry, arraymath.py:1199), Var(low.2, arraymath.py:1205), Var(high.1, arraymath.py:1205)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: jump 75
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679940>
DEBUG:numba.core.ssa:on stmt: $78binary_subscr.2 = getitem(value=arry, index=k, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $80return_value.3 = cast(value=$78binary_subscr.2)
DEBUG:numba.core.ssa:on stmt: return $80return_value.3
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 75
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e0679940>
DEBUG:numba.core.ssa:on stmt: low.3 = phi(incoming_values=[Var(low.2, arraymath.py:1205), Var(low.1, arraymath.py:1202)], incoming_blocks=[52, 30])
DEBUG:numba.core.ssa:on stmt: high.3 = phi(incoming_values=[Var(high.1, arraymath.py:1205), Var(high.2, arraymath.py:1202)], incoming_blocks=[52, 30])
DEBUG:numba.core.ssa:on stmt: jump 14
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1770)
           2	LOAD_FAST(arg=0, lineno=1770)
           4	LOAD_METHOD(arg=0, lineno=1770)
           6	CALL_METHOD(arg=0, lineno=1770)
           8	LOAD_METHOD(arg=1, lineno=1770)
          10	LOAD_FAST(arg=0, lineno=1770)
          12	LOAD_ATTR(arg=2, lineno=1770)
          14	CALL_METHOD(arg=1, lineno=1770)
          16	RETURN_VALUE(arg=None, lineno=1770)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1770)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1770)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1770)
DEBUG:numba.core.byteflow:stack ['$ary2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=1770)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=1770)
DEBUG:numba.core.byteflow:stack ['$6call_method.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=1770)
DEBUG:numba.core.byteflow:stack ['$8load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=1770)
DEBUG:numba.core.byteflow:stack ['$8load_method.3', '$ary10.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=1770)
DEBUG:numba.core.byteflow:stack ['$8load_method.3', '$12load_attr.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=1770)
DEBUG:numba.core.byteflow:stack ['$14call_method.6']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'item': '$6call_method.2', 'res': '$8load_method.3'}), (10, {'res': '$ary10.4'}), (12, {'item': '$ary10.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'retval': '$14call_method.6', 'castval': '$16return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=copy) ['$4load_method.1', 'ary']
    $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None) ['$4load_method.1', '$6call_method.2']
    $8load_method.3 = getattr(value=$6call_method.2, attr=reshape) ['$6call_method.2', '$8load_method.3']
    $12load_attr.5 = getattr(value=ary, attr=size) ['$12load_attr.5', 'ary']
    $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1770)], kws=(), vararg=None) ['$12load_attr.5', '$14call_method.6', '$8load_method.3']
    $16return_value.7 = cast(value=$14call_method.6) ['$14call_method.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa240e4e50>
DEBUG:numba.core.ssa:on stmt: ary = arg(0, name=ary)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=ary, attr=copy)
DEBUG:numba.core.ssa:on stmt: $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $8load_method.3 = getattr(value=$6call_method.2, attr=reshape)
DEBUG:numba.core.ssa:on stmt: $12load_attr.5 = getattr(value=ary, attr=size)
DEBUG:numba.core.ssa:on stmt: $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1770)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16return_value.7 = cast(value=$14call_method.6)
DEBUG:numba.core.ssa:on stmt: return $16return_value.7
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7fa9e067a6a0>],
             '$14call_method.6': [<numba.core.ir.Assign object at 0x7fa9e067a7f0>],
             '$16return_value.7': [<numba.core.ir.Assign object at 0x7fa9e067a460>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa9e067a6d0>],
             '$6call_method.2': [<numba.core.ir.Assign object at 0x7fa9e067abb0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fa9e067aa60>],
             'ary': [<numba.core.ir.Assign object at 0x7faa1c3c9af0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1602)
           2	LOAD_CONST(arg=1, lineno=1602)
           4	STORE_FAST(arg=2, lineno=1602)
           6	LOAD_CONST(arg=2, lineno=1603)
           8	STORE_FAST(arg=3, lineno=1603)
          10	LOAD_GLOBAL(arg=0, lineno=1604)
          12	LOAD_FAST(arg=1, lineno=1604)
          14	CALL_FUNCTION(arg=1, lineno=1604)
          16	GET_ITER(arg=None, lineno=1604)
>         18	FOR_ITER(arg=38, lineno=1604)
          20	UNPACK_SEQUENCE(arg=2, lineno=1604)
          22	STORE_FAST(arg=4, lineno=1604)
          24	STORE_FAST(arg=5, lineno=1604)
          26	LOAD_FAST(arg=5, lineno=1605)
          28	LOAD_CONST(arg=1, lineno=1605)
          30	COMPARE_OP(arg=0, lineno=1605)
          32	POP_JUMP_IF_FALSE(arg=48, lineno=1605)
          34	LOAD_FAST(arg=2, lineno=1606)
          36	LOAD_CONST(arg=2, lineno=1606)
          38	INPLACE_ADD(arg=None, lineno=1606)
          40	STORE_FAST(arg=2, lineno=1606)
          42	LOAD_FAST(arg=4, lineno=1607)
          44	STORE_FAST(arg=6, lineno=1607)
          46	JUMP_ABSOLUTE(arg=18, lineno=1607)
>         48	LOAD_FAST(arg=3, lineno=1609)
          50	LOAD_FAST(arg=5, lineno=1609)
          52	INPLACE_MULTIPLY(arg=None, lineno=1609)
          54	STORE_FAST(arg=3, lineno=1609)
          56	JUMP_ABSOLUTE(arg=18, lineno=1609)
>         58	LOAD_FAST(arg=2, lineno=1611)
          60	LOAD_CONST(arg=1, lineno=1611)
          62	COMPARE_OP(arg=2, lineno=1611)
          64	POP_JUMP_IF_FALSE(arg=84, lineno=1611)
          66	LOAD_FAST(arg=0, lineno=1612)
          68	LOAD_FAST(arg=3, lineno=1612)
          70	COMPARE_OP(arg=3, lineno=1612)
          72	POP_JUMP_IF_FALSE(arg=164, lineno=1612)
          74	LOAD_GLOBAL(arg=1, lineno=1613)
          76	LOAD_CONST(arg=3, lineno=1613)
          78	CALL_FUNCTION(arg=1, lineno=1613)
          80	RAISE_VARARGS(arg=1, lineno=1613)
          82	JUMP_FORWARD(arg=80, lineno=1613)
>         84	LOAD_FAST(arg=2, lineno=1615)
          86	LOAD_CONST(arg=2, lineno=1615)
          88	COMPARE_OP(arg=2, lineno=1615)
          90	POP_JUMP_IF_FALSE(arg=156, lineno=1615)
          92	LOAD_FAST(arg=3, lineno=1617)
          94	LOAD_CONST(arg=1, lineno=1617)
          96	COMPARE_OP(arg=2, lineno=1617)
          98	POP_JUMP_IF_FALSE(arg=114, lineno=1617)
         100	LOAD_CONST(arg=1, lineno=1618)
         102	STORE_FAST(arg=7, lineno=1618)
         104	LOAD_FAST(arg=0, lineno=1619)
         106	LOAD_CONST(arg=1, lineno=1619)
         108	COMPARE_OP(arg=2, lineno=1619)
         110	STORE_FAST(arg=8, lineno=1619)
         112	JUMP_FORWARD(arg=20, lineno=1619)
>        114	LOAD_FAST(arg=0, lineno=1621)
         116	LOAD_FAST(arg=3, lineno=1621)
         118	BINARY_FLOOR_DIVIDE(arg=None, lineno=1621)
         120	STORE_FAST(arg=7, lineno=1621)
         122	LOAD_FAST(arg=0, lineno=1622)
         124	LOAD_FAST(arg=3, lineno=1622)
         126	BINARY_MODULO(arg=None, lineno=1622)
         128	LOAD_CONST(arg=1, lineno=1622)
         130	COMPARE_OP(arg=2, lineno=1622)
         132	STORE_FAST(arg=8, lineno=1622)
>        134	LOAD_FAST(arg=8, lineno=1623)
         136	POP_JUMP_IF_TRUE(arg=146, lineno=1623)
         138	LOAD_GLOBAL(arg=1, lineno=1624)
         140	LOAD_CONST(arg=3, lineno=1624)
         142	CALL_FUNCTION(arg=1, lineno=1624)
         144	RAISE_VARARGS(arg=1, lineno=1624)
>        146	LOAD_FAST(arg=7, lineno=1625)
         148	LOAD_FAST(arg=1, lineno=1625)
         150	LOAD_FAST(arg=6, lineno=1625)
         152	STORE_SUBSCR(arg=None, lineno=1625)
         154	JUMP_FORWARD(arg=8, lineno=1625)
>        156	LOAD_GLOBAL(arg=1, lineno=1628)
         158	LOAD_CONST(arg=4, lineno=1628)
         160	CALL_FUNCTION(arg=1, lineno=1628)
         162	RAISE_VARARGS(arg=1, lineno=1628)
>        164	LOAD_CONST(arg=0, lineno=1628)
         166	RETURN_VALUE(arg=None, lineno=1628)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1602)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1602)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1602)
DEBUG:numba.core.byteflow:stack ['$const2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1603)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1603)
DEBUG:numba.core.byteflow:stack ['$const6.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=1604)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=1604)
DEBUG:numba.core.byteflow:stack ['$10load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=1604)
DEBUG:numba.core.byteflow:stack ['$10load_global.2', '$shape12.3']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=GET_ITER(arg=None, lineno=1604)
DEBUG:numba.core.byteflow:stack ['$14call_function.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=18, stack=('$16get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi18.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=FOR_ITER(arg=38, lineno=1604)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=1611)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=1611)
DEBUG:numba.core.byteflow:stack ['$num_neg_value58.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=COMPARE_OP(arg=2, lineno=1611)
DEBUG:numba.core.byteflow:stack ['$num_neg_value58.0', '$const60.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=84, lineno=1611)
DEBUG:numba.core.byteflow:stack ['$62compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=66 nstack_initial=0), State(pc_initial=84 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi20.0', '$phi20.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=UNPACK_SEQUENCE(arg=2, lineno=1604)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$phi20.1']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=STORE_FAST(arg=4, lineno=1604)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$20unpack_sequence.3', '$20unpack_sequence.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=5, lineno=1604)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$20unpack_sequence.3']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=5, lineno=1605)
DEBUG:numba.core.byteflow:stack ['$phi20.0']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=1605)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$s26.5']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=1605)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$s26.5', '$const28.6']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=48, lineno=1605)
DEBUG:numba.core.byteflow:stack ['$phi20.0', '$30compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=48, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=1612)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=1612)
DEBUG:numba.core.byteflow:stack ['$origsize66.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=1612)
DEBUG:numba.core.byteflow:stack ['$origsize66.0', '$known_size68.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=164, lineno=1612)
DEBUG:numba.core.byteflow:stack ['$70compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=164, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=2, lineno=1615)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_CONST(arg=2, lineno=1615)
DEBUG:numba.core.byteflow:stack ['$num_neg_value84.0']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=COMPARE_OP(arg=2, lineno=1615)
DEBUG:numba.core.byteflow:stack ['$num_neg_value84.0', '$const86.1']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=156, lineno=1615)
DEBUG:numba.core.byteflow:stack ['$88compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=156, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi34.0']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=1606)
DEBUG:numba.core.byteflow:stack ['$phi34.0']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=1606)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$num_neg_value34.1']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=INPLACE_ADD(arg=None, lineno=1606)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$num_neg_value34.1', '$const36.2']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=STORE_FAST(arg=2, lineno=1606)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$38inplace_add.3']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=4, lineno=1607)
DEBUG:numba.core.byteflow:stack ['$phi34.0']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=STORE_FAST(arg=6, lineno=1607)
DEBUG:numba.core.byteflow:stack ['$phi34.0', '$ax42.4']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=JUMP_ABSOLUTE(arg=18, lineno=1607)
DEBUG:numba.core.byteflow:stack ['$phi34.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=18, stack=('$phi34.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi48.0']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=1609)
DEBUG:numba.core.byteflow:stack ['$phi48.0']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=1609)
DEBUG:numba.core.byteflow:stack ['$phi48.0', '$known_size48.1']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=INPLACE_MULTIPLY(arg=None, lineno=1609)
DEBUG:numba.core.byteflow:stack ['$phi48.0', '$known_size48.1', '$s50.2']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=STORE_FAST(arg=3, lineno=1609)
DEBUG:numba.core.byteflow:stack ['$phi48.0', '$52inplace_multiply.3']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=JUMP_ABSOLUTE(arg=18, lineno=1609)
DEBUG:numba.core.byteflow:stack ['$phi48.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=18, stack=('$phi48.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_GLOBAL(arg=1, lineno=1613)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_CONST(arg=3, lineno=1613)
DEBUG:numba.core.byteflow:stack ['$74load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=CALL_FUNCTION(arg=1, lineno=1613)
DEBUG:numba.core.byteflow:stack ['$74load_global.0', '$const76.1']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=RAISE_VARARGS(arg=1, lineno=1613)
DEBUG:numba.core.byteflow:stack ['$78call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=164 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_CONST(arg=0, lineno=1628)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=166, inst=RETURN_VALUE(arg=None, lineno=1628)
DEBUG:numba.core.byteflow:stack ['$const164.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_FAST(arg=3, lineno=1617)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_CONST(arg=1, lineno=1617)
DEBUG:numba.core.byteflow:stack ['$known_size92.0']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=COMPARE_OP(arg=2, lineno=1617)
DEBUG:numba.core.byteflow:stack ['$known_size92.0', '$const94.1']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=POP_JUMP_IF_FALSE(arg=114, lineno=1617)
DEBUG:numba.core.byteflow:stack ['$96compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=100, stack=(), blockstack=(), npush=0), Edge(pc=114, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=156 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1), State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_GLOBAL(arg=1, lineno=1628)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=158, inst=LOAD_CONST(arg=4, lineno=1628)
DEBUG:numba.core.byteflow:stack ['$156load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=CALL_FUNCTION(arg=1, lineno=1628)
DEBUG:numba.core.byteflow:stack ['$156load_global.0', '$const158.1']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=RAISE_VARARGS(arg=1, lineno=1628)
DEBUG:numba.core.byteflow:stack ['$160call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1), State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=114 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1618)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=STORE_FAST(arg=7, lineno=1618)
DEBUG:numba.core.byteflow:stack ['$const100.0']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=1619)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_CONST(arg=1, lineno=1619)
DEBUG:numba.core.byteflow:stack ['$origsize104.1']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=COMPARE_OP(arg=2, lineno=1619)
DEBUG:numba.core.byteflow:stack ['$origsize104.1', '$const106.2']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=STORE_FAST(arg=8, lineno=1619)
DEBUG:numba.core.byteflow:stack ['$108compare_op.3']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=JUMP_FORWARD(arg=20, lineno=1619)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_FAST(arg=0, lineno=1621)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_FAST(arg=3, lineno=1621)
DEBUG:numba.core.byteflow:stack ['$origsize114.0']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1621)
DEBUG:numba.core.byteflow:stack ['$origsize114.0', '$known_size116.1']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=STORE_FAST(arg=7, lineno=1621)
DEBUG:numba.core.byteflow:stack ['$118binary_floor_divide.2']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1622)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=124, inst=LOAD_FAST(arg=3, lineno=1622)
DEBUG:numba.core.byteflow:stack ['$origsize122.3']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=BINARY_MODULO(arg=None, lineno=1622)
DEBUG:numba.core.byteflow:stack ['$origsize122.3', '$known_size124.4']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=LOAD_CONST(arg=1, lineno=1622)
DEBUG:numba.core.byteflow:stack ['$126binary_modulo.5']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=COMPARE_OP(arg=2, lineno=1622)
DEBUG:numba.core.byteflow:stack ['$126binary_modulo.5', '$const128.6']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=STORE_FAST(arg=8, lineno=1622)
DEBUG:numba.core.byteflow:stack ['$130compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=134, inst=LOAD_FAST(arg=8, lineno=1623)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=136, inst=POP_JUMP_IF_TRUE(arg=146, lineno=1623)
DEBUG:numba.core.byteflow:stack ['$ok134.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=146, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=138, inst=LOAD_GLOBAL(arg=1, lineno=1624)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_CONST(arg=3, lineno=1624)
DEBUG:numba.core.byteflow:stack ['$138load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=CALL_FUNCTION(arg=1, lineno=1624)
DEBUG:numba.core.byteflow:stack ['$138load_global.0', '$const140.1']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=RAISE_VARARGS(arg=1, lineno=1624)
DEBUG:numba.core.byteflow:stack ['$142call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=146 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_FAST(arg=7, lineno=1625)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=1, lineno=1625)
DEBUG:numba.core.byteflow:stack ['$inferred146.0']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=LOAD_FAST(arg=6, lineno=1625)
DEBUG:numba.core.byteflow:stack ['$inferred146.0', '$shape148.1']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=STORE_SUBSCR(arg=None, lineno=1625)
DEBUG:numba.core.byteflow:stack ['$inferred146.0', '$shape148.1', '$neg_ax150.2']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=JUMP_FORWARD(arg=8, lineno=1625)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=164, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=164 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=34 nstack_initial=1): set(),
             State(pc_initial=48 nstack_initial=1): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=156 nstack_initial=0): set(),
             State(pc_initial=164 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=1)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=1))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi48.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi18.0': {('$16get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.5'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'}), (10, {'res': '$10load_global.2'}), (12, {'res': '$shape12.3'}), (14, {'func': '$10load_global.2', 'args': ['$shape12.3'], 'res': '$14call_function.4'}), (16, {'value': '$14call_function.4', 'res': '$16get_iter.5'})), outgoing_phis={'$phi18.0': '$16get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'iterable': '$phi20.1', 'stores': ['$20unpack_sequence.2', '$20unpack_sequence.3'], 'tupleobj': '$20unpack_sequence.4'}), (22, {'value': '$20unpack_sequence.2'}), (24, {'value': '$20unpack_sequence.3'}), (26, {'res': '$s26.5'}), (28, {'res': '$const28.6'}), (30, {'lhs': '$s26.5', 'rhs': '$const28.6', 'res': '$30compare_op.7'}), (32, {'pred': '$30compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi20.0',), 48: ('$phi20.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=1):
AdaptBlockInfo(insts=((34, {'res': '$num_neg_value34.1'}), (36, {'res': '$const36.2'}), (38, {'lhs': '$num_neg_value34.1', 'rhs': '$const36.2', 'res': '$38inplace_add.3'}), (40, {'value': '$38inplace_add.3'}), (42, {'res': '$ax42.4'}), (44, {'value': '$ax42.4'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi34.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'res': '$known_size48.1'}), (50, {'res': '$s50.2'}), (52, {'lhs': '$known_size48.1', 'rhs': '$s50.2', 'res': '$52inplace_multiply.3'}), (54, {'value': '$52inplace_multiply.3'}), (56, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi48.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$num_neg_value58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$num_neg_value58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 84: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$origsize66.0'}), (68, {'res': '$known_size68.1'}), (70, {'lhs': '$origsize66.0', 'rhs': '$known_size68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 164: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$74load_global.0'}), (76, {'res': '$const76.1'}), (78, {'func': '$74load_global.0', 'args': ['$const76.1'], 'res': '$78call_function.2'}), (80, {'exc': '$78call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$num_neg_value84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$num_neg_value84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 156: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$known_size92.0'}), (94, {'res': '$const94.1'}), (96, {'lhs': '$known_size92.0', 'rhs': '$const94.1', 'res': '$96compare_op.2'}), (98, {'pred': '$96compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={100: (), 114: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=((100, {'res': '$const100.0'}), (102, {'value': '$const100.0'}), (104, {'res': '$origsize104.1'}), (106, {'res': '$const106.2'}), (108, {'lhs': '$origsize104.1', 'rhs': '$const106.2', 'res': '$108compare_op.3'}), (110, {'value': '$108compare_op.3'}), (112, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$origsize114.0'}), (116, {'res': '$known_size116.1'}), (118, {'lhs': '$origsize114.0', 'rhs': '$known_size116.1', 'res': '$118binary_floor_divide.2'}), (120, {'value': '$118binary_floor_divide.2'}), (122, {'res': '$origsize122.3'}), (124, {'res': '$known_size124.4'}), (126, {'lhs': '$origsize122.3', 'rhs': '$known_size124.4', 'res': '$126binary_modulo.5'}), (128, {'res': '$const128.6'}), (130, {'lhs': '$126binary_modulo.5', 'rhs': '$const128.6', 'res': '$130compare_op.7'}), (132, {'value': '$130compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$ok134.0'}), (136, {'pred': '$ok134.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 146: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$138load_global.0'}), (140, {'res': '$const140.1'}), (142, {'func': '$138load_global.0', 'args': ['$const140.1'], 'res': '$142call_function.2'}), (144, {'exc': '$142call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$inferred146.0'}), (148, {'res': '$shape148.1'}), (150, {'res': '$neg_ax150.2'}), (152, {'target': '$shape148.1', 'index': '$neg_ax150.2', 'value': '$inferred146.0'}), (154, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={164: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=156 nstack_initial=0):
AdaptBlockInfo(insts=((156, {'res': '$156load_global.0'}), (158, {'res': '$const158.1'}), (160, {'func': '$156load_global.0', 'args': ['$const158.1'], 'res': '$160call_function.2'}), (162, {'exc': '$160call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=164 nstack_initial=0):
AdaptBlockInfo(insts=((164, {'res': '$const164.0'}), (166, {'retval': '$const164.0', 'castval': '$166return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    $10load_global.2 = global(enumerate: <class 'enumerate'>) ['$10load_global.2']
    $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None) ['$10load_global.2', '$14call_function.4', 'shape']
    $16get_iter.5 = getiter(value=$14call_function.4) ['$14call_function.4', '$16get_iter.5']
    $phi18.0 = $16get_iter.5                 ['$16get_iter.5', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 58             ['$18for_iter.3']
label 20:
    $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2) ['$20unpack_sequence.4', '$phi20.1']
    $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.2', '$20unpack_sequence.4']
    $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.3', '$20unpack_sequence.4']
    ax = $20unpack_sequence.2                ['$20unpack_sequence.2', 'ax']
    s = $20unpack_sequence.3                 ['$20unpack_sequence.3', 's']
    $const28.6 = const(int, 0)               ['$const28.6']
    $30compare_op.7 = s < $const28.6         ['$30compare_op.7', '$const28.6', 's']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1605),), kws=(), vararg=None) ['$30compare_op.7', '$32pred', 'bool32']
    branch $32pred, 34, 48                   ['$32pred']
label 34:
    $const36.2 = const(int, 1)               ['$const36.2']
    $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined) ['$38inplace_add.3', '$const36.2', 'num_neg_value']
    num_neg_value = $38inplace_add.3         ['$38inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 18                                  []
label 48:
    $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$52inplace_multiply.3', 'known_size', 's']
    known_size = $52inplace_multiply.3       ['$52inplace_multiply.3', 'known_size']
    jump 18                                  []
label 58:
    $const60.1 = const(int, 0)               ['$const60.1']
    $62compare_op.2 = num_neg_value == $const60.1 ['$62compare_op.2', '$const60.1', 'num_neg_value']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1611),), kws=(), vararg=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 84                   ['$64pred']
label 66:
    $70compare_op.2 = origsize != known_size ['$70compare_op.2', 'known_size', 'origsize']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1612),), kws=(), vararg=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 164                  ['$72pred']
label 74:
    $74load_global.0 = global(ValueError: <class 'ValueError'>) ['$74load_global.0']
    $const76.1 = const(str, total size of new array must be unchanged) ['$const76.1']
    $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1613)], kws=(), vararg=None) ['$74load_global.0', '$78call_function.2', '$const76.1']
    raise $78call_function.2                 ['$78call_function.2']
label 84:
    $const86.1 = const(int, 1)               ['$const86.1']
    $88compare_op.2 = num_neg_value == $const86.1 ['$88compare_op.2', '$const86.1', 'num_neg_value']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1615),), kws=(), vararg=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 156                  ['$90pred']
label 92:
    $const94.1 = const(int, 0)               ['$const94.1']
    $96compare_op.2 = known_size == $const94.1 ['$96compare_op.2', '$const94.1', 'known_size']
    bool98 = global(bool: <class 'bool'>)    ['bool98']
    $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1617),), kws=(), vararg=None) ['$96compare_op.2', '$98pred', 'bool98']
    branch $98pred, 100, 114                 ['$98pred']
label 100:
    inferred = const(int, 0)                 ['inferred']
    $const106.2 = const(int, 0)              ['$const106.2']
    ok = origsize == $const106.2             ['$const106.2', 'ok', 'origsize']
    jump 134                                 []
label 114:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $126binary_modulo.5 = origsize % known_size ['$126binary_modulo.5', 'known_size', 'origsize']
    $const128.6 = const(int, 0)              ['$const128.6']
    ok = $126binary_modulo.5 == $const128.6  ['$126binary_modulo.5', '$const128.6', 'ok']
    jump 134                                 []
label 134:
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None) ['$136pred', 'bool136', 'ok']
    branch $136pred, 146, 138                ['$136pred']
label 138:
    $138load_global.0 = global(ValueError: <class 'ValueError'>) ['$138load_global.0']
    $const140.1 = const(str, total size of new array must be unchanged) ['$const140.1']
    $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1624)], kws=(), vararg=None) ['$138load_global.0', '$142call_function.2', '$const140.1']
    raise $142call_function.2                ['$142call_function.2']
label 146:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 164                                 []
label 156:
    $156load_global.0 = global(ValueError: <class 'ValueError'>) ['$156load_global.0']
    $const158.1 = const(str, multiple negative shape values) ['$const158.1']
    $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1628)], kws=(), vararg=None) ['$156load_global.0', '$160call_function.2', '$const158.1']
    raise $160call_function.2                ['$160call_function.2']
label 164:
    $const164.0 = const(NoneType, None)      ['$const164.0']
    $166return_value.1 = cast(value=$const164.0) ['$166return_value.1', '$const164.0']
    return $166return_value.1                ['$166return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block analysis pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block analysis pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1605),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block analysis pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1611),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1612),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1613)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1615),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block analysis pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1617),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block analysis pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block analysis pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block analysis pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block analysis pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1624)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block analysis pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1628)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa242c14f0>
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10load_global.2': [<numba.core.ir.Assign object at 0x7faa242c8730>],
             '$126binary_modulo.5': [<numba.core.ir.Assign object at 0x7fa9e06a3d60>],
             '$136pred': [<numba.core.ir.Assign object at 0x7fa9e069b340>],
             '$138load_global.0': [<numba.core.ir.Assign object at 0x7fa9e069b580>],
             '$142call_function.2': [<numba.core.ir.Assign object at 0x7fa9e069b8b0>],
             '$14call_function.4': [<numba.core.ir.Assign object at 0x7faa242c8a00>],
             '$156load_global.0': [<numba.core.ir.Assign object at 0x7fa9e069c040>],
             '$160call_function.2': [<numba.core.ir.Assign object at 0x7fa9e069c370>],
             '$166return_value.1': [<numba.core.ir.Assign object at 0x7fa9e069c7c0>],
             '$16get_iter.5': [<numba.core.ir.Assign object at 0x7faa242c8b50>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x7faa242c8df0>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x7faa242c8f10>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x7fa9e01ca070>],
             '$20unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fa9e01ca4c0>],
             '$20unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fa9e01ca5e0>],
             '$20unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fa9e01ca370>],
             '$30compare_op.7': [<numba.core.ir.Assign object at 0x7fa9e01cac10>],
             '$32pred': [<numba.core.ir.Assign object at 0x7fa9e01caeb0>],
             '$38inplace_add.3': [<numba.core.ir.Assign object at 0x7fa9e01b93d0>],
             '$52inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fa9e01b9b50>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x7fa9e01be130>],
             '$64pred': [<numba.core.ir.Assign object at 0x7fa9e01be3d0>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x7faa242d8910>],
             '$72pred': [<numba.core.ir.Assign object at 0x7fa9e01be700>],
             '$74load_global.0': [<numba.core.ir.Assign object at 0x7fa9e01be8e0>],
             '$78call_function.2': [<numba.core.ir.Assign object at 0x7fa9e01bec10>],
             '$88compare_op.2': [<numba.core.ir.Assign object at 0x7fa9e01c31c0>],
             '$90pred': [<numba.core.ir.Assign object at 0x7fa9e01c3460>],
             '$96compare_op.2': [<numba.core.ir.Assign object at 0x7fa9e01c3940>],
             '$98pred': [<numba.core.ir.Assign object at 0x7fa9e01c3be0>],
             '$const106.2': [<numba.core.ir.Assign object at 0x7fa9e06a3220>],
             '$const128.6': [<numba.core.ir.Assign object at 0x7fa9e06a3ee0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x7fa9e069b700>],
             '$const158.1': [<numba.core.ir.Assign object at 0x7fa9e069c1c0>],
             '$const164.0': [<numba.core.ir.Assign object at 0x7fa9e069c640>],
             '$const28.6': [<numba.core.ir.Assign object at 0x7fa9e01caa90>],
             '$const36.2': [<numba.core.ir.Assign object at 0x7fa9e01b9250>],
             '$const60.1': [<numba.core.ir.Assign object at 0x7fa9e01b9f70>],
             '$const76.1': [<numba.core.ir.Assign object at 0x7fa9e01bea60>],
             '$const86.1': [<numba.core.ir.Assign object at 0x7fa9e01c3040>],
             '$const94.1': [<numba.core.ir.Assign object at 0x7fa9e01c37c0>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x7faa242c8340>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7faa242c8d00>],
             'ax': [<numba.core.ir.Assign object at 0x7fa9e01ca6d0>],
             'bool136': [<numba.core.ir.Assign object at 0x7fa9e069b220>],
             'bool32': [<numba.core.ir.Assign object at 0x7fa9e01cad90>],
             'bool64': [<numba.core.ir.Assign object at 0x7fa9e01be2b0>],
             'bool72': [<numba.core.ir.Assign object at 0x7fa9e01be5e0>],
             'bool90': [<numba.core.ir.Assign object at 0x7fa9e01c3340>],
             'bool98': [<numba.core.ir.Assign object at 0x7fa9e01c3ac0>],
             'inferred': [<numba.core.ir.Assign object at 0x7fa9e01c3e20>,
                          <numba.core.ir.Assign object at 0x7fa9e06a38e0>],
             'known_size': [<numba.core.ir.Assign object at 0x7faa242c8490>,
                            <numba.core.ir.Assign object at 0x7fa9e01b9c10>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fa9e01b96d0>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7faa242c81f0>,
                               <numba.core.ir.Assign object at 0x7fa9e01b9490>],
             'ok': [<numba.core.ir.Assign object at 0x7fa9e06a33a0>,
                    <numba.core.ir.Assign object at 0x7fa9e069b0a0>],
             'origsize': [<numba.core.ir.Assign object at 0x7faa242c1b80>],
             's': [<numba.core.ir.Assign object at 0x7fa9e01ca7f0>],
             'shape': [<numba.core.ir.Assign object at 0x7faa242c8070>]})
DEBUG:numba.core.ssa:SSA violators {'ok', 'num_neg_value', 'known_size', 'inferred'}
DEBUG:numba.core.ssa:Fix SSA violator on var ok
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1605),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1611),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1612),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1613)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1615),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1617),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:first assign: ok
DEBUG:numba.core.ssa:replaced with: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:replaced with: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1624)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1628)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9d00>
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {100: [<numba.core.ir.Assign object at 0x7fa9e069ceb0>],
             114: [<numba.core.ir.Assign object at 0x7fa9e069cdc0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1605),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1611),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1612),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1613)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1615),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1617),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def var='ok' stmt=$136pred = call bool136(ok, func=bool136, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
DEBUG:numba.core.ssa:find_def_from_top label 134
DEBUG:numba.core.ssa:insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 134
DEBUG:numba.core.ssa:find_def_from_bottom label 114
DEBUG:numba.core.ssa:incoming_def ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:find_def_from_bottom label 100
DEBUG:numba.core.ssa:incoming_def ok = origsize == $const106.2
DEBUG:numba.core.ssa:replaced with: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1623),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1624)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1628)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Fix SSA violator on var num_neg_value
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:first assign: num_neg_value
DEBUG:numba.core.ssa:replaced with: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1605),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value = $38inplace_add.3
DEBUG:numba.core.ssa:replaced with: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1611),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1612),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1613)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1615),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1617),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1622), Var(ok, arrayobj.py:1619)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1623),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1624)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1628)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e01b9cd0>
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa9e01b9d00>],
             34: [<numba.core.ir.Assign object at 0x7fa9e069cd90>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1605),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='num_neg_value' stmt=$38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 20 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:find_def_from_top label 20
DEBUG:numba.core.ssa:idom 18 from label 20
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:find_def_from_top label 18
DEBUG:numba.core.ssa:insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:find_def_from_bottom label 165
DEBUG:numba.core.ssa:find_def_from_top label 165
DEBUG:numba.core.ssa:insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 165
DEBUG:numba.core.ssa:find_def_from_bottom label 48
DEBUG:numba.core.ssa:find_def_from_top label 48
DEBUG:numba.core.ssa:idom 20 from label 48
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:find_def_from_top label 20
DEBUG:numba.core.ssa:idom 18 from label 20
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:incoming_def num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1602)], incoming_blocks=[0])
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:incoming_def num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:replaced with: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value == $const60.1
DEBUG:numba.core.ssa:find_def var='num_neg_value' stmt=$62compare_op.2 = num_neg_value == $const60.1
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1611),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1612),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1613)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value == $const86.1
DEBUG:numba.core.ssa:find_def var='num_neg_value' stmt=$88compare_op.2 = num_neg_value == $const86.1
DEBUG:numba.core.ssa:find_def_from_top label 84
DEBUG:numba.core.ssa:idom 58 from label 84
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1615),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1617),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1622), Var(ok, arrayobj.py:1619)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1623),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1624)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1628)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa242c13d0>
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Fix SSA violator on var known_size
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:first assign: known_size
DEBUG:numba.core.ssa:replaced with: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1602), Var(num_neg_value.3, arrayobj.py:1606)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1605),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size = $52inplace_multiply.3
DEBUG:numba.core.ssa:replaced with: known_size.1 = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1611),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1612),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1613)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1615),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1617),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1622), Var(ok, arrayobj.py:1619)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1623),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1624)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1628)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e069ce20>
DEBUG:numba.core.ssa:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa9e069cd30>],
             48: [<numba.core.ir.Assign object at 0x7fa9e069cbe0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1602), Var(num_neg_value.3, arrayobj.py:1606)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1605),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='known_size' stmt=$52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 48
DEBUG:numba.core.ssa:idom 20 from label 48
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:find_def_from_top label 20
DEBUG:numba.core.ssa:idom 18 from label 20
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:find_def_from_top label 18
DEBUG:numba.core.ssa:insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def known_size = const(int, 1)
DEBUG:numba.core.ssa:find_def_from_bottom label 165
DEBUG:numba.core.ssa:find_def_from_top label 165
DEBUG:numba.core.ssa:insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 165
DEBUG:numba.core.ssa:find_def_from_bottom label 48
DEBUG:numba.core.ssa:incoming_def known_size.1 = $52inplace_multiply.3
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 20 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:find_def_from_top label 20
DEBUG:numba.core.ssa:idom 18 from label 20
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:incoming_def known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1603)], incoming_blocks=[0])
DEBUG:numba.core.ssa:incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:replaced with: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size.1 = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1611),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:find_def var='known_size' stmt=$70compare_op.2 = origsize != known_size
DEBUG:numba.core.ssa:find_def_from_top label 66
DEBUG:numba.core.ssa:idom 58 from label 66
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: $70compare_op.2 = origsize != known_size.2
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1612),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1613)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1615),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:find_def var='known_size' stmt=$96compare_op.2 = known_size == $const94.1
DEBUG:numba.core.ssa:find_def_from_top label 92
DEBUG:numba.core.ssa:idom 84 from label 92
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:find_def_from_top label 84
DEBUG:numba.core.ssa:idom 58 from label 84
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: $96compare_op.2 = known_size.2 == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1617),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size
DEBUG:numba.core.ssa:find_def var='known_size' stmt=inferred = origsize // known_size
DEBUG:numba.core.ssa:find_def_from_top label 114
DEBUG:numba.core.ssa:idom 92 from label 114
DEBUG:numba.core.ssa:find_def_from_bottom label 92
DEBUG:numba.core.ssa:find_def_from_top label 92
DEBUG:numba.core.ssa:idom 84 from label 92
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:find_def_from_top label 84
DEBUG:numba.core.ssa:idom 58 from label 84
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: inferred = origsize // known_size.2
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:find_def var='known_size' stmt=$126binary_modulo.5 = origsize % known_size
DEBUG:numba.core.ssa:find_def_from_top label 114
DEBUG:numba.core.ssa:idom 92 from label 114
DEBUG:numba.core.ssa:find_def_from_bottom label 92
DEBUG:numba.core.ssa:find_def_from_top label 92
DEBUG:numba.core.ssa:idom 84 from label 92
DEBUG:numba.core.ssa:find_def_from_bottom label 84
DEBUG:numba.core.ssa:find_def_from_top label 84
DEBUG:numba.core.ssa:idom 58 from label 84
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 18 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:replaced with: $126binary_modulo.5 = origsize % known_size.2
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1622), Var(ok, arrayobj.py:1619)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1623),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1624)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1628)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069ee20>
DEBUG:numba.core.ssa:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Fix SSA violator on var inferred
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1603), Var(known_size.3, arrayobj.py:1609)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1602), Var(num_neg_value.3, arrayobj.py:1606)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1605),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size.1 = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1611),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size.2
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1612),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1613)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1615),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size.2 == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1617),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:first assign: inferred
DEBUG:numba.core.ssa:replaced with: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: inferred = origsize // known_size.2
DEBUG:numba.core.ssa:replaced with: inferred.1 = origsize // known_size.2
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size.2
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1622), Var(ok, arrayobj.py:1619)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1623),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1624)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1628)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa242c1550>
DEBUG:numba.core.ssa:on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {100: [<numba.core.ir.Assign object at 0x7fa9e069cb50>],
             114: [<numba.core.ir.Assign object at 0x7fa9e069eca0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: origsize = arg(0, name=origsize)
DEBUG:numba.core.ssa:on stmt: shape = arg(1, name=shape)
DEBUG:numba.core.ssa:on stmt: num_neg_value = const(int, 0)
DEBUG:numba.core.ssa:on stmt: known_size = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
DEBUG:numba.core.ssa:on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
DEBUG:numba.core.ssa:on stmt: $phi18.0 = $16get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1603), Var(known_size.3, arrayobj.py:1609)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1602), Var(num_neg_value.3, arrayobj.py:1606)], incoming_blocks=[0, 165])
DEBUG:numba.core.ssa:on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG:numba.core.ssa:on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi20.1 = $18for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $18for_iter.3, 20, 58
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: ax = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: s = $20unpack_sequence.3
DEBUG:numba.core.ssa:on stmt: $const28.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $30compare_op.7 = s < $const28.6
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:1605),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 48
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $const36.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: num_neg_value.1 = $38inplace_add.3
DEBUG:numba.core.ssa:on stmt: neg_ax = ax
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: known_size.1 = $52inplace_multiply.3
DEBUG:numba.core.ssa:on stmt: jump 165
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $const60.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:1611),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = origsize != known_size.2
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:1612),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:1613)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $const86.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $88compare_op.2 = num_neg_value.2 == $const86.1
DEBUG:numba.core.ssa:on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, arrayobj.py:1615),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $90pred, 92, 156
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 92
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $const94.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $96compare_op.2 = known_size.2 == $const94.1
DEBUG:numba.core.ssa:on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, arrayobj.py:1617),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $98pred, 100, 114
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 100
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: inferred = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $const106.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok = origsize == $const106.2
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: inferred.1 = origsize // known_size.2
DEBUG:numba.core.ssa:on stmt: $126binary_modulo.5 = origsize % known_size.2
DEBUG:numba.core.ssa:on stmt: $const128.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: ok.1 = $126binary_modulo.5 == $const128.6
DEBUG:numba.core.ssa:on stmt: jump 134
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1622), Var(ok, arrayobj.py:1619)], incoming_blocks=[114, 100])
DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $136pred = call bool136(ok.2, func=bool136, args=(Var(ok.2, arrayobj.py:1623),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $136pred, 146, 138
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $138load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const140.1 = const(str, total size of new array must be unchanged)
DEBUG:numba.core.ssa:on stmt: $142call_function.2 = call $138load_global.0($const140.1, func=$138load_global.0, args=[Var($const140.1, arrayobj.py:1624)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: shape[neg_ax] = inferred
DEBUG:numba.core.ssa:find_def var='inferred' stmt=shape[neg_ax] = inferred
DEBUG:numba.core.ssa:find_def_from_top label 146
DEBUG:numba.core.ssa:idom 134 from label 146
DEBUG:numba.core.ssa:find_def_from_bottom label 134
DEBUG:numba.core.ssa:find_def_from_top label 134
DEBUG:numba.core.ssa:insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 134
DEBUG:numba.core.ssa:find_def_from_bottom label 114
DEBUG:numba.core.ssa:incoming_def inferred.1 = origsize // known_size.2
DEBUG:numba.core.ssa:find_def_from_bottom label 100
DEBUG:numba.core.ssa:incoming_def inferred = const(int, 0)
DEBUG:numba.core.ssa:replaced with: shape[neg_ax] = inferred.2
DEBUG:numba.core.ssa:on stmt: jump 164
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 156
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $156load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const158.1 = const(str, multiple negative shape values)
DEBUG:numba.core.ssa:on stmt: $160call_function.2 = call $156load_global.0($const158.1, func=$156load_global.0, args=[Var($const158.1, arrayobj.py:1628)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 164
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: $const164.0 = const(NoneType, None)
DEBUG:numba.core.ssa:on stmt: $166return_value.1 = cast(value=$const164.0)
DEBUG:numba.core.ssa:on stmt: return $166return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 165
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e069e2b0>
DEBUG:numba.core.ssa:on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[48, 34])
DEBUG:numba.core.ssa:on stmt: jump 18
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1088)
           2	LOAD_GLOBAL(arg=0, lineno=1088)
           4	LOAD_METHOD(arg=1, lineno=1088)
           6	LOAD_GLOBAL(arg=0, lineno=1088)
           8	LOAD_METHOD(arg=2, lineno=1088)
          10	LOAD_FAST(arg=0, lineno=1088)
          12	CALL_METHOD(arg=1, lineno=1088)
          14	LOAD_GLOBAL(arg=0, lineno=1088)
          16	LOAD_METHOD(arg=1, lineno=1088)
          18	LOAD_FAST(arg=0, lineno=1088)
          20	CALL_METHOD(arg=1, lineno=1088)
          22	COMPARE_OP(arg=4, lineno=1088)
          24	CALL_METHOD(arg=1, lineno=1088)
          26	RETURN_VALUE(arg=None, lineno=1088)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1088)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1088)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_METHOD(arg=2, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$8load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$8load_method.3', '$x10.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$12call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_METHOD(arg=1, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$12call_method.5', '$14load_global.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$12call_method.5', '$16load_method.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_METHOD(arg=1, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$12call_method.5', '$16load_method.7', '$x18.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=COMPARE_OP(arg=4, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$12call_method.5', '$20call_method.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$22compare_op.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$24call_method.11']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_method.3'}), (10, {'res': '$x10.4'}), (12, {'func': '$8load_method.3', 'args': ['$x10.4'], 'res': '$12call_method.5'}), (14, {'res': '$14load_global.6'}), (16, {'item': '$14load_global.6', 'res': '$16load_method.7'}), (18, {'res': '$x18.8'}), (20, {'func': '$16load_method.7', 'args': ['$x18.8'], 'res': '$20call_method.9'}), (22, {'lhs': '$12call_method.5', 'rhs': '$20call_method.9', 'res': '$22compare_op.10'}), (24, {'func': '$4load_method.1', 'args': ['$22compare_op.10'], 'res': '$24call_method.11'}), (26, {'retval': '$24call_method.11', 'castval': '$26return_value.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=mean) ['$2load_global.0', '$4load_method.1']
    $6load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.2']
    $8load_method.3 = getattr(value=$6load_global.2, attr=asarray) ['$6load_global.2', '$8load_method.3']
    $12call_method.5 = call $8load_method.3(x, func=$8load_method.3, args=[Var(x, tsfeatures.py:1088)], kws=(), vararg=None) ['$12call_method.5', '$8load_method.3', 'x']
    $14load_global.6 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$14load_global.6']
    $16load_method.7 = getattr(value=$14load_global.6, attr=mean) ['$14load_global.6', '$16load_method.7']
    $20call_method.9 = call $16load_method.7(x, func=$16load_method.7, args=[Var(x, tsfeatures.py:1088)], kws=(), vararg=None) ['$16load_method.7', '$20call_method.9', 'x']
    $22compare_op.10 = $12call_method.5 > $20call_method.9 ['$12call_method.5', '$20call_method.9', '$22compare_op.10']
    $24call_method.11 = call $4load_method.1($22compare_op.10, func=$4load_method.1, args=[Var($22compare_op.10, tsfeatures.py:1088)], kws=(), vararg=None) ['$22compare_op.10', '$24call_method.11', '$4load_method.1']
    $26return_value.12 = cast(value=$24call_method.11) ['$24call_method.11', '$26return_value.12']
    return $26return_value.12                ['$26return_value.12']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c4392100>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=mean)
DEBUG:numba.core.ssa:on stmt: $6load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.3 = getattr(value=$6load_global.2, attr=asarray)
DEBUG:numba.core.ssa:on stmt: $12call_method.5 = call $8load_method.3(x, func=$8load_method.3, args=[Var(x, tsfeatures.py:1088)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $14load_global.6 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $16load_method.7 = getattr(value=$14load_global.6, attr=mean)
DEBUG:numba.core.ssa:on stmt: $20call_method.9 = call $16load_method.7(x, func=$16load_method.7, args=[Var(x, tsfeatures.py:1088)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $22compare_op.10 = $12call_method.5 > $20call_method.9
DEBUG:numba.core.ssa:on stmt: $24call_method.11 = call $4load_method.1($22compare_op.10, func=$4load_method.1, args=[Var($22compare_op.10, tsfeatures.py:1088)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $26return_value.12 = cast(value=$24call_method.11)
DEBUG:numba.core.ssa:on stmt: return $26return_value.12
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$12call_method.5': [<numba.core.ir.Assign object at 0x7fa9c426a430>],
             '$14load_global.6': [<numba.core.ir.Assign object at 0x7fa9c426ab50>],
             '$16load_method.7': [<numba.core.ir.Assign object at 0x7fa9c426abe0>],
             '$20call_method.9': [<numba.core.ir.Assign object at 0x7fa9c426b910>],
             '$22compare_op.10': [<numba.core.ir.Assign object at 0x7fa9c426baf0>],
             '$24call_method.11': [<numba.core.ir.Assign object at 0x7fa9c426b220>],
             '$26return_value.12': [<numba.core.ir.Assign object at 0x7fa9c426bc40>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa9c426a250>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa9c426a6a0>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0x7fa9c426a4f0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fa9c426a400>],
             'x': [<numba.core.ir.Assign object at 0x7faa24102b20>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=4069)
           2	LOAD_FAST(arg=0, lineno=4069)
           4	RETURN_VALUE(arg=None, lineno=4069)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4069)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4069)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4069)
DEBUG:numba.core.byteflow:stack ['$a2.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c42c7d60>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
DEBUG:numba.core.ssa:on stmt: $4return_value.1 = cast(value=a)
DEBUG:numba.core.ssa:on stmt: return $4return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7fa9c426a6d0>],
             'a': [<numba.core.ir.Assign object at 0x7fa9c43b0940>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa9c426a040>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1088)
           2	LOAD_FAST(arg=0, lineno=1088)
           4	LOAD_FAST(arg=1, lineno=1088)
           6	COMPARE_OP(arg=4, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1088)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1088)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=1088)
DEBUG:numba.core.byteflow:stack ['$_12call_method_5_12.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=1)
DEBUG:numba.core.byteflow:stack ['$_12call_method_5_12.0', '$_20call_method_9_14.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG:numba.core.byteflow:stack ['$6compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_12call_method_5_12.0'}), (4, {'res': '$_20call_method_9_14.1'}), (6, {'lhs': '$_12call_method_5_12.0', 'rhs': '$_20call_method_9_14.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    _12call_method_5_1 = arg(0, name=_12call_method_5_1) ['_12call_method_5_1']
    _20call_method_9_1 = arg(1, name=_20call_method_9_1) ['_20call_method_9_1']
    $6compare_op.2 = _12call_method_5_1 > _20call_method_9_1 ['$6compare_op.2', '_12call_method_5_1', '_20call_method_9_1']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa2460ef10>
DEBUG:numba.core.ssa:on stmt: _12call_method_5_1 = arg(0, name=_12call_method_5_1)
DEBUG:numba.core.ssa:on stmt: _20call_method_9_1 = arg(1, name=_20call_method_9_1)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = _12call_method_5_1 > _20call_method_9_1
DEBUG:numba.core.ssa:on stmt: $8return_value.3 = cast(value=$6compare_op.2)
DEBUG:numba.core.ssa:on stmt: return $8return_value.3
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [<numba.core.ir.Assign object at 0x7faa1c66cc40>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7faa1c66cc70>],
             '_12call_method_5_1': [<numba.core.ir.Assign object at 0x7faa1c66cb20>],
             '_20call_method_9_1': [<numba.core.ir.Assign object at 0x7faa1c66c580>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
>         26	LOAD_FAST(arg=4, lineno=212)
          28	LOAD_FAST(arg=0, lineno=212)
          30	COMPARE_OP(arg=0, lineno=212)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=212)
          34	LOAD_FAST(arg=1, lineno=213)
          36	LOAD_FAST(arg=4, lineno=213)
          38	BINARY_SUBSCR(arg=None, lineno=213)
          40	STORE_FAST(arg=6, lineno=213)
          42	LOAD_FAST(arg=3, lineno=214)
          44	LOAD_FAST(arg=5, lineno=214)
          46	BINARY_SUBSCR(arg=None, lineno=214)
          48	STORE_FAST(arg=7, lineno=214)
          50	LOAD_FAST(arg=7, lineno=217)
          52	LOAD_CONST(arg=2, lineno=217)
          54	COMPARE_OP(arg=3, lineno=217)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=217)
          58	LOAD_FAST(arg=6, lineno=221)
          60	LOAD_FAST(arg=7, lineno=221)
          62	COMPARE_OP(arg=3, lineno=221)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          66	LOAD_FAST(arg=6, lineno=221)
          68	LOAD_CONST(arg=2, lineno=221)
          70	COMPARE_OP(arg=3, lineno=221)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          74	LOAD_FAST(arg=5, lineno=222)
          76	LOAD_CONST(arg=2, lineno=222)
          78	BINARY_ADD(arg=None, lineno=222)
          80	UNARY_NEGATIVE(arg=None, lineno=222)
          82	RETURN_VALUE(arg=None, lineno=222)
          84	JUMP_FORWARD(arg=16, lineno=222)
>         86	LOAD_FAST(arg=6, lineno=223)
          88	LOAD_CONST(arg=2, lineno=223)
          90	COMPARE_OP(arg=3, lineno=223)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=223)
          94	LOAD_FAST(arg=6, lineno=225)
          96	LOAD_FAST(arg=3, lineno=225)
          98	LOAD_FAST(arg=5, lineno=225)
         100	STORE_SUBSCR(arg=None, lineno=225)
>        102	LOAD_FAST(arg=4, lineno=226)
         104	LOAD_CONST(arg=2, lineno=226)
         106	INPLACE_ADD(arg=None, lineno=226)
         108	STORE_FAST(arg=4, lineno=226)
         110	LOAD_FAST(arg=5, lineno=227)
         112	LOAD_CONST(arg=2, lineno=227)
         114	INPLACE_ADD(arg=None, lineno=227)
         116	STORE_FAST(arg=5, lineno=227)
         118	JUMP_ABSOLUTE(arg=26, lineno=227)
>        120	LOAD_FAST(arg=5, lineno=228)
         122	RETURN_VALUE(arg=None, lineno=228)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=205)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
DEBUG:numba.core.byteflow:stack ['$src_ndim2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
DEBUG:numba.core.byteflow:stack ['$src_ndim2.0', '$dest_ndim4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
DEBUG:numba.core.byteflow:stack ['$6compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
DEBUG:numba.core.byteflow:stack ['$const10.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
DEBUG:numba.core.byteflow:stack ['$const14.0']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
DEBUG:numba.core.byteflow:stack ['$dest_ndim18.1']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
DEBUG:numba.core.byteflow:stack ['$dest_ndim18.1', '$src_ndim20.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
DEBUG:numba.core.byteflow:stack ['$22binary_subtract.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=212)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=212)
DEBUG:numba.core.byteflow:stack ['$src_index26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=212)
DEBUG:numba.core.byteflow:stack ['$src_index26.0', '$src_ndim28.1']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=212)
DEBUG:numba.core.byteflow:stack ['$30compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=213)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=213)
DEBUG:numba.core.byteflow:stack ['$src_shape34.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=213)
DEBUG:numba.core.byteflow:stack ['$src_shape34.0', '$src_index36.1']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=STORE_FAST(arg=6, lineno=213)
DEBUG:numba.core.byteflow:stack ['$38binary_subscr.2']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=214)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=214)
DEBUG:numba.core.byteflow:stack ['$dest_shape42.3']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=214)
DEBUG:numba.core.byteflow:stack ['$dest_shape42.3', '$dest_index44.4']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_FAST(arg=7, lineno=214)
DEBUG:numba.core.byteflow:stack ['$46binary_subscr.5']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=217)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=217)
DEBUG:numba.core.byteflow:stack ['$dest_dim_size50.6']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=217)
DEBUG:numba.core.byteflow:stack ['$dest_dim_size50.6', '$const52.7']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=217)
DEBUG:numba.core.byteflow:stack ['$54compare_op.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=228)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=228)
DEBUG:numba.core.byteflow:stack ['$dest_index120.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=221)
DEBUG:numba.core.byteflow:stack ['$src_dim_size58.0']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG:numba.core.byteflow:stack ['$src_dim_size58.0', '$dest_dim_size60.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG:numba.core.byteflow:stack ['$62compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=223)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=223)
DEBUG:numba.core.byteflow:stack ['$src_dim_size86.0']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=223)
DEBUG:numba.core.byteflow:stack ['$src_dim_size86.0', '$const88.1']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=223)
DEBUG:numba.core.byteflow:stack ['$90compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG:numba.core.byteflow:stack ['$src_dim_size66.0']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG:numba.core.byteflow:stack ['$src_dim_size66.0', '$const68.1']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG:numba.core.byteflow:stack ['$70compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=226)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=226)
DEBUG:numba.core.byteflow:stack ['$src_index102.0']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=226)
DEBUG:numba.core.byteflow:stack ['$src_index102.0', '$const104.1']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=STORE_FAST(arg=4, lineno=226)
DEBUG:numba.core.byteflow:stack ['$106inplace_add.2']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=227)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=227)
DEBUG:numba.core.byteflow:stack ['$dest_index110.3']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=227)
DEBUG:numba.core.byteflow:stack ['$dest_index110.3', '$const112.4']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=STORE_FAST(arg=5, lineno=227)
DEBUG:numba.core.byteflow:stack ['$114inplace_add.5']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=227)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=225)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=225)
DEBUG:numba.core.byteflow:stack ['$src_dim_size94.0']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=225)
DEBUG:numba.core.byteflow:stack ['$src_dim_size94.0', '$dest_shape96.1']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=225)
DEBUG:numba.core.byteflow:stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=222)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG:numba.core.byteflow:stack ['$dest_index74.0']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=222)
DEBUG:numba.core.byteflow:stack ['$dest_index74.0', '$const76.1']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=222)
DEBUG:numba.core.byteflow:stack ['$78binary_add.2']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=222)
DEBUG:numba.core.byteflow:stack ['$80unary_negative.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=102 nstack_initial=0)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block analysis pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block analysis pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block analysis pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block analysis pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x7faa1c63c2e0>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x7fa9c426b640>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x7fa9c439e670>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7faa1c66c8b0>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x7faa1c64e190>],
             '$32pred': [<numba.core.ir.Assign object at 0x7faa1c64e430>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x7faa1c6482b0>],
             '$56pred': [<numba.core.ir.Assign object at 0x7faa1c648550>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x7faa1c648790>],
             '$64pred': [<numba.core.ir.Assign object at 0x7faa1c648a30>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7faa2460ea90>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x7faa1c648eb0>],
             '$72pred': [<numba.core.ir.Assign object at 0x7faa1c64cfd0>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x7faa1c64cca0>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x7faa1c64c940>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x7faa1c64c3d0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7faa1c639e80>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x7faa1c64c490>],
             '$92pred': [<numba.core.ir.Assign object at 0x7faa1c644130>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7faa1c66c9a0>],
             '$const104.1': [<numba.core.ir.Assign object at 0x7faa1c6448b0>],
             '$const112.4': [<numba.core.ir.Assign object at 0x7fa9c426b340>],
             '$const52.7': [<numba.core.ir.Assign object at 0x7faa1c648130>],
             '$const68.1': [<numba.core.ir.Assign object at 0x7faa1c648d30>],
             '$const76.1': [<numba.core.ir.Assign object at 0x7faa1c64cbe0>],
             '$const88.1': [<numba.core.ir.Assign object at 0x7faa1c64c220>],
             'bool32': [<numba.core.ir.Assign object at 0x7faa1c64e310>],
             'bool56': [<numba.core.ir.Assign object at 0x7faa1c648430>],
             'bool64': [<numba.core.ir.Assign object at 0x7faa1c648910>],
             'bool72': [<numba.core.ir.Assign object at 0x7faa1c64c3a0>],
             'bool8': [<numba.core.ir.Assign object at 0x7faa2460ebb0>],
             'bool92': [<numba.core.ir.Assign object at 0x7faa1c64c7c0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7faa1c64ed30>],
             'dest_index': [<numba.core.ir.Assign object at 0x7faa1c63dd60>,
                            <numba.core.ir.Assign object at 0x7fa9c426b580>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7faa1c657310>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7faa1c657130>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7faa1c64e850>],
             'src_index': [<numba.core.ir.Assign object at 0x7faa1c63d7f0>,
                           <numba.core.ir.Assign object at 0x7faa1c63c250>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7faa1c6570a0>],
             'src_shape': [<numba.core.ir.Assign object at 0x7faa1c6571f0>]})
DEBUG:numba.core.ssa:SSA violators {'dest_index', 'src_index'}
DEBUG:numba.core.ssa:Fix SSA violator on var dest_index
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:first assign: dest_index
DEBUG:numba.core.ssa:replaced with: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index = $114inplace_add.5
DEBUG:numba.core.ssa:replaced with: dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c43a14f0>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa9c439ee80>],
             102: [<numba.core.ir.Assign object at 0x7fa9c439eb80>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:find_def_from_top label 26
DEBUG:numba.core.ssa:insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG:numba.core.ssa:find_def_from_bottom label 102
DEBUG:numba.core.ssa:incoming_def dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:incoming_def dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
DEBUG:numba.core.ssa:find_def_from_top label 74
DEBUG:numba.core.ssa:idom 66 from label 74
DEBUG:numba.core.ssa:find_def_from_bottom label 66
DEBUG:numba.core.ssa:find_def_from_top label 66
DEBUG:numba.core.ssa:idom 58 from label 66
DEBUG:numba.core.ssa:find_def_from_bottom label 58
DEBUG:numba.core.ssa:find_def_from_top label 58
DEBUG:numba.core.ssa:idom 34 from label 58
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
DEBUG:numba.core.ssa:find_def_from_top label 94
DEBUG:numba.core.ssa:idom 86 from label 94
DEBUG:numba.core.ssa:find_def_from_bottom label 86
DEBUG:numba.core.ssa:find_def_from_top label 86
DEBUG:numba.core.ssa:idom 34 from label 86
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: dest_shape[dest_index.2] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 102
DEBUG:numba.core.ssa:idom 34 from label 102
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9c439ed00>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
DEBUG:numba.core.ssa:find_def_from_top label 120
DEBUG:numba.core.ssa:idom 26 from label 120
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $122return_value.1 = cast(value=dest_index.2)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var src_index
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:first assign: src_index
DEBUG:numba.core.ssa:replaced with: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index.2] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index = $106inplace_add.2
DEBUG:numba.core.ssa:replaced with: src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9c439eb20>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index.2)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa9c439ee20>],
             102: [<numba.core.ir.Assign object at 0x7fa9c43b01c0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG:numba.core.ssa:on stmt: src_shape = arg(1, name=src_shape)
DEBUG:numba.core.ssa:on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG:numba.core.ssa:on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 14
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: $const10.0 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG:numba.core.ssa:on stmt: return $12return_value.1
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 14
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: src_index = const(int, 0)
DEBUG:numba.core.ssa:on stmt: dest_index = dest_ndim - src_ndim
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
DEBUG:numba.core.ssa:on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
DEBUG:numba.core.ssa:find_def_from_top label 26
DEBUG:numba.core.ssa:insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG:numba.core.ssa:find_def_from_bottom label 102
DEBUG:numba.core.ssa:incoming_def src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:find_def_from_bottom label 14
DEBUG:numba.core.ssa:incoming_def src_index = const(int, 0)
DEBUG:numba.core.ssa:replaced with: $30compare_op.2 = src_index.2 < src_ndim
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 34, 120
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const52.7 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG:numba.core.ssa:on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $56pred, 58, 86
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 58
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: $const68.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG:numba.core.ssa:on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $72pred, 74, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: $const76.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG:numba.core.ssa:on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG:numba.core.ssa:on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG:numba.core.ssa:on stmt: return $82return_value.4
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: $const88.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG:numba.core.ssa:on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $92pred, 94, 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 94
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: dest_shape[dest_index.2] = src_dim_size
DEBUG:numba.core.ssa:on stmt: jump 102
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 102
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: $const104.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 102
DEBUG:numba.core.ssa:idom 34 from label 102
DEBUG:numba.core.ssa:find_def_from_bottom label 34
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 26 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: src_index.1 = $106inplace_add.2
DEBUG:numba.core.ssa:on stmt: $const112.4 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: dest_index.1 = $114inplace_add.5
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 120
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa1c63c430>
DEBUG:numba.core.ssa:on stmt: $122return_value.1 = cast(value=dest_index.2)
DEBUG:numba.core.ssa:on stmt: return $122return_value.1
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=411)
           2	LOAD_DEREF(arg=0, lineno=411)
           4	STORE_FAST(arg=1, lineno=411)
           6	LOAD_GLOBAL(arg=0, lineno=412)
           8	LOAD_METHOD(arg=1, lineno=412)
          10	LOAD_FAST(arg=0, lineno=412)
          12	CALL_METHOD(arg=1, lineno=412)
          14	GET_ITER(arg=None, lineno=412)
>         16	FOR_ITER(arg=16, lineno=412)
          18	STORE_FAST(arg=2, lineno=412)
          20	LOAD_FAST(arg=1, lineno=413)
          22	LOAD_FAST(arg=2, lineno=413)
          24	LOAD_METHOD(arg=2, lineno=413)
          26	CALL_METHOD(arg=0, lineno=413)
          28	INPLACE_ADD(arg=None, lineno=413)
          30	STORE_FAST(arg=1, lineno=413)
          32	JUMP_ABSOLUTE(arg=16, lineno=413)
>         34	LOAD_FAST(arg=1, lineno=414)
          36	LOAD_FAST(arg=0, lineno=414)
          38	LOAD_ATTR(arg=3, lineno=414)
          40	BINARY_TRUE_DIVIDE(arg=None, lineno=414)
          42	RETURN_VALUE(arg=None, lineno=414)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=411)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=411)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=STORE_FAST(arg=1, lineno=411)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=412)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=412)
DEBUG:numba.core.byteflow:stack ['$6load_global.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=412)
DEBUG:numba.core.byteflow:stack ['$8load_method.2']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=412)
DEBUG:numba.core.byteflow:stack ['$8load_method.2', '$arr10.3']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=GET_ITER(arg=None, lineno=412)
DEBUG:numba.core.byteflow:stack ['$12call_method.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi16.0']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=FOR_ITER(arg=16, lineno=412)
DEBUG:numba.core.byteflow:stack ['$phi16.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=414)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=414)
DEBUG:numba.core.byteflow:stack ['$c34.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=414)
DEBUG:numba.core.byteflow:stack ['$c34.0', '$arr36.1']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=414)
DEBUG:numba.core.byteflow:stack ['$c34.0', '$38load_attr.2']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=414)
DEBUG:numba.core.byteflow:stack ['$40binary_true_divide.3']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi18.0', '$phi18.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=STORE_FAST(arg=2, lineno=412)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$phi18.1']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$v22.3']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$24load_method.4']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$c20.2', '$26call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=1, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0', '$28inplace_add.6']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=JUMP_ABSOLUTE(arg=16, lineno=413)
DEBUG:numba.core.byteflow:stack ['$phi18.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=16 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$arr10.3'}), (12, {'func': '$8load_method.2', 'args': ['$arr10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'res': '$arr36.1'}), (38, {'item': '$arr36.1', 'res': '$38load_attr.2'}), (40, {'lhs': '$c34.0', 'rhs': '$38load_attr.2', 'res': '$40binary_true_divide.3'}), (42, {'retval': '$40binary_true_divide.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arr = arg(0, name=arr)                   ['arr']
    c = freevar(zero: 0.0)                   ['c']
    $6load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:411)], kws=(), vararg=None) ['$12call_method.4', '$8load_method.2', 'arr']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $38load_attr.2 = getattr(value=arr, attr=size) ['$38load_attr.2', 'arr']
    $40binary_true_divide.3 = c / $38load_attr.2 ['$38load_attr.2', '$40binary_true_divide.3', 'c']
    $42return_value.4 = cast(value=$40binary_true_divide.3) ['$40binary_true_divide.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa244d65e0>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:411)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block analysis pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa244d65e0>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block analysis pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa244d65e0>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa244d65e0>
DEBUG:numba.core.ssa:on stmt: $38load_attr.2 = getattr(value=arr, attr=size)
DEBUG:numba.core.ssa:on stmt: $40binary_true_divide.3 = c / $38load_attr.2
DEBUG:numba.core.ssa:on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
DEBUG:numba.core.ssa:on stmt: return $42return_value.4
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x7faa244be2e0>],
             '$14get_iter.5': [<numba.core.ir.Assign object at 0x7faa244be430>],
             '$16for_iter.1': [<numba.core.ir.Assign object at 0x7faa244be730>],
             '$16for_iter.2': [<numba.core.ir.Assign object at 0x7faa244be850>],
             '$16for_iter.3': [<numba.core.ir.Assign object at 0x7faa244be970>],
             '$24load_method.4': [<numba.core.ir.Assign object at 0x7faa244befd0>],
             '$26call_method.5': [<numba.core.ir.Assign object at 0x7faa244d61c0>],
             '$28inplace_add.6': [<numba.core.ir.Assign object at 0x7faa244d6310>],
             '$38load_attr.2': [<numba.core.ir.Assign object at 0x7faa244d6850>],
             '$40binary_true_divide.3': [<numba.core.ir.Assign object at 0x7faa244d69d0>],
             '$42return_value.4': [<numba.core.ir.Assign object at 0x7faa244d6b50>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x7faa244efe50>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x7faa244effd0>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x7faa244ef5b0>],
             '$phi18.1': [<numba.core.ir.Assign object at 0x7faa244be640>],
             'arr': [<numba.core.ir.Assign object at 0x7faa244efa30>],
             'c': [<numba.core.ir.Assign object at 0x7faa244efbb0>,
                   <numba.core.ir.Assign object at 0x7faa244d63d0>],
             'v': [<numba.core.ir.Assign object at 0x7faa244bec10>]})
DEBUG:numba.core.ssa:SSA violators {'c'}
DEBUG:numba.core.ssa:Fix SSA violator on var c
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa244d6c10>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:first assign: c
DEBUG:numba.core.ssa:replaced with: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:411)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa244d6c10>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa244d6c10>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c = $28inplace_add.6
DEBUG:numba.core.ssa:replaced with: c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa244d6c10>
DEBUG:numba.core.ssa:on stmt: $38load_attr.2 = getattr(value=arr, attr=size)
DEBUG:numba.core.ssa:on stmt: $40binary_true_divide.3 = c / $38load_attr.2
DEBUG:numba.core.ssa:on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
DEBUG:numba.core.ssa:on stmt: return $42return_value.4
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7faa244d6c70>],
             18: [<numba.core.ir.Assign object at 0x7faa244ef370>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa244ef6a0>
DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
DEBUG:numba.core.ssa:on stmt: c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $12call_method.4 = call $8load_method.2(arr, func=$8load_method.2, args=[Var(arr, arraymath.py:411)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
DEBUG:numba.core.ssa:on stmt: $phi16.0 = $14get_iter.5
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 16
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa244ef6a0>
DEBUG:numba.core.ssa:on stmt: $16for_iter.1 = iternext(value=$phi16.0)
DEBUG:numba.core.ssa:on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi18.1 = $16for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $16for_iter.3, 18, 34
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa244ef6a0>
DEBUG:numba.core.ssa:on stmt: v = $phi18.1
DEBUG:numba.core.ssa:on stmt: $24load_method.4 = getattr(value=v, attr=item)
DEBUG:numba.core.ssa:on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 18
DEBUG:numba.core.ssa:idom 16 from label 18
DEBUG:numba.core.ssa:find_def_from_bottom label 16
DEBUG:numba.core.ssa:find_def_from_top label 16
DEBUG:numba.core.ssa:insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def c = freevar(zero: 0.0)
DEBUG:numba.core.ssa:find_def_from_bottom label 18
DEBUG:numba.core.ssa:incoming_def c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: c.1 = $28inplace_add.6
DEBUG:numba.core.ssa:on stmt: jump 16
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa244ef6a0>
DEBUG:numba.core.ssa:on stmt: $38load_attr.2 = getattr(value=arr, attr=size)
DEBUG:numba.core.ssa:on stmt: $40binary_true_divide.3 = c / $38load_attr.2
DEBUG:numba.core.ssa:find_def var='c' stmt=$40binary_true_divide.3 = c / $38load_attr.2
DEBUG:numba.core.ssa:find_def_from_top label 34
DEBUG:numba.core.ssa:idom 16 from label 34
DEBUG:numba.core.ssa:find_def_from_bottom label 16
DEBUG:numba.core.ssa:replaced with: $40binary_true_divide.3 = c.2 / $38load_attr.2
DEBUG:numba.core.ssa:on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
DEBUG:numba.core.ssa:on stmt: return $42return_value.4
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1107)
           2	LOAD_GLOBAL(arg=0, lineno=1107)
           4	LOAD_FAST(arg=0, lineno=1107)
           6	LOAD_CONST(arg=1, lineno=1107)
           8	LOAD_CONST(arg=2, lineno=1107)
          10	LOAD_CONST(arg=3, lineno=1107)
          12	CALL_FUNCTION_KW(arg=3, lineno=1107)
          14	LOAD_CONST(arg=4, lineno=1107)
          16	BINARY_SUBSCR(arg=None, lineno=1107)
          18	RETURN_VALUE(arg=None, lineno=1107)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1107)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1107)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1107)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1107)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_CONST(arg=2, lineno=1107)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$const6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=3, lineno=1107)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$const6.2', '$const8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_FUNCTION_KW(arg=3, lineno=1107)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$const6.2', '$const8.3', '$const10.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_CONST(arg=4, lineno=1107)
DEBUG:numba.core.byteflow:stack ['$12call_function_kw.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=1107)
DEBUG:numba.core.byteflow:stack ['$12call_function_kw.5', '$const14.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=1107)
DEBUG:numba.core.byteflow:stack ['$16binary_subscr.7']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$const6.2'}), (8, {'res': '$const8.3'}), (10, {'res': '$const10.4'}), (12, {'func': '$2load_global.0', 'args': ['$x4.1', '$const6.2', '$const8.3'], 'names': '$const10.4', 'res': '$12call_function_kw.5'}), (14, {'res': '$const14.6'}), (16, {'index': '$const14.6', 'target': '$12call_function_kw.5', 'res': '$16binary_subscr.7'}), (18, {'retval': '$16binary_subscr.7', 'castval': '$18return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(kpss: <function kpss at 0x7faabc0f9d30>) ['$2load_global.0']
    $const6.2 = const(str, ct)               ['$const6.2']
    $const8.3 = const(int, 1)                ['$const8.3']
    $12call_function_kw.5 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, tsfeatures.py:1107)], kws=[('regression', Var($const6.2, tsfeatures.py:1107)), ('nlags', Var($const8.3, tsfeatures.py:1107))], vararg=None) ['$12call_function_kw.5', '$2load_global.0', '$const6.2', '$const8.3', 'x']
    $const14.6 = const(int, 0)               ['$const14.6']
    $16binary_subscr.7 = getitem(value=$12call_function_kw.5, index=$const14.6, fn=<built-in function getitem>) ['$12call_function_kw.5', '$16binary_subscr.7', '$const14.6']
    $18return_value.8 = cast(value=$16binary_subscr.7) ['$16binary_subscr.7', '$18return_value.8']
    return $18return_value.8                 ['$18return_value.8']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1124)
           2	LOAD_GLOBAL(arg=0, lineno=1124)
           4	LOAD_FAST(arg=0, lineno=1124)
           6	LOAD_GLOBAL(arg=1, lineno=1124)
           8	LOAD_CONST(arg=1, lineno=1124)
          10	LOAD_GLOBAL(arg=2, lineno=1124)
          12	LOAD_FAST(arg=0, lineno=1124)
          14	CALL_FUNCTION(arg=1, lineno=1124)
          16	LOAD_CONST(arg=2, lineno=1124)
          18	BINARY_FLOOR_DIVIDE(arg=None, lineno=1124)
          20	CALL_FUNCTION(arg=2, lineno=1124)
          22	LOAD_CONST(arg=3, lineno=1124)
          24	CALL_FUNCTION_KW(arg=2, lineno=1124)
          26	LOAD_CONST(arg=4, lineno=1124)
          28	BINARY_SUBSCR(arg=None, lineno=1124)
          30	RETURN_VALUE(arg=None, lineno=1124)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1124)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1124)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=2, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$6load_global.2', '$const8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$6load_global.2', '$const8.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$6load_global.2', '$const8.3', '$10load_global.4', '$x12.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$6load_global.2', '$const8.3', '$14call_function.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$6load_global.2', '$const8.3', '$14call_function.6', '$const16.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_FUNCTION(arg=2, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$6load_global.2', '$const8.3', '$18binary_floor_divide.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_CONST(arg=3, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$20call_function.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=CALL_FUNCTION_KW(arg=2, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$x4.1', '$20call_function.9', '$const22.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_CONST(arg=4, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$24call_function_kw.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$24call_function_kw.11', '$const26.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=1124)
DEBUG:numba.core.byteflow:stack ['$28binary_subscr.13']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$6load_global.2'}), (8, {'res': '$const8.3'}), (10, {'res': '$10load_global.4'}), (12, {'res': '$x12.5'}), (14, {'func': '$10load_global.4', 'args': ['$x12.5'], 'res': '$14call_function.6'}), (16, {'res': '$const16.7'}), (18, {'lhs': '$14call_function.6', 'rhs': '$const16.7', 'res': '$18binary_floor_divide.8'}), (20, {'func': '$6load_global.2', 'args': ['$const8.3', '$18binary_floor_divide.8'], 'res': '$20call_function.9'}), (22, {'res': '$const22.10'}), (24, {'func': '$2load_global.0', 'args': ['$x4.1', '$20call_function.9'], 'names': '$const22.10', 'res': '$24call_function_kw.11'}), (26, {'res': '$const26.12'}), (28, {'index': '$const26.12', 'target': '$24call_function_kw.11', 'res': '$28binary_subscr.13'}), (30, {'retval': '$28binary_subscr.13', 'castval': '$30return_value.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(het_arch: <function het_arch at 0x7faab68b8700>) ['$2load_global.0']
    $6load_global.2 = global(min: <built-in function min>) ['$6load_global.2']
    $const8.3 = const(int, 10)               ['$const8.3']
    $10load_global.4 = global(len: <built-in function len>) ['$10load_global.4']
    $14call_function.6 = call $10load_global.4(x, func=$10load_global.4, args=[Var(x, tsfeatures.py:1124)], kws=(), vararg=None) ['$10load_global.4', '$14call_function.6', 'x']
    $const16.7 = const(int, 5)               ['$const16.7']
    $18binary_floor_divide.8 = $14call_function.6 // $const16.7 ['$14call_function.6', '$18binary_floor_divide.8', '$const16.7']
    $20call_function.9 = call $6load_global.2($const8.3, $18binary_floor_divide.8, func=$6load_global.2, args=[Var($const8.3, tsfeatures.py:1124), Var($18binary_floor_divide.8, tsfeatures.py:1124)], kws=(), vararg=None) ['$18binary_floor_divide.8', '$20call_function.9', '$6load_global.2', '$const8.3']
    $24call_function_kw.11 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, tsfeatures.py:1124)], kws=[('nlags', Var($20call_function.9, tsfeatures.py:1124))], vararg=None) ['$20call_function.9', '$24call_function_kw.11', '$2load_global.0', 'x']
    $const26.12 = const(int, 0)              ['$const26.12']
    $28binary_subscr.13 = getitem(value=$24call_function_kw.11, index=$const26.12, fn=<built-in function getitem>) ['$24call_function_kw.11', '$28binary_subscr.13', '$const26.12']
    $30return_value.14 = cast(value=$28binary_subscr.13) ['$28binary_subscr.13', '$30return_value.14']
    return $30return_value.14                ['$30return_value.14']

INFO:numba.core.transforms:finding looplift candidates
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1142)
           2	LOAD_GLOBAL(arg=0, lineno=1142)
           4	LOAD_ATTR(arg=1, lineno=1142)
           6	LOAD_FAST(arg=0, lineno=1142)
           8	LOAD_FAST(arg=1, lineno=1142)
          10	LOAD_CONST(arg=1, lineno=1142)
          12	CALL_FUNCTION_KW(arg=2, lineno=1142)
          14	UNPACK_SEQUENCE(arg=2, lineno=1142)
          16	STORE_FAST(arg=2, lineno=1142)
          18	STORE_FAST(arg=3, lineno=1142)
          20	LOAD_FAST(arg=3, lineno=1143)
          22	LOAD_FAST(arg=2, lineno=1143)
          24	LOAD_METHOD(arg=2, lineno=1143)
          26	CALL_METHOD(arg=0, lineno=1143)
          28	BINARY_SUBSCR(arg=None, lineno=1143)
          30	RETURN_VALUE(arg=None, lineno=1143)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1142)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1142)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=1142)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1142)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1142)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$x6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1142)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$x6.2', '$nbins8.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_FUNCTION_KW(arg=2, lineno=1142)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$x6.2', '$nbins8.3', '$const10.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=UNPACK_SEQUENCE(arg=2, lineno=1142)
DEBUG:numba.core.byteflow:stack ['$12call_function_kw.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=2, lineno=1142)
DEBUG:numba.core.byteflow:stack ['$14unpack_sequence.7', '$14unpack_sequence.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=STORE_FAST(arg=3, lineno=1142)
DEBUG:numba.core.byteflow:stack ['$14unpack_sequence.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=3, lineno=1143)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=1143)
DEBUG:numba.core.byteflow:stack ['$val20.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=1143)
DEBUG:numba.core.byteflow:stack ['$val20.9', '$cnt22.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=1143)
DEBUG:numba.core.byteflow:stack ['$val20.9', '$24load_method.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=1143)
DEBUG:numba.core.byteflow:stack ['$val20.9', '$26call_method.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=1143)
DEBUG:numba.core.byteflow:stack ['$28binary_subscr.13']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$x6.2'}), (8, {'res': '$nbins8.3'}), (10, {'res': '$const10.4'}), (12, {'func': '$4load_attr.1', 'args': ['$x6.2', '$nbins8.3'], 'names': '$const10.4', 'res': '$12call_function_kw.5'}), (14, {'iterable': '$12call_function_kw.5', 'stores': ['$14unpack_sequence.6', '$14unpack_sequence.7'], 'tupleobj': '$14unpack_sequence.8'}), (16, {'value': '$14unpack_sequence.6'}), (18, {'value': '$14unpack_sequence.7'}), (20, {'res': '$val20.9'}), (22, {'res': '$cnt22.10'}), (24, {'item': '$cnt22.10', 'res': '$24load_method.11'}), (26, {'func': '$24load_method.11', 'args': [], 'res': '$26call_method.12'}), (28, {'index': '$26call_method.12', 'target': '$val20.9', 'res': '$28binary_subscr.13'}), (30, {'retval': '$28binary_subscr.13', 'castval': '$30return_value.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    nbins = arg(1, name=nbins)               ['nbins']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=histogram) ['$2load_global.0', '$4load_attr.1']
    $12call_function_kw.5 = call $4load_attr.1(x, func=$4load_attr.1, args=[Var(x, tsfeatures.py:1142)], kws=[('bins', Var(nbins, tsfeatures.py:1142))], vararg=None) ['$12call_function_kw.5', '$4load_attr.1', 'nbins', 'x']
    $14unpack_sequence.8 = exhaust_iter(value=$12call_function_kw.5, count=2) ['$12call_function_kw.5', '$14unpack_sequence.8']
    $14unpack_sequence.6 = static_getitem(value=$14unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.6', '$14unpack_sequence.8']
    $14unpack_sequence.7 = static_getitem(value=$14unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>) ['$14unpack_sequence.7', '$14unpack_sequence.8']
    cnt = $14unpack_sequence.6               ['$14unpack_sequence.6', 'cnt']
    val = $14unpack_sequence.7               ['$14unpack_sequence.7', 'val']
    $24load_method.11 = getattr(value=cnt, attr=argmax) ['$24load_method.11', 'cnt']
    $26call_method.12 = call $24load_method.11(func=$24load_method.11, args=[], kws=(), vararg=None) ['$24load_method.11', '$26call_method.12']
    $28binary_subscr.13 = getitem(value=val, index=$26call_method.12, fn=<built-in function getitem>) ['$26call_method.12', '$28binary_subscr.13', 'val']
    $30return_value.14 = cast(value=$28binary_subscr.13) ['$28binary_subscr.13', '$30return_value.14']
    return $30return_value.14                ['$30return_value.14']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa1c617700>
DEBUG:numba.core.ssa:on stmt: x = arg(0, name=x)
DEBUG:numba.core.ssa:on stmt: nbins = arg(1, name=nbins)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=histogram)
DEBUG:numba.core.ssa:on stmt: $12call_function_kw.5 = call $4load_attr.1(x, func=$4load_attr.1, args=[Var(x, tsfeatures.py:1142)], kws=[('bins', Var(nbins, tsfeatures.py:1142))], vararg=None)
DEBUG:numba.core.ssa:on stmt: $14unpack_sequence.8 = exhaust_iter(value=$12call_function_kw.5, count=2)
DEBUG:numba.core.ssa:on stmt: $14unpack_sequence.6 = static_getitem(value=$14unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $14unpack_sequence.7 = static_getitem(value=$14unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: cnt = $14unpack_sequence.6
DEBUG:numba.core.ssa:on stmt: val = $14unpack_sequence.7
DEBUG:numba.core.ssa:on stmt: $24load_method.11 = getattr(value=cnt, attr=argmax)
DEBUG:numba.core.ssa:on stmt: $26call_method.12 = call $24load_method.11(func=$24load_method.11, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $28binary_subscr.13 = getitem(value=val, index=$26call_method.12, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $30return_value.14 = cast(value=$28binary_subscr.13)
DEBUG:numba.core.ssa:on stmt: return $30return_value.14
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$12call_function_kw.5': [<numba.core.ir.Assign object at 0x7faa1c60bee0>],
             '$14unpack_sequence.6': [<numba.core.ir.Assign object at 0x7faa1c6330a0>],
             '$14unpack_sequence.7': [<numba.core.ir.Assign object at 0x7faa1c6331c0>],
             '$14unpack_sequence.8': [<numba.core.ir.Assign object at 0x7faa1c60bd00>],
             '$24load_method.11': [<numba.core.ir.Assign object at 0x7faa1c633790>],
             '$26call_method.12': [<numba.core.ir.Assign object at 0x7faa1c633940>],
             '$28binary_subscr.13': [<numba.core.ir.Assign object at 0x7faa1c633a90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7faa1c60b6a0>],
             '$30return_value.14': [<numba.core.ir.Assign object at 0x7faa1c633c10>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7faa1c60b7f0>],
             'cnt': [<numba.core.ir.Assign object at 0x7faa1c6332b0>],
             'nbins': [<numba.core.ir.Assign object at 0x7faa1c6217f0>],
             'val': [<numba.core.ir.Assign object at 0x7faa1c6333d0>],
             'x': [<numba.core.ir.Assign object at 0x7fa9e03de9a0>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3749)
           2	LOAD_DEREF(arg=0, lineno=3749)
           4	STORE_FAST(arg=3, lineno=3749)
           6	LOAD_DEREF(arg=0, lineno=3750)
           8	UNARY_NEGATIVE(arg=None, lineno=3750)
          10	STORE_FAST(arg=4, lineno=3750)
          12	LOAD_GLOBAL(arg=0, lineno=3751)
          14	LOAD_METHOD(arg=1, lineno=3751)
          16	LOAD_FAST(arg=0, lineno=3751)
          18	CALL_METHOD(arg=1, lineno=3751)
          20	GET_ITER(arg=None, lineno=3751)
>         22	FOR_ITER(arg=36, lineno=3751)
          24	STORE_FAST(arg=5, lineno=3751)
          26	LOAD_FAST(arg=5, lineno=3752)
          28	LOAD_METHOD(arg=2, lineno=3752)
          30	CALL_METHOD(arg=0, lineno=3752)
          32	STORE_FAST(arg=6, lineno=3752)
          34	LOAD_FAST(arg=3, lineno=3753)
          36	LOAD_FAST(arg=6, lineno=3753)
          38	COMPARE_OP(arg=4, lineno=3753)
          40	POP_JUMP_IF_FALSE(arg=46, lineno=3753)
          42	LOAD_FAST(arg=6, lineno=3754)
          44	STORE_FAST(arg=3, lineno=3754)
>         46	LOAD_FAST(arg=4, lineno=3755)
          48	LOAD_FAST(arg=6, lineno=3755)
          50	COMPARE_OP(arg=0, lineno=3755)
          52	POP_JUMP_IF_FALSE(arg=22, lineno=3755)
          54	LOAD_FAST(arg=6, lineno=3756)
          56	STORE_FAST(arg=4, lineno=3756)
          58	JUMP_ABSOLUTE(arg=22, lineno=3756)
>         60	LOAD_GLOBAL(arg=0, lineno=3757)
          62	LOAD_METHOD(arg=3, lineno=3757)
          64	LOAD_FAST(arg=0, lineno=3757)
          66	LOAD_FAST(arg=1, lineno=3757)
          68	LOAD_FAST(arg=3, lineno=3757)
          70	LOAD_FAST(arg=4, lineno=3757)
          72	BUILD_TUPLE(arg=2, lineno=3757)
          74	CALL_METHOD(arg=3, lineno=3757)
          76	RETURN_VALUE(arg=None, lineno=3757)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3749)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=3749)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=STORE_FAST(arg=3, lineno=3749)
DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_DEREF(arg=0, lineno=3750)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=8, inst=UNARY_NEGATIVE(arg=None, lineno=3750)
DEBUG:numba.core.byteflow:stack ['$6load_deref.1']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=STORE_FAST(arg=4, lineno=3750)
DEBUG:numba.core.byteflow:stack ['$8unary_negative.2']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=3751)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_METHOD(arg=1, lineno=3751)
DEBUG:numba.core.byteflow:stack ['$12load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=3751)
DEBUG:numba.core.byteflow:stack ['$14load_method.4']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=CALL_METHOD(arg=1, lineno=3751)
DEBUG:numba.core.byteflow:stack ['$14load_method.4', '$a16.5']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=GET_ITER(arg=None, lineno=3751)
DEBUG:numba.core.byteflow:stack ['$18call_method.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=22, stack=('$20get_iter.7',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=22 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi22.0']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=FOR_ITER(arg=36, lineno=3751)
DEBUG:numba.core.byteflow:stack ['$phi22.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=24 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_GLOBAL(arg=0, lineno=3757)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=62, inst=LOAD_METHOD(arg=3, lineno=3757)
DEBUG:numba.core.byteflow:stack ['$60load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=3757)
DEBUG:numba.core.byteflow:stack ['$62load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=3757)
DEBUG:numba.core.byteflow:stack ['$62load_method.1', '$a64.2']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=3757)
DEBUG:numba.core.byteflow:stack ['$62load_method.1', '$a64.2', '$bins66.3']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=3757)
DEBUG:numba.core.byteflow:stack ['$62load_method.1', '$a64.2', '$bins66.3', '$bin_min68.4']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BUILD_TUPLE(arg=2, lineno=3757)
DEBUG:numba.core.byteflow:stack ['$62load_method.1', '$a64.2', '$bins66.3', '$bin_min68.4', '$bin_max70.5']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=CALL_METHOD(arg=3, lineno=3757)
DEBUG:numba.core.byteflow:stack ['$62load_method.1', '$a64.2', '$bins66.3', '$72build_tuple.6']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=3757)
DEBUG:numba.core.byteflow:stack ['$74call_method.7']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=24 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi24.0', '$phi24.1']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=5, lineno=3751)
DEBUG:numba.core.byteflow:stack ['$phi24.0', '$phi24.1']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=5, lineno=3752)
DEBUG:numba.core.byteflow:stack ['$phi24.0']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_METHOD(arg=2, lineno=3752)
DEBUG:numba.core.byteflow:stack ['$phi24.0', '$view26.2']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=CALL_METHOD(arg=0, lineno=3752)
DEBUG:numba.core.byteflow:stack ['$phi24.0', '$28load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=STORE_FAST(arg=6, lineno=3752)
DEBUG:numba.core.byteflow:stack ['$phi24.0', '$30call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=3753)
DEBUG:numba.core.byteflow:stack ['$phi24.0']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=6, lineno=3753)
DEBUG:numba.core.byteflow:stack ['$phi24.0', '$bin_min34.5']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=COMPARE_OP(arg=4, lineno=3753)
DEBUG:numba.core.byteflow:stack ['$phi24.0', '$bin_min34.5', '$v36.6']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=46, lineno=3753)
DEBUG:numba.core.byteflow:stack ['$phi24.0', '$38compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=42, stack=('$phi24.0',), blockstack=(), npush=0), Edge(pc=46, stack=('$phi24.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=42 nstack_initial=1), State(pc_initial=46 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi42.0']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=6, lineno=3754)
DEBUG:numba.core.byteflow:stack ['$phi42.0']
DEBUG:numba.core.byteflow:dispatch pc=44, inst=STORE_FAST(arg=3, lineno=3754)
DEBUG:numba.core.byteflow:stack ['$phi42.0', '$v42.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=46, stack=('$phi42.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=46 nstack_initial=1), State(pc_initial=46 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi46.0']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=4, lineno=3755)
DEBUG:numba.core.byteflow:stack ['$phi46.0']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_FAST(arg=6, lineno=3755)
DEBUG:numba.core.byteflow:stack ['$phi46.0', '$bin_max46.1']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=COMPARE_OP(arg=0, lineno=3755)
DEBUG:numba.core.byteflow:stack ['$phi46.0', '$bin_max46.1', '$v48.2']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=22, lineno=3755)
DEBUG:numba.core.byteflow:stack ['$phi46.0', '$50compare_op.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=54, stack=('$phi46.0',), blockstack=(), npush=0), Edge(pc=22, stack=('$phi46.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=46 nstack_initial=1), State(pc_initial=54 nstack_initial=1), State(pc_initial=22 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=54 nstack_initial=1), State(pc_initial=22 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi54.0']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=6, lineno=3756)
DEBUG:numba.core.byteflow:stack ['$phi54.0']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=STORE_FAST(arg=4, lineno=3756)
DEBUG:numba.core.byteflow:stack ['$phi54.0', '$v54.1']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=JUMP_ABSOLUTE(arg=22, lineno=3756)
DEBUG:numba.core.byteflow:stack ['$phi54.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=22, stack=('$phi54.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=22 nstack_initial=1), State(pc_initial=22 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=22 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=24 nstack_initial=2): {'$phi24.1'},
             State(pc_initial=42 nstack_initial=1): set(),
             State(pc_initial=46 nstack_initial=1): set(),
             State(pc_initial=54 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi22.0': State(pc_initial=0 nstack_initial=0),
 '$phi24.1': State(pc_initial=22 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi46.0', State(pc_initial=46 nstack_initial=1)),
                          ('$phi54.0', State(pc_initial=54 nstack_initial=1))},
             '$phi24.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi42.0': {('$phi24.0', State(pc_initial=24 nstack_initial=2))},
             '$phi46.0': {('$phi24.0', State(pc_initial=24 nstack_initial=2)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi54.0': {('$phi46.0', State(pc_initial=46 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=2)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi24.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=2)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi42.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi46.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi54.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi42.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi46.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi54.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi42.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi46.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi54.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi22.0': {('$20get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi24.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$20get_iter.7'},
             State(pc_initial=22 nstack_initial=1): {'$phi24.1': '$22for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_deref.1'}), (8, {'value': '$6load_deref.1', 'res': '$8unary_negative.2'}), (10, {'value': '$8unary_negative.2'}), (12, {'res': '$12load_global.3'}), (14, {'item': '$12load_global.3', 'res': '$14load_method.4'}), (16, {'res': '$a16.5'}), (18, {'func': '$14load_method.4', 'args': ['$a16.5'], 'res': '$18call_method.6'}), (20, {'value': '$18call_method.6', 'res': '$20get_iter.7'})), outgoing_phis={'$phi22.0': '$20get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.7',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi24.1': '$22for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 24: ('$phi22.0', '$22for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=24 nstack_initial=2):
AdaptBlockInfo(insts=((24, {'value': '$phi24.1'}), (26, {'res': '$view26.2'}), (28, {'item': '$view26.2', 'res': '$28load_method.3'}), (30, {'func': '$28load_method.3', 'args': [], 'res': '$30call_method.4'}), (32, {'value': '$30call_method.4'}), (34, {'res': '$bin_min34.5'}), (36, {'res': '$v36.6'}), (38, {'lhs': '$bin_min34.5', 'rhs': '$v36.6', 'res': '$38compare_op.7'}), (40, {'pred': '$38compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$phi24.0',), 46: ('$phi24.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=42 nstack_initial=1):
AdaptBlockInfo(insts=((42, {'res': '$v42.1'}), (44, {'value': '$v42.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: ('$phi42.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=46 nstack_initial=1):
AdaptBlockInfo(insts=((46, {'res': '$bin_max46.1'}), (48, {'res': '$v48.2'}), (50, {'lhs': '$bin_max46.1', 'rhs': '$v48.2', 'res': '$50compare_op.3'}), (52, {'pred': '$50compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ('$phi46.0',), 22: ('$phi46.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=54 nstack_initial=1):
AdaptBlockInfo(insts=((54, {'res': '$v54.1'}), (56, {'value': '$v54.1'}), (58, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi54.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_global.0'}), (62, {'item': '$60load_global.0', 'res': '$62load_method.1'}), (64, {'res': '$a64.2'}), (66, {'res': '$bins66.3'}), (68, {'res': '$bin_min68.4'}), (70, {'res': '$bin_max70.5'}), (72, {'items': ['$bin_min68.4', '$bin_max70.5'], 'res': '$72build_tuple.6'}), (74, {'func': '$62load_method.1', 'args': ['$a64.2', '$bins66.3', '$72build_tuple.6'], 'res': '$74call_method.7'}), (76, {'retval': '$74call_method.7', 'castval': '$76return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    bins = arg(1, name=bins)                 ['bins']
    range = arg(2, name=range)               ['range']
    bin_min = freevar(inf: inf)              ['bin_min']
    $6load_deref.1 = freevar(inf: inf)       ['$6load_deref.1']
    bin_max = unary(fn=<built-in function neg>, value=$6load_deref.1) ['$6load_deref.1', 'bin_max']
    $12load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$12load_global.3']
    $14load_method.4 = getattr(value=$12load_global.3, attr=nditer) ['$12load_global.3', '$14load_method.4']
    $18call_method.6 = call $14load_method.4(a, func=$14load_method.4, args=[Var(a, arraymath.py:3749)], kws=(), vararg=None) ['$14load_method.4', '$18call_method.6', 'a']
    $20get_iter.7 = getiter(value=$18call_method.6) ['$18call_method.6', '$20get_iter.7']
    $phi22.0 = $20get_iter.7                 ['$20get_iter.7', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi24.1 = $22for_iter.2                 ['$22for_iter.2', '$phi24.1']
    branch $22for_iter.3, 24, 60             ['$22for_iter.3']
label 24:
    view = $phi24.1                          ['$phi24.1', 'view']
    $28load_method.3 = getattr(value=view, attr=item) ['$28load_method.3', 'view']
    v = call $28load_method.3(func=$28load_method.3, args=[], kws=(), vararg=None) ['$28load_method.3', 'v']
    $38compare_op.7 = bin_min > v            ['$38compare_op.7', 'bin_min', 'v']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38compare_op.7, func=bool40, args=(Var($38compare_op.7, arraymath.py:3753),), kws=(), vararg=None) ['$38compare_op.7', '$40pred', 'bool40']
    branch $40pred, 42, 46                   ['$40pred']
label 42:
    bin_min = v                              ['bin_min', 'v']
    jump 46                                  []
label 46:
    $50compare_op.3 = bin_max < v            ['$50compare_op.3', 'bin_max', 'v']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50compare_op.3, func=bool52, args=(Var($50compare_op.3, arraymath.py:3755),), kws=(), vararg=None) ['$50compare_op.3', '$52pred', 'bool52']
    branch $52pred, 54, 22                   ['$52pred']
label 54:
    bin_max = v                              ['bin_max', 'v']
    jump 22                                  []
label 60:
    $60load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$60load_global.0']
    $62load_method.1 = getattr(value=$60load_global.0, attr=histogram) ['$60load_global.0', '$62load_method.1']
    $72build_tuple.6 = build_tuple(items=[Var(bin_min, arraymath.py:3749), Var(bin_max, arraymath.py:3750)]) ['$72build_tuple.6', 'bin_max', 'bin_min']
    $74call_method.7 = call $62load_method.1(a, bins, $72build_tuple.6, func=$62load_method.1, args=[Var(a, arraymath.py:3749), Var(bins, arraymath.py:3749), Var($72build_tuple.6, arraymath.py:3757)], kws=(), vararg=None) ['$62load_method.1', '$72build_tuple.6', '$74call_method.7', 'a', 'bins']
    $76return_value.8 = cast(value=$74call_method.7) ['$74call_method.7', '$76return_value.8']
    return $76return_value.8                 ['$76return_value.8']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e03e8a30>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: bins = arg(1, name=bins)
DEBUG:numba.core.ssa:on stmt: range = arg(2, name=range)
DEBUG:numba.core.ssa:on stmt: bin_min = freevar(inf: inf)
DEBUG:numba.core.ssa:on stmt: $6load_deref.1 = freevar(inf: inf)
DEBUG:numba.core.ssa:on stmt: bin_max = unary(fn=<built-in function neg>, value=$6load_deref.1)
DEBUG:numba.core.ssa:on stmt: $12load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $14load_method.4 = getattr(value=$12load_global.3, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $18call_method.6 = call $14load_method.4(a, func=$14load_method.4, args=[Var(a, arraymath.py:3749)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
DEBUG:numba.core.ssa:on stmt: $phi22.0 = $20get_iter.7
DEBUG:numba.core.ssa:on stmt: jump 22
DEBUG:numba.core.ssa:==== SSA block analysis pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e03e8a30>
DEBUG:numba.core.ssa:on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG:numba.core.ssa:on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG:numba.core.ssa:on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi24.1 = $22for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $22for_iter.3, 24, 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 24
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e03e8a30>
DEBUG:numba.core.ssa:on stmt: view = $phi24.1
DEBUG:numba.core.ssa:on stmt: $28load_method.3 = getattr(value=view, attr=item)
DEBUG:numba.core.ssa:on stmt: v = call $28load_method.3(func=$28load_method.3, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $38compare_op.7 = bin_min > v
DEBUG:numba.core.ssa:on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $40pred = call bool40($38compare_op.7, func=bool40, args=(Var($38compare_op.7, arraymath.py:3753),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $40pred, 42, 46
DEBUG:numba.core.ssa:==== SSA block analysis pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e03e8a30>
DEBUG:numba.core.ssa:on stmt: bin_min = v
DEBUG:numba.core.ssa:on stmt: jump 46
DEBUG:numba.core.ssa:==== SSA block analysis pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e03e8a30>
DEBUG:numba.core.ssa:on stmt: $50compare_op.3 = bin_max < v
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50compare_op.3, func=bool52, args=(Var($50compare_op.3, arraymath.py:3755),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 61
DEBUG:numba.core.ssa:==== SSA block analysis pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e03e8a30>
DEBUG:numba.core.ssa:on stmt: bin_max = v
DEBUG:numba.core.ssa:on stmt: jump 61
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e03e8a30>
DEBUG:numba.core.ssa:on stmt: $60load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_method.1 = getattr(value=$60load_global.0, attr=histogram)
DEBUG:numba.core.ssa:on stmt: $72build_tuple.6 = build_tuple(items=[Var(bin_min, arraymath.py:3749), Var(bin_max, arraymath.py:3750)])
DEBUG:numba.core.ssa:on stmt: $74call_method.7 = call $62load_method.1(a, bins, $72build_tuple.6, func=$62load_method.1, args=[Var(a, arraymath.py:3749), Var(bins, arraymath.py:3749), Var($72build_tuple.6, arraymath.py:3757)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $76return_value.8 = cast(value=$74call_method.7)
DEBUG:numba.core.ssa:on stmt: return $76return_value.8
DEBUG:numba.core.ssa:==== SSA block analysis pass on 61
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e03e8a30>
DEBUG:numba.core.ssa:on stmt: jump 22
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$12load_global.3': [<numba.core.ir.Assign object at 0x7faa1c5a99d0>],
             '$14load_method.4': [<numba.core.ir.Assign object at 0x7faa1c5a9790>],
             '$18call_method.6': [<numba.core.ir.Assign object at 0x7faa1c638ee0>],
             '$20get_iter.7': [<numba.core.ir.Assign object at 0x7faa1c638f10>],
             '$22for_iter.1': [<numba.core.ir.Assign object at 0x7faa1c6387f0>],
             '$22for_iter.2': [<numba.core.ir.Assign object at 0x7faa1c6389a0>],
             '$22for_iter.3': [<numba.core.ir.Assign object at 0x7faa1c6386d0>],
             '$28load_method.3': [<numba.core.ir.Assign object at 0x7faa1c62e310>],
             '$38compare_op.7': [<numba.core.ir.Assign object at 0x7faa1c60b310>],
             '$40pred': [<numba.core.ir.Assign object at 0x7faa1c6382b0>],
             '$50compare_op.3': [<numba.core.ir.Assign object at 0x7faa1c5a3280>],
             '$52pred': [<numba.core.ir.Assign object at 0x7faa1c5a3e20>],
             '$60load_global.0': [<numba.core.ir.Assign object at 0x7faa1c5a3e80>],
             '$62load_method.1': [<numba.core.ir.Assign object at 0x7faa1c5a35b0>],
             '$6load_deref.1': [<numba.core.ir.Assign object at 0x7faa1c4543d0>],
             '$72build_tuple.6': [<numba.core.ir.Assign object at 0x7faa1c590c70>],
             '$74call_method.7': [<numba.core.ir.Assign object at 0x7faa1c5909a0>],
             '$76return_value.8': [<numba.core.ir.Assign object at 0x7faa1c590d30>],
             '$phi22.0': [<numba.core.ir.Assign object at 0x7faa1c4540d0>],
             '$phi24.1': [<numba.core.ir.Assign object at 0x7faa1c638760>],
             'a': [<numba.core.ir.Assign object at 0x7faa1c4549d0>],
             'bin_max': [<numba.core.ir.Assign object at 0x7faa1c454250>,
                         <numba.core.ir.Assign object at 0x7faa1c5a39a0>],
             'bin_min': [<numba.core.ir.Assign object at 0x7faa1c454610>,
                         <numba.core.ir.Assign object at 0x7faa1c638bb0>],
             'bins': [<numba.core.ir.Assign object at 0x7faa1c4548b0>],
             'bool40': [<numba.core.ir.Assign object at 0x7faa1c638310>],
             'bool52': [<numba.core.ir.Assign object at 0x7faa1c5a3ee0>],
             'range': [<numba.core.ir.Assign object at 0x7faa1c454790>],
             'v': [<numba.core.ir.Assign object at 0x7faa1c62e7f0>],
             'view': [<numba.core.ir.Assign object at 0x7faa1c454d60>]})
DEBUG:numba.core.ssa:SSA violators {'bin_min', 'bin_max'}
DEBUG:numba.core.ssa:Fix SSA violator on var bin_min
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638190>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: bins = arg(1, name=bins)
DEBUG:numba.core.ssa:on stmt: range = arg(2, name=range)
DEBUG:numba.core.ssa:on stmt: bin_min = freevar(inf: inf)
DEBUG:numba.core.ssa:first assign: bin_min
DEBUG:numba.core.ssa:replaced with: bin_min = freevar(inf: inf)
DEBUG:numba.core.ssa:on stmt: $6load_deref.1 = freevar(inf: inf)
DEBUG:numba.core.ssa:on stmt: bin_max = unary(fn=<built-in function neg>, value=$6load_deref.1)
DEBUG:numba.core.ssa:on stmt: $12load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $14load_method.4 = getattr(value=$12load_global.3, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $18call_method.6 = call $14load_method.4(a, func=$14load_method.4, args=[Var(a, arraymath.py:3749)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
DEBUG:numba.core.ssa:on stmt: $phi22.0 = $20get_iter.7
DEBUG:numba.core.ssa:on stmt: jump 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638190>
DEBUG:numba.core.ssa:on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG:numba.core.ssa:on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG:numba.core.ssa:on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi24.1 = $22for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $22for_iter.3, 24, 60
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 24
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638190>
DEBUG:numba.core.ssa:on stmt: view = $phi24.1
DEBUG:numba.core.ssa:on stmt: $28load_method.3 = getattr(value=view, attr=item)
DEBUG:numba.core.ssa:on stmt: v = call $28load_method.3(func=$28load_method.3, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $38compare_op.7 = bin_min > v
DEBUG:numba.core.ssa:on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $40pred = call bool40($38compare_op.7, func=bool40, args=(Var($38compare_op.7, arraymath.py:3753),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $40pred, 42, 46
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638190>
DEBUG:numba.core.ssa:on stmt: bin_min = v
DEBUG:numba.core.ssa:replaced with: bin_min.1 = v
DEBUG:numba.core.ssa:on stmt: jump 46
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638190>
DEBUG:numba.core.ssa:on stmt: $50compare_op.3 = bin_max < v
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50compare_op.3, func=bool52, args=(Var($50compare_op.3, arraymath.py:3755),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 61
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638190>
DEBUG:numba.core.ssa:on stmt: bin_max = v
DEBUG:numba.core.ssa:on stmt: jump 61
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638190>
DEBUG:numba.core.ssa:on stmt: $60load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_method.1 = getattr(value=$60load_global.0, attr=histogram)
DEBUG:numba.core.ssa:on stmt: $72build_tuple.6 = build_tuple(items=[Var(bin_min, arraymath.py:3749), Var(bin_max, arraymath.py:3750)])
DEBUG:numba.core.ssa:on stmt: $74call_method.7 = call $62load_method.1(a, bins, $72build_tuple.6, func=$62load_method.1, args=[Var(a, arraymath.py:3749), Var(bins, arraymath.py:3749), Var($72build_tuple.6, arraymath.py:3757)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $76return_value.8 = cast(value=$74call_method.7)
DEBUG:numba.core.ssa:on stmt: return $76return_value.8
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 61
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638190>
DEBUG:numba.core.ssa:on stmt: jump 22
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa9e03e8cd0>],
             42: [<numba.core.ir.Assign object at 0x7fa9e03e8730>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e81f0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: bins = arg(1, name=bins)
DEBUG:numba.core.ssa:on stmt: range = arg(2, name=range)
DEBUG:numba.core.ssa:on stmt: bin_min = freevar(inf: inf)
DEBUG:numba.core.ssa:on stmt: $6load_deref.1 = freevar(inf: inf)
DEBUG:numba.core.ssa:on stmt: bin_max = unary(fn=<built-in function neg>, value=$6load_deref.1)
DEBUG:numba.core.ssa:on stmt: $12load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $14load_method.4 = getattr(value=$12load_global.3, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $18call_method.6 = call $14load_method.4(a, func=$14load_method.4, args=[Var(a, arraymath.py:3749)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
DEBUG:numba.core.ssa:on stmt: $phi22.0 = $20get_iter.7
DEBUG:numba.core.ssa:on stmt: jump 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e81f0>
DEBUG:numba.core.ssa:on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG:numba.core.ssa:on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG:numba.core.ssa:on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi24.1 = $22for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $22for_iter.3, 24, 60
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 24
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e81f0>
DEBUG:numba.core.ssa:on stmt: view = $phi24.1
DEBUG:numba.core.ssa:on stmt: $28load_method.3 = getattr(value=view, attr=item)
DEBUG:numba.core.ssa:on stmt: v = call $28load_method.3(func=$28load_method.3, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $38compare_op.7 = bin_min > v
DEBUG:numba.core.ssa:find_def var='bin_min' stmt=$38compare_op.7 = bin_min > v
DEBUG:numba.core.ssa:find_def_from_top label 24
DEBUG:numba.core.ssa:idom 22 from label 24
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:insert phi node bin_min.2 = phi(incoming_values=[], incoming_blocks=[]) at 22
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def bin_min = freevar(inf: inf)
DEBUG:numba.core.ssa:find_def_from_bottom label 61
DEBUG:numba.core.ssa:find_def_from_top label 61
DEBUG:numba.core.ssa:idom 46 from label 61
DEBUG:numba.core.ssa:find_def_from_bottom label 46
DEBUG:numba.core.ssa:find_def_from_top label 46
DEBUG:numba.core.ssa:insert phi node bin_min.3 = phi(incoming_values=[], incoming_blocks=[]) at 46
DEBUG:numba.core.ssa:find_def_from_bottom label 24
DEBUG:numba.core.ssa:find_def_from_top label 24
DEBUG:numba.core.ssa:idom 22 from label 24
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:incoming_def bin_min.2 = phi(incoming_values=[Var(bin_min, arraymath.py:3749)], incoming_blocks=[0])
DEBUG:numba.core.ssa:find_def_from_bottom label 42
DEBUG:numba.core.ssa:incoming_def bin_min.1 = v
DEBUG:numba.core.ssa:incoming_def bin_min.3 = phi(incoming_values=[Var(bin_min.2, arraymath.py:3751), Var(bin_min.1, arraymath.py:3754)], incoming_blocks=[24, 42])
DEBUG:numba.core.ssa:replaced with: $38compare_op.7 = bin_min.2 > v
DEBUG:numba.core.ssa:on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $40pred = call bool40($38compare_op.7, func=bool40, args=(Var($38compare_op.7, arraymath.py:3753),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $40pred, 42, 46
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e81f0>
DEBUG:numba.core.ssa:on stmt: bin_min.1 = v
DEBUG:numba.core.ssa:on stmt: jump 46
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e81f0>
DEBUG:numba.core.ssa:on stmt: $50compare_op.3 = bin_max < v
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50compare_op.3, func=bool52, args=(Var($50compare_op.3, arraymath.py:3755),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 61
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e81f0>
DEBUG:numba.core.ssa:on stmt: bin_max = v
DEBUG:numba.core.ssa:on stmt: jump 61
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e81f0>
DEBUG:numba.core.ssa:on stmt: $60load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_method.1 = getattr(value=$60load_global.0, attr=histogram)
DEBUG:numba.core.ssa:on stmt: $72build_tuple.6 = build_tuple(items=[Var(bin_min, arraymath.py:3749), Var(bin_max, arraymath.py:3750)])
DEBUG:numba.core.ssa:find_def var='bin_min' stmt=$72build_tuple.6 = build_tuple(items=[Var(bin_min, arraymath.py:3749), Var(bin_max, arraymath.py:3750)])
DEBUG:numba.core.ssa:find_def_from_top label 60
DEBUG:numba.core.ssa:idom 22 from label 60
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:replaced with: $72build_tuple.6 = build_tuple(items=[Var(bin_min.2, arraymath.py:3751), Var(bin_max, arraymath.py:3750)])
DEBUG:numba.core.ssa:on stmt: $74call_method.7 = call $62load_method.1(a, bins, $72build_tuple.6, func=$62load_method.1, args=[Var(a, arraymath.py:3749), Var(bins, arraymath.py:3749), Var($72build_tuple.6, arraymath.py:3757)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $76return_value.8 = cast(value=$74call_method.7)
DEBUG:numba.core.ssa:on stmt: return $76return_value.8
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 61
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e81f0>
DEBUG:numba.core.ssa:on stmt: jump 22
DEBUG:numba.core.ssa:Fix SSA violator on var bin_max
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638b80>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: bins = arg(1, name=bins)
DEBUG:numba.core.ssa:on stmt: range = arg(2, name=range)
DEBUG:numba.core.ssa:on stmt: bin_min = freevar(inf: inf)
DEBUG:numba.core.ssa:on stmt: $6load_deref.1 = freevar(inf: inf)
DEBUG:numba.core.ssa:on stmt: bin_max = unary(fn=<built-in function neg>, value=$6load_deref.1)
DEBUG:numba.core.ssa:first assign: bin_max
DEBUG:numba.core.ssa:replaced with: bin_max = unary(fn=<built-in function neg>, value=$6load_deref.1)
DEBUG:numba.core.ssa:on stmt: $12load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $14load_method.4 = getattr(value=$12load_global.3, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $18call_method.6 = call $14load_method.4(a, func=$14load_method.4, args=[Var(a, arraymath.py:3749)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
DEBUG:numba.core.ssa:on stmt: $phi22.0 = $20get_iter.7
DEBUG:numba.core.ssa:on stmt: jump 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638b80>
DEBUG:numba.core.ssa:on stmt: bin_min.2 = phi(incoming_values=[Var(bin_min, arraymath.py:3749), Var(bin_min.3, arraymath.py:3751)], incoming_blocks=[0, 61])
DEBUG:numba.core.ssa:on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG:numba.core.ssa:on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG:numba.core.ssa:on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi24.1 = $22for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $22for_iter.3, 24, 60
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 24
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638b80>
DEBUG:numba.core.ssa:on stmt: view = $phi24.1
DEBUG:numba.core.ssa:on stmt: $28load_method.3 = getattr(value=view, attr=item)
DEBUG:numba.core.ssa:on stmt: v = call $28load_method.3(func=$28load_method.3, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $38compare_op.7 = bin_min.2 > v
DEBUG:numba.core.ssa:on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $40pred = call bool40($38compare_op.7, func=bool40, args=(Var($38compare_op.7, arraymath.py:3753),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $40pred, 42, 46
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638b80>
DEBUG:numba.core.ssa:on stmt: bin_min.1 = v
DEBUG:numba.core.ssa:on stmt: jump 46
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638b80>
DEBUG:numba.core.ssa:on stmt: bin_min.3 = phi(incoming_values=[Var(bin_min.2, arraymath.py:3751), Var(bin_min.1, arraymath.py:3754)], incoming_blocks=[24, 42])
DEBUG:numba.core.ssa:on stmt: $50compare_op.3 = bin_max < v
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50compare_op.3, func=bool52, args=(Var($50compare_op.3, arraymath.py:3755),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 61
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638b80>
DEBUG:numba.core.ssa:on stmt: bin_max = v
DEBUG:numba.core.ssa:replaced with: bin_max.1 = v
DEBUG:numba.core.ssa:on stmt: jump 61
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638b80>
DEBUG:numba.core.ssa:on stmt: $60load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_method.1 = getattr(value=$60load_global.0, attr=histogram)
DEBUG:numba.core.ssa:on stmt: $72build_tuple.6 = build_tuple(items=[Var(bin_min.2, arraymath.py:3751), Var(bin_max, arraymath.py:3750)])
DEBUG:numba.core.ssa:on stmt: $74call_method.7 = call $62load_method.1(a, bins, $72build_tuple.6, func=$62load_method.1, args=[Var(a, arraymath.py:3749), Var(bins, arraymath.py:3749), Var($72build_tuple.6, arraymath.py:3757)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $76return_value.8 = cast(value=$74call_method.7)
DEBUG:numba.core.ssa:on stmt: return $76return_value.8
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 61
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa1c638b80>
DEBUG:numba.core.ssa:on stmt: jump 22
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa9e03e8250>],
             54: [<numba.core.ir.Assign object at 0x7fa9e03e8910>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e80a0>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: bins = arg(1, name=bins)
DEBUG:numba.core.ssa:on stmt: range = arg(2, name=range)
DEBUG:numba.core.ssa:on stmt: bin_min = freevar(inf: inf)
DEBUG:numba.core.ssa:on stmt: $6load_deref.1 = freevar(inf: inf)
DEBUG:numba.core.ssa:on stmt: bin_max = unary(fn=<built-in function neg>, value=$6load_deref.1)
DEBUG:numba.core.ssa:on stmt: $12load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $14load_method.4 = getattr(value=$12load_global.3, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $18call_method.6 = call $14load_method.4(a, func=$14load_method.4, args=[Var(a, arraymath.py:3749)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $20get_iter.7 = getiter(value=$18call_method.6)
DEBUG:numba.core.ssa:on stmt: $phi22.0 = $20get_iter.7
DEBUG:numba.core.ssa:on stmt: jump 22
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e80a0>
DEBUG:numba.core.ssa:on stmt: bin_min.2 = phi(incoming_values=[Var(bin_min, arraymath.py:3749), Var(bin_min.3, arraymath.py:3751)], incoming_blocks=[0, 61])
DEBUG:numba.core.ssa:on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG:numba.core.ssa:on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG:numba.core.ssa:on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi24.1 = $22for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $22for_iter.3, 24, 60
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 24
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e80a0>
DEBUG:numba.core.ssa:on stmt: view = $phi24.1
DEBUG:numba.core.ssa:on stmt: $28load_method.3 = getattr(value=view, attr=item)
DEBUG:numba.core.ssa:on stmt: v = call $28load_method.3(func=$28load_method.3, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $38compare_op.7 = bin_min.2 > v
DEBUG:numba.core.ssa:on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $40pred = call bool40($38compare_op.7, func=bool40, args=(Var($38compare_op.7, arraymath.py:3753),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $40pred, 42, 46
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e80a0>
DEBUG:numba.core.ssa:on stmt: bin_min.1 = v
DEBUG:numba.core.ssa:on stmt: jump 46
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 46
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e80a0>
DEBUG:numba.core.ssa:on stmt: bin_min.3 = phi(incoming_values=[Var(bin_min.2, arraymath.py:3751), Var(bin_min.1, arraymath.py:3754)], incoming_blocks=[24, 42])
DEBUG:numba.core.ssa:on stmt: $50compare_op.3 = bin_max < v
DEBUG:numba.core.ssa:find_def var='bin_max' stmt=$50compare_op.3 = bin_max < v
DEBUG:numba.core.ssa:find_def_from_top label 46
DEBUG:numba.core.ssa:idom 24 from label 46
DEBUG:numba.core.ssa:find_def_from_bottom label 24
DEBUG:numba.core.ssa:find_def_from_top label 24
DEBUG:numba.core.ssa:idom 22 from label 24
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:find_def_from_top label 22
DEBUG:numba.core.ssa:insert phi node bin_max.2 = phi(incoming_values=[], incoming_blocks=[]) at 22
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:incoming_def bin_max = unary(fn=<built-in function neg>, value=$6load_deref.1)
DEBUG:numba.core.ssa:find_def_from_bottom label 61
DEBUG:numba.core.ssa:find_def_from_top label 61
DEBUG:numba.core.ssa:insert phi node bin_max.3 = phi(incoming_values=[], incoming_blocks=[]) at 61
DEBUG:numba.core.ssa:find_def_from_bottom label 54
DEBUG:numba.core.ssa:incoming_def bin_max.1 = v
DEBUG:numba.core.ssa:find_def_from_bottom label 46
DEBUG:numba.core.ssa:find_def_from_top label 46
DEBUG:numba.core.ssa:idom 24 from label 46
DEBUG:numba.core.ssa:find_def_from_bottom label 24
DEBUG:numba.core.ssa:find_def_from_top label 24
DEBUG:numba.core.ssa:idom 22 from label 24
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:incoming_def bin_max.2 = phi(incoming_values=[Var(bin_max, arraymath.py:3750)], incoming_blocks=[0])
DEBUG:numba.core.ssa:incoming_def bin_max.3 = phi(incoming_values=[Var(bin_max.1, arraymath.py:3756), Var(bin_max.2, arraymath.py:3755)], incoming_blocks=[54, 46])
DEBUG:numba.core.ssa:replaced with: $50compare_op.3 = bin_max.2 < v
DEBUG:numba.core.ssa:on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $52pred = call bool52($50compare_op.3, func=bool52, args=(Var($50compare_op.3, arraymath.py:3755),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $52pred, 54, 61
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e80a0>
DEBUG:numba.core.ssa:on stmt: bin_max.1 = v
DEBUG:numba.core.ssa:on stmt: jump 61
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e80a0>
DEBUG:numba.core.ssa:on stmt: $60load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $62load_method.1 = getattr(value=$60load_global.0, attr=histogram)
DEBUG:numba.core.ssa:on stmt: $72build_tuple.6 = build_tuple(items=[Var(bin_min.2, arraymath.py:3751), Var(bin_max, arraymath.py:3750)])
DEBUG:numba.core.ssa:find_def var='bin_max' stmt=$72build_tuple.6 = build_tuple(items=[Var(bin_min.2, arraymath.py:3751), Var(bin_max, arraymath.py:3750)])
DEBUG:numba.core.ssa:find_def_from_top label 60
DEBUG:numba.core.ssa:idom 22 from label 60
DEBUG:numba.core.ssa:find_def_from_bottom label 22
DEBUG:numba.core.ssa:replaced with: $72build_tuple.6 = build_tuple(items=[Var(bin_min.2, arraymath.py:3751), Var(bin_max.2, arraymath.py:3755)])
DEBUG:numba.core.ssa:on stmt: $74call_method.7 = call $62load_method.1(a, bins, $72build_tuple.6, func=$62load_method.1, args=[Var(a, arraymath.py:3749), Var(bins, arraymath.py:3749), Var($72build_tuple.6, arraymath.py:3757)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $76return_value.8 = cast(value=$74call_method.7)
DEBUG:numba.core.ssa:on stmt: return $76return_value.8
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 61
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e03e80a0>
DEBUG:numba.core.ssa:on stmt: jump 22
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3761)
           2	LOAD_FAST(arg=1, lineno=3761)
           4	LOAD_CONST(arg=1, lineno=3761)
           6	COMPARE_OP(arg=1, lineno=3761)
           8	POP_JUMP_IF_FALSE(arg=18, lineno=3761)
          10	LOAD_GLOBAL(arg=0, lineno=3762)
          12	LOAD_CONST(arg=2, lineno=3762)
          14	CALL_FUNCTION(arg=1, lineno=3762)
          16	RAISE_VARARGS(arg=1, lineno=3762)
>         18	LOAD_FAST(arg=2, lineno=3764)
          20	UNPACK_SEQUENCE(arg=2, lineno=3764)
          22	STORE_FAST(arg=3, lineno=3764)
          24	STORE_FAST(arg=4, lineno=3764)
          26	LOAD_FAST(arg=3, lineno=3765)
          28	LOAD_FAST(arg=4, lineno=3765)
          30	COMPARE_OP(arg=1, lineno=3765)
          32	POP_JUMP_IF_TRUE(arg=42, lineno=3765)
          34	LOAD_GLOBAL(arg=0, lineno=3766)
          36	LOAD_CONST(arg=3, lineno=3766)
          38	CALL_FUNCTION(arg=1, lineno=3766)
          40	RAISE_VARARGS(arg=1, lineno=3766)
>         42	LOAD_GLOBAL(arg=1, lineno=3769)
          44	LOAD_METHOD(arg=2, lineno=3769)
          46	LOAD_FAST(arg=1, lineno=3769)
          48	LOAD_GLOBAL(arg=1, lineno=3769)
          50	LOAD_ATTR(arg=3, lineno=3769)
          52	CALL_METHOD(arg=2, lineno=3769)
          54	STORE_FAST(arg=5, lineno=3769)
          56	LOAD_FAST(arg=4, lineno=3770)
          58	LOAD_FAST(arg=3, lineno=3770)
          60	COMPARE_OP(arg=4, lineno=3770)
          62	POP_JUMP_IF_FALSE(arg=192, lineno=3770)
          64	LOAD_FAST(arg=1, lineno=3771)
          66	LOAD_FAST(arg=4, lineno=3771)
          68	LOAD_FAST(arg=3, lineno=3771)
          70	BINARY_SUBTRACT(arg=None, lineno=3771)
          72	BINARY_TRUE_DIVIDE(arg=None, lineno=3771)
          74	STORE_FAST(arg=6, lineno=3771)
          76	LOAD_GLOBAL(arg=1, lineno=3772)
          78	LOAD_METHOD(arg=4, lineno=3772)
          80	LOAD_FAST(arg=0, lineno=3772)
          82	CALL_METHOD(arg=1, lineno=3772)
          84	GET_ITER(arg=None, lineno=3772)
>         86	FOR_ITER(arg=104, lineno=3772)
          88	STORE_FAST(arg=7, lineno=3772)
          90	LOAD_FAST(arg=7, lineno=3773)
          92	LOAD_METHOD(arg=5, lineno=3773)
          94	CALL_METHOD(arg=0, lineno=3773)
          96	STORE_FAST(arg=8, lineno=3773)
          98	LOAD_GLOBAL(arg=6, lineno=3774)
         100	LOAD_METHOD(arg=7, lineno=3774)
         102	LOAD_FAST(arg=8, lineno=3774)
         104	LOAD_FAST(arg=3, lineno=3774)
         106	BINARY_SUBTRACT(arg=None, lineno=3774)
         108	LOAD_FAST(arg=6, lineno=3774)
         110	BINARY_MULTIPLY(arg=None, lineno=3774)
         112	CALL_METHOD(arg=1, lineno=3774)
         114	STORE_FAST(arg=9, lineno=3774)
         116	LOAD_CONST(arg=1, lineno=3775)
         118	LOAD_FAST(arg=9, lineno=3775)
         120	DUP_TOP(arg=None, lineno=3775)
         122	ROT_THREE(arg=None, lineno=3775)
         124	COMPARE_OP(arg=1, lineno=3775)
         126	POP_JUMP_IF_FALSE(arg=136, lineno=3775)
         128	LOAD_FAST(arg=1, lineno=3775)
         130	COMPARE_OP(arg=0, lineno=3775)
         132	POP_JUMP_IF_FALSE(arg=162, lineno=3775)
         134	JUMP_FORWARD(arg=4, lineno=3775)
>        136	POP_TOP(arg=None, lineno=3775)
         138	JUMP_FORWARD(arg=22, lineno=3775)
>        140	LOAD_FAST(arg=5, lineno=3776)
         142	LOAD_GLOBAL(arg=8, lineno=3776)
         144	LOAD_FAST(arg=9, lineno=3776)
         146	CALL_FUNCTION(arg=1, lineno=3776)
         148	DUP_TOP_TWO(arg=None, lineno=3776)
         150	BINARY_SUBSCR(arg=None, lineno=3776)
         152	LOAD_CONST(arg=4, lineno=3776)
         154	INPLACE_ADD(arg=None, lineno=3776)
         156	ROT_THREE(arg=None, lineno=3776)
         158	STORE_SUBSCR(arg=None, lineno=3776)
         160	JUMP_ABSOLUTE(arg=86, lineno=3776)
>        162	LOAD_FAST(arg=8, lineno=3777)
         164	LOAD_FAST(arg=4, lineno=3777)
         166	COMPARE_OP(arg=2, lineno=3777)
         168	POP_JUMP_IF_FALSE(arg=86, lineno=3777)
         170	LOAD_FAST(arg=5, lineno=3778)
         172	LOAD_FAST(arg=1, lineno=3778)
         174	LOAD_CONST(arg=4, lineno=3778)
         176	BINARY_SUBTRACT(arg=None, lineno=3778)
         178	DUP_TOP_TWO(arg=None, lineno=3778)
         180	BINARY_SUBSCR(arg=None, lineno=3778)
         182	LOAD_CONST(arg=4, lineno=3778)
         184	INPLACE_ADD(arg=None, lineno=3778)
         186	ROT_THREE(arg=None, lineno=3778)
         188	STORE_SUBSCR(arg=None, lineno=3778)
         190	JUMP_ABSOLUTE(arg=86, lineno=3778)
>        192	LOAD_GLOBAL(arg=1, lineno=3780)
         194	LOAD_METHOD(arg=9, lineno=3780)
         196	LOAD_FAST(arg=3, lineno=3780)
         198	LOAD_FAST(arg=4, lineno=3780)
         200	LOAD_FAST(arg=1, lineno=3780)
         202	LOAD_CONST(arg=4, lineno=3780)
         204	BINARY_ADD(arg=None, lineno=3780)
         206	CALL_METHOD(arg=3, lineno=3780)
         208	STORE_FAST(arg=10, lineno=3780)
         210	LOAD_FAST(arg=5, lineno=3781)
         212	LOAD_FAST(arg=10, lineno=3781)
         214	BUILD_TUPLE(arg=2, lineno=3781)
         216	RETURN_VALUE(arg=None, lineno=3781)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3761)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=3761)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=3761)
DEBUG:numba.core.byteflow:stack ['$bins2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=COMPARE_OP(arg=1, lineno=3761)
DEBUG:numba.core.byteflow:stack ['$bins2.0', '$const4.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=18, lineno=3761)
DEBUG:numba.core.byteflow:stack ['$6compare_op.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=3762)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=3762)
DEBUG:numba.core.byteflow:stack ['$10load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=3762)
DEBUG:numba.core.byteflow:stack ['$10load_global.0', '$const12.1']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=RAISE_VARARGS(arg=1, lineno=3762)
DEBUG:numba.core.byteflow:stack ['$14call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=18 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=3764)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=UNPACK_SEQUENCE(arg=2, lineno=3764)
DEBUG:numba.core.byteflow:stack ['$range18.0']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=STORE_FAST(arg=3, lineno=3764)
DEBUG:numba.core.byteflow:stack ['$20unpack_sequence.2', '$20unpack_sequence.1']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=4, lineno=3764)
DEBUG:numba.core.byteflow:stack ['$20unpack_sequence.2']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=3765)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=3765)
DEBUG:numba.core.byteflow:stack ['$bin_min26.4']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=COMPARE_OP(arg=1, lineno=3765)
DEBUG:numba.core.byteflow:stack ['$bin_min26.4', '$bin_max28.5']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=POP_JUMP_IF_TRUE(arg=42, lineno=3765)
DEBUG:numba.core.byteflow:stack ['$30compare_op.6']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_GLOBAL(arg=0, lineno=3766)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=3766)
DEBUG:numba.core.byteflow:stack ['$34load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=3766)
DEBUG:numba.core.byteflow:stack ['$34load_global.0', '$const36.1']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=RAISE_VARARGS(arg=1, lineno=3766)
DEBUG:numba.core.byteflow:stack ['$38call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=42 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_GLOBAL(arg=1, lineno=3769)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_METHOD(arg=2, lineno=3769)
DEBUG:numba.core.byteflow:stack ['$42load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_FAST(arg=1, lineno=3769)
DEBUG:numba.core.byteflow:stack ['$44load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_GLOBAL(arg=1, lineno=3769)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$bins46.2']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_ATTR(arg=3, lineno=3769)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$bins46.2', '$48load_global.3']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=CALL_METHOD(arg=2, lineno=3769)
DEBUG:numba.core.byteflow:stack ['$44load_method.1', '$bins46.2', '$50load_attr.4']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=STORE_FAST(arg=5, lineno=3769)
DEBUG:numba.core.byteflow:stack ['$52call_method.5']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_FAST(arg=4, lineno=3770)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=3, lineno=3770)
DEBUG:numba.core.byteflow:stack ['$bin_max56.6']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=COMPARE_OP(arg=4, lineno=3770)
DEBUG:numba.core.byteflow:stack ['$bin_max56.6', '$bin_min58.7']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=192, lineno=3770)
DEBUG:numba.core.byteflow:stack ['$60compare_op.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=192, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=3771)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=3771)
DEBUG:numba.core.byteflow:stack ['$bins64.0']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=3771)
DEBUG:numba.core.byteflow:stack ['$bins64.0', '$bin_max66.1']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=BINARY_SUBTRACT(arg=None, lineno=3771)
DEBUG:numba.core.byteflow:stack ['$bins64.0', '$bin_max66.1', '$bin_min68.2']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=3771)
DEBUG:numba.core.byteflow:stack ['$bins64.0', '$70binary_subtract.3']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=STORE_FAST(arg=6, lineno=3771)
DEBUG:numba.core.byteflow:stack ['$72binary_true_divide.4']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_GLOBAL(arg=1, lineno=3772)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_METHOD(arg=4, lineno=3772)
DEBUG:numba.core.byteflow:stack ['$76load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=3772)
DEBUG:numba.core.byteflow:stack ['$78load_method.6']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=CALL_METHOD(arg=1, lineno=3772)
DEBUG:numba.core.byteflow:stack ['$78load_method.6', '$a80.7']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=GET_ITER(arg=None, lineno=3772)
DEBUG:numba.core.byteflow:stack ['$82call_method.8']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=86, stack=('$84get_iter.9',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=86 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=192, inst=LOAD_GLOBAL(arg=1, lineno=3780)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=194, inst=LOAD_METHOD(arg=9, lineno=3780)
DEBUG:numba.core.byteflow:stack ['$192load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=196, inst=LOAD_FAST(arg=3, lineno=3780)
DEBUG:numba.core.byteflow:stack ['$194load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=198, inst=LOAD_FAST(arg=4, lineno=3780)
DEBUG:numba.core.byteflow:stack ['$194load_method.1', '$bin_min196.2']
DEBUG:numba.core.byteflow:dispatch pc=200, inst=LOAD_FAST(arg=1, lineno=3780)
DEBUG:numba.core.byteflow:stack ['$194load_method.1', '$bin_min196.2', '$bin_max198.3']
DEBUG:numba.core.byteflow:dispatch pc=202, inst=LOAD_CONST(arg=4, lineno=3780)
DEBUG:numba.core.byteflow:stack ['$194load_method.1', '$bin_min196.2', '$bin_max198.3', '$bins200.4']
DEBUG:numba.core.byteflow:dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=3780)
DEBUG:numba.core.byteflow:stack ['$194load_method.1', '$bin_min196.2', '$bin_max198.3', '$bins200.4', '$const202.5']
DEBUG:numba.core.byteflow:dispatch pc=206, inst=CALL_METHOD(arg=3, lineno=3780)
DEBUG:numba.core.byteflow:stack ['$194load_method.1', '$bin_min196.2', '$bin_max198.3', '$204binary_add.6']
DEBUG:numba.core.byteflow:dispatch pc=208, inst=STORE_FAST(arg=10, lineno=3780)
DEBUG:numba.core.byteflow:stack ['$206call_method.7']
DEBUG:numba.core.byteflow:dispatch pc=210, inst=LOAD_FAST(arg=5, lineno=3781)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=212, inst=LOAD_FAST(arg=10, lineno=3781)
DEBUG:numba.core.byteflow:stack ['$hist210.8']
DEBUG:numba.core.byteflow:dispatch pc=214, inst=BUILD_TUPLE(arg=2, lineno=3781)
DEBUG:numba.core.byteflow:stack ['$hist210.8', '$bins_array212.9']
DEBUG:numba.core.byteflow:dispatch pc=216, inst=RETURN_VALUE(arg=None, lineno=3781)
DEBUG:numba.core.byteflow:stack ['$214build_tuple.10']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=86 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi86.0']
DEBUG:numba.core.byteflow:dispatch pc=86, inst=FOR_ITER(arg=104, lineno=3772)
DEBUG:numba.core.byteflow:stack ['$phi86.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=('$phi86.0', '$86for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=88 nstack_initial=2)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=88 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi88.0', '$phi88.1']
DEBUG:numba.core.byteflow:dispatch pc=88, inst=STORE_FAST(arg=7, lineno=3772)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$phi88.1']
DEBUG:numba.core.byteflow:dispatch pc=90, inst=LOAD_FAST(arg=7, lineno=3773)
DEBUG:numba.core.byteflow:stack ['$phi88.0']
DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_METHOD(arg=5, lineno=3773)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$view90.2']
DEBUG:numba.core.byteflow:dispatch pc=94, inst=CALL_METHOD(arg=0, lineno=3773)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$92load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=96, inst=STORE_FAST(arg=8, lineno=3773)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$94call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_GLOBAL(arg=6, lineno=3774)
DEBUG:numba.core.byteflow:stack ['$phi88.0']
DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_METHOD(arg=7, lineno=3774)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$98load_global.5']
DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=8, lineno=3774)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$100load_method.6']
DEBUG:numba.core.byteflow:dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=3774)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$100load_method.6', '$v102.7']
DEBUG:numba.core.byteflow:dispatch pc=106, inst=BINARY_SUBTRACT(arg=None, lineno=3774)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$100load_method.6', '$v102.7', '$bin_min104.8']
DEBUG:numba.core.byteflow:dispatch pc=108, inst=LOAD_FAST(arg=6, lineno=3774)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$100load_method.6', '$106binary_subtract.9']
DEBUG:numba.core.byteflow:dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=3774)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$100load_method.6', '$106binary_subtract.9', '$bin_ratio108.10']
DEBUG:numba.core.byteflow:dispatch pc=112, inst=CALL_METHOD(arg=1, lineno=3774)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$100load_method.6', '$110binary_multiply.11']
DEBUG:numba.core.byteflow:dispatch pc=114, inst=STORE_FAST(arg=9, lineno=3774)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$112call_method.12']
DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_CONST(arg=1, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi88.0']
DEBUG:numba.core.byteflow:dispatch pc=118, inst=LOAD_FAST(arg=9, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$const116.13']
DEBUG:numba.core.byteflow:dispatch pc=120, inst=DUP_TOP(arg=None, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$const116.13', '$b118.14']
DEBUG:numba.core.byteflow:dispatch pc=122, inst=ROT_THREE(arg=None, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$const116.13', '$b118.14', '$120dup_top.15']
DEBUG:numba.core.byteflow:dispatch pc=124, inst=COMPARE_OP(arg=1, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$120dup_top.15', '$const116.13', '$b118.14']
DEBUG:numba.core.byteflow:dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=136, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi88.0', '$120dup_top.15', '$124compare_op.16']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=128, stack=('$phi88.0', '$120dup_top.15'), blockstack=(), npush=0), Edge(pc=136, stack=('$phi88.0', '$120dup_top.15'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=128 nstack_initial=2), State(pc_initial=136 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi128.0', '$phi128.1']
DEBUG:numba.core.byteflow:dispatch pc=128, inst=LOAD_FAST(arg=1, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi128.0', '$phi128.1']
DEBUG:numba.core.byteflow:dispatch pc=130, inst=COMPARE_OP(arg=0, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi128.0', '$phi128.1', '$bins128.2']
DEBUG:numba.core.byteflow:dispatch pc=132, inst=POP_JUMP_IF_FALSE(arg=162, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi128.0', '$130compare_op.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=134, stack=('$phi128.0',), blockstack=(), npush=0), Edge(pc=162, stack=('$phi128.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=136 nstack_initial=2), State(pc_initial=134 nstack_initial=1), State(pc_initial=162 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi136.0', '$phi136.1']
DEBUG:numba.core.byteflow:dispatch pc=136, inst=POP_TOP(arg=None, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi136.0', '$phi136.1']
DEBUG:numba.core.byteflow:dispatch pc=138, inst=JUMP_FORWARD(arg=22, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi136.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=162, stack=('$phi136.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=134 nstack_initial=1), State(pc_initial=162 nstack_initial=1), State(pc_initial=162 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi134.0']
DEBUG:numba.core.byteflow:dispatch pc=134, inst=JUMP_FORWARD(arg=4, lineno=3775)
DEBUG:numba.core.byteflow:stack ['$phi134.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=140, stack=('$phi134.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=162 nstack_initial=1), State(pc_initial=162 nstack_initial=1), State(pc_initial=140 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi162.0']
DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_FAST(arg=8, lineno=3777)
DEBUG:numba.core.byteflow:stack ['$phi162.0']
DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_FAST(arg=4, lineno=3777)
DEBUG:numba.core.byteflow:stack ['$phi162.0', '$v162.1']
DEBUG:numba.core.byteflow:dispatch pc=166, inst=COMPARE_OP(arg=2, lineno=3777)
DEBUG:numba.core.byteflow:stack ['$phi162.0', '$v162.1', '$bin_max164.2']
DEBUG:numba.core.byteflow:dispatch pc=168, inst=POP_JUMP_IF_FALSE(arg=86, lineno=3777)
DEBUG:numba.core.byteflow:stack ['$phi162.0', '$166compare_op.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=170, stack=('$phi162.0',), blockstack=(), npush=0), Edge(pc=86, stack=('$phi162.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=162 nstack_initial=1), State(pc_initial=140 nstack_initial=1), State(pc_initial=170 nstack_initial=1), State(pc_initial=86 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=140 nstack_initial=1), State(pc_initial=170 nstack_initial=1), State(pc_initial=86 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi140.0']
DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_FAST(arg=5, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0']
DEBUG:numba.core.byteflow:dispatch pc=142, inst=LOAD_GLOBAL(arg=8, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0', '$hist140.1']
DEBUG:numba.core.byteflow:dispatch pc=144, inst=LOAD_FAST(arg=9, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0', '$hist140.1', '$142load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0', '$hist140.1', '$142load_global.2', '$b144.3']
DEBUG:numba.core.byteflow:dispatch pc=148, inst=DUP_TOP_TWO(arg=None, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0', '$hist140.1', '$146call_function.4']
DEBUG:numba.core.byteflow:dispatch pc=150, inst=BINARY_SUBSCR(arg=None, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0', '$hist140.1', '$146call_function.4', '$148dup_top_two.5', '$148dup_top_two.6']
DEBUG:numba.core.byteflow:dispatch pc=152, inst=LOAD_CONST(arg=4, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0', '$hist140.1', '$146call_function.4', '$150binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=154, inst=INPLACE_ADD(arg=None, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0', '$hist140.1', '$146call_function.4', '$150binary_subscr.7', '$const152.8']
DEBUG:numba.core.byteflow:dispatch pc=156, inst=ROT_THREE(arg=None, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0', '$hist140.1', '$146call_function.4', '$154inplace_add.9']
DEBUG:numba.core.byteflow:dispatch pc=158, inst=STORE_SUBSCR(arg=None, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0', '$154inplace_add.9', '$hist140.1', '$146call_function.4']
DEBUG:numba.core.byteflow:dispatch pc=160, inst=JUMP_ABSOLUTE(arg=86, lineno=3776)
DEBUG:numba.core.byteflow:stack ['$phi140.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=86, stack=('$phi140.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=170 nstack_initial=1), State(pc_initial=86 nstack_initial=1), State(pc_initial=86 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi170.0']
DEBUG:numba.core.byteflow:dispatch pc=170, inst=LOAD_FAST(arg=5, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0']
DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_FAST(arg=1, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0', '$hist170.1']
DEBUG:numba.core.byteflow:dispatch pc=174, inst=LOAD_CONST(arg=4, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0', '$hist170.1', '$bins172.2']
DEBUG:numba.core.byteflow:dispatch pc=176, inst=BINARY_SUBTRACT(arg=None, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0', '$hist170.1', '$bins172.2', '$const174.3']
DEBUG:numba.core.byteflow:dispatch pc=178, inst=DUP_TOP_TWO(arg=None, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0', '$hist170.1', '$176binary_subtract.4']
DEBUG:numba.core.byteflow:dispatch pc=180, inst=BINARY_SUBSCR(arg=None, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0', '$hist170.1', '$176binary_subtract.4', '$178dup_top_two.5', '$178dup_top_two.6']
DEBUG:numba.core.byteflow:dispatch pc=182, inst=LOAD_CONST(arg=4, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0', '$hist170.1', '$176binary_subtract.4', '$180binary_subscr.7']
DEBUG:numba.core.byteflow:dispatch pc=184, inst=INPLACE_ADD(arg=None, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0', '$hist170.1', '$176binary_subtract.4', '$180binary_subscr.7', '$const182.8']
DEBUG:numba.core.byteflow:dispatch pc=186, inst=ROT_THREE(arg=None, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0', '$hist170.1', '$176binary_subtract.4', '$184inplace_add.9']
DEBUG:numba.core.byteflow:dispatch pc=188, inst=STORE_SUBSCR(arg=None, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0', '$184inplace_add.9', '$hist170.1', '$176binary_subtract.4']
DEBUG:numba.core.byteflow:dispatch pc=190, inst=JUMP_ABSOLUTE(arg=86, lineno=3778)
DEBUG:numba.core.byteflow:stack ['$phi170.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=86, stack=('$phi170.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=86 nstack_initial=1), State(pc_initial=86 nstack_initial=1), State(pc_initial=86 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=86 nstack_initial=1), State(pc_initial=86 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=86 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=1): {'$phi86.0'},
             State(pc_initial=88 nstack_initial=2): {'$phi88.1'},
             State(pc_initial=128 nstack_initial=2): {'$phi128.1'},
             State(pc_initial=134 nstack_initial=1): set(),
             State(pc_initial=136 nstack_initial=2): set(),
             State(pc_initial=140 nstack_initial=1): set(),
             State(pc_initial=162 nstack_initial=1): set(),
             State(pc_initial=170 nstack_initial=1): set(),
             State(pc_initial=192 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi128.1': State(pc_initial=88 nstack_initial=2),
 '$phi136.1': State(pc_initial=88 nstack_initial=2),
 '$phi86.0': State(pc_initial=64 nstack_initial=0),
 '$phi88.1': State(pc_initial=86 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi128.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi128.1': {('$120dup_top.15',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi134.0': {('$phi128.0',
                            State(pc_initial=128 nstack_initial=2))},
             '$phi136.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi136.1': {('$120dup_top.15',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi140.0': {('$phi134.0',
                            State(pc_initial=134 nstack_initial=1))},
             '$phi162.0': {('$phi128.0',
                            State(pc_initial=128 nstack_initial=2)),
                           ('$phi136.0',
                            State(pc_initial=136 nstack_initial=2))},
             '$phi170.0': {('$phi162.0',
                            State(pc_initial=162 nstack_initial=1))},
             '$phi86.0': {('$84get_iter.9',
                           State(pc_initial=64 nstack_initial=0)),
                          ('$phi140.0', State(pc_initial=140 nstack_initial=1)),
                          ('$phi162.0', State(pc_initial=162 nstack_initial=1)),
                          ('$phi170.0',
                           State(pc_initial=170 nstack_initial=1))},
             '$phi88.0': {('$phi86.0', State(pc_initial=86 nstack_initial=1))},
             '$phi88.1': {('$86for_iter.2',
                           State(pc_initial=86 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi128.0': {('$phi86.0', State(pc_initial=86 nstack_initial=1))},
             '$phi128.1': {('$120dup_top.15',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi134.0': {('$phi86.0', State(pc_initial=86 nstack_initial=1))},
             '$phi136.0': {('$phi86.0', State(pc_initial=86 nstack_initial=1))},
             '$phi136.1': {('$120dup_top.15',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi140.0': {('$phi86.0', State(pc_initial=86 nstack_initial=1))},
             '$phi162.0': {('$phi86.0', State(pc_initial=86 nstack_initial=1))},
             '$phi170.0': {('$phi86.0', State(pc_initial=86 nstack_initial=1))},
             '$phi86.0': {('$84get_iter.9',
                           State(pc_initial=64 nstack_initial=0)),
                          ('$phi86.0', State(pc_initial=86 nstack_initial=1))},
             '$phi88.0': {('$84get_iter.9',
                           State(pc_initial=64 nstack_initial=0))},
             '$phi88.1': {('$86for_iter.2',
                           State(pc_initial=86 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi128.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi128.1': {('$120dup_top.15',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi134.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi136.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi136.1': {('$120dup_top.15',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi140.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi162.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi170.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi86.0': {('$84get_iter.9',
                           State(pc_initial=64 nstack_initial=0))},
             '$phi88.0': {('$84get_iter.9',
                           State(pc_initial=64 nstack_initial=0))},
             '$phi88.1': {('$86for_iter.2',
                           State(pc_initial=86 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi128.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi128.1': {('$120dup_top.15',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi134.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi136.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi136.1': {('$120dup_top.15',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi140.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi162.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi170.0': {('$84get_iter.9',
                            State(pc_initial=64 nstack_initial=0))},
             '$phi86.0': {('$84get_iter.9',
                           State(pc_initial=64 nstack_initial=0))},
             '$phi88.0': {('$84get_iter.9',
                           State(pc_initial=64 nstack_initial=0))},
             '$phi88.1': {('$86for_iter.2',
                           State(pc_initial=86 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi128.1': {('$120dup_top.15', State(pc_initial=88 nstack_initial=2))},
 '$phi86.0': {('$84get_iter.9', State(pc_initial=64 nstack_initial=0))},
 '$phi88.1': {('$86for_iter.2', State(pc_initial=86 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=64 nstack_initial=0): {'$phi86.0': '$84get_iter.9'},
             State(pc_initial=86 nstack_initial=1): {'$phi88.1': '$86for_iter.2'},
             State(pc_initial=88 nstack_initial=2): {'$phi128.1': '$120dup_top.15'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$bins2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$bins2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 18: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_global.0'}), (12, {'res': '$const12.1'}), (14, {'func': '$10load_global.0', 'args': ['$const12.1'], 'res': '$14call_function.2'}), (16, {'exc': '$14call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$range18.0'}), (20, {'iterable': '$range18.0', 'stores': ['$20unpack_sequence.1', '$20unpack_sequence.2'], 'tupleobj': '$20unpack_sequence.3'}), (22, {'value': '$20unpack_sequence.1'}), (24, {'value': '$20unpack_sequence.2'}), (26, {'res': '$bin_min26.4'}), (28, {'res': '$bin_max28.5'}), (30, {'lhs': '$bin_min26.4', 'rhs': '$bin_max28.5', 'res': '$30compare_op.6'}), (32, {'pred': '$30compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 42: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'res': '$const36.1'}), (38, {'func': '$34load_global.0', 'args': ['$const36.1'], 'res': '$38call_function.2'}), (40, {'exc': '$38call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'item': '$42load_global.0', 'res': '$44load_method.1'}), (46, {'res': '$bins46.2'}), (48, {'res': '$48load_global.3'}), (50, {'item': '$48load_global.3', 'res': '$50load_attr.4'}), (52, {'func': '$44load_method.1', 'args': ['$bins46.2', '$50load_attr.4'], 'res': '$52call_method.5'}), (54, {'value': '$52call_method.5'}), (56, {'res': '$bin_max56.6'}), (58, {'res': '$bin_min58.7'}), (60, {'lhs': '$bin_max56.6', 'rhs': '$bin_min58.7', 'res': '$60compare_op.8'}), (62, {'pred': '$60compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 192: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$bins64.0'}), (66, {'res': '$bin_max66.1'}), (68, {'res': '$bin_min68.2'}), (70, {'lhs': '$bin_max66.1', 'rhs': '$bin_min68.2', 'res': '$70binary_subtract.3'}), (72, {'lhs': '$bins64.0', 'rhs': '$70binary_subtract.3', 'res': '$72binary_true_divide.4'}), (74, {'value': '$72binary_true_divide.4'}), (76, {'res': '$76load_global.5'}), (78, {'item': '$76load_global.5', 'res': '$78load_method.6'}), (80, {'res': '$a80.7'}), (82, {'func': '$78load_method.6', 'args': ['$a80.7'], 'res': '$82call_method.8'}), (84, {'value': '$82call_method.8', 'res': '$84get_iter.9'})), outgoing_phis={'$phi86.0': '$84get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={86: ('$84get_iter.9',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=86 nstack_initial=1):
AdaptBlockInfo(insts=((86, {'iterator': '$phi86.0', 'pair': '$86for_iter.1', 'indval': '$86for_iter.2', 'pred': '$86for_iter.3'}),), outgoing_phis={'$phi88.1': '$86for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: (), 88: ('$phi86.0', '$86for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=88 nstack_initial=2):
AdaptBlockInfo(insts=((88, {'value': '$phi88.1'}), (90, {'res': '$view90.2'}), (92, {'item': '$view90.2', 'res': '$92load_method.3'}), (94, {'func': '$92load_method.3', 'args': [], 'res': '$94call_method.4'}), (96, {'value': '$94call_method.4'}), (98, {'res': '$98load_global.5'}), (100, {'item': '$98load_global.5', 'res': '$100load_method.6'}), (102, {'res': '$v102.7'}), (104, {'res': '$bin_min104.8'}), (106, {'lhs': '$v102.7', 'rhs': '$bin_min104.8', 'res': '$106binary_subtract.9'}), (108, {'res': '$bin_ratio108.10'}), (110, {'lhs': '$106binary_subtract.9', 'rhs': '$bin_ratio108.10', 'res': '$110binary_multiply.11'}), (112, {'func': '$100load_method.6', 'args': ['$110binary_multiply.11'], 'res': '$112call_method.12'}), (114, {'value': '$112call_method.12'}), (116, {'res': '$const116.13'}), (118, {'res': '$b118.14'}), (120, {'orig': ['$b118.14'], 'duped': ['$120dup_top.15']}), (124, {'lhs': '$const116.13', 'rhs': '$b118.14', 'res': '$124compare_op.16'}), (126, {'pred': '$124compare_op.16'})), outgoing_phis={'$phi128.1': '$120dup_top.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: ('$phi88.0', '$120dup_top.15'), 136: ('$phi88.0', '$120dup_top.15')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=128 nstack_initial=2):
AdaptBlockInfo(insts=((128, {'res': '$bins128.2'}), (130, {'lhs': '$phi128.1', 'rhs': '$bins128.2', 'res': '$130compare_op.3'}), (132, {'pred': '$130compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: ('$phi128.0',), 162: ('$phi128.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=134 nstack_initial=1):
AdaptBlockInfo(insts=((134, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ('$phi134.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=136 nstack_initial=2):
AdaptBlockInfo(insts=((138, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={162: ('$phi136.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=140 nstack_initial=1):
AdaptBlockInfo(insts=((140, {'res': '$hist140.1'}), (142, {'res': '$142load_global.2'}), (144, {'res': '$b144.3'}), (146, {'func': '$142load_global.2', 'args': ['$b144.3'], 'res': '$146call_function.4'}), (148, {'orig': ['$hist140.1', '$146call_function.4'], 'duped': ['$148dup_top_two.5', '$148dup_top_two.6']}), (150, {'index': '$148dup_top_two.6', 'target': '$148dup_top_two.5', 'res': '$150binary_subscr.7'}), (152, {'res': '$const152.8'}), (154, {'lhs': '$150binary_subscr.7', 'rhs': '$const152.8', 'res': '$154inplace_add.9'}), (158, {'target': '$hist140.1', 'index': '$146call_function.4', 'value': '$154inplace_add.9'}), (160, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={86: ('$phi140.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=162 nstack_initial=1):
AdaptBlockInfo(insts=((162, {'res': '$v162.1'}), (164, {'res': '$bin_max164.2'}), (166, {'lhs': '$v162.1', 'rhs': '$bin_max164.2', 'res': '$166compare_op.3'}), (168, {'pred': '$166compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={170: ('$phi162.0',), 86: ('$phi162.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=170 nstack_initial=1):
AdaptBlockInfo(insts=((170, {'res': '$hist170.1'}), (172, {'res': '$bins172.2'}), (174, {'res': '$const174.3'}), (176, {'lhs': '$bins172.2', 'rhs': '$const174.3', 'res': '$176binary_subtract.4'}), (178, {'orig': ['$hist170.1', '$176binary_subtract.4'], 'duped': ['$178dup_top_two.5', '$178dup_top_two.6']}), (180, {'index': '$178dup_top_two.6', 'target': '$178dup_top_two.5', 'res': '$180binary_subscr.7'}), (182, {'res': '$const182.8'}), (184, {'lhs': '$180binary_subscr.7', 'rhs': '$const182.8', 'res': '$184inplace_add.9'}), (188, {'target': '$hist170.1', 'index': '$176binary_subtract.4', 'value': '$184inplace_add.9'}), (190, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={86: ('$phi170.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$192load_global.0'}), (194, {'item': '$192load_global.0', 'res': '$194load_method.1'}), (196, {'res': '$bin_min196.2'}), (198, {'res': '$bin_max198.3'}), (200, {'res': '$bins200.4'}), (202, {'res': '$const202.5'}), (204, {'lhs': '$bins200.4', 'rhs': '$const202.5', 'res': '$204binary_add.6'}), (206, {'func': '$194load_method.1', 'args': ['$bin_min196.2', '$bin_max198.3', '$204binary_add.6'], 'res': '$206call_method.7'}), (208, {'value': '$206call_method.7'}), (210, {'res': '$hist210.8'}), (212, {'res': '$bins_array212.9'}), (214, {'items': ['$hist210.8', '$bins_array212.9'], 'res': '$214build_tuple.10'}), (216, {'retval': '$214build_tuple.10', 'castval': '$216return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    a = arg(0, name=a)                       ['a']
    bins = arg(1, name=bins)                 ['bins']
    range = arg(2, name=range)               ['range']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = bins <= $const4.1       ['$6compare_op.2', '$const4.1', 'bins']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arraymath.py:3761),), kws=(), vararg=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 18                    ['$8pred']
label 10:
    $10load_global.0 = global(ValueError: <class 'ValueError'>) ['$10load_global.0']
    $const12.1 = const(str, histogram(): `bins` should be a positive integer) ['$const12.1']
    $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, arraymath.py:3762)], kws=(), vararg=None) ['$10load_global.0', '$14call_function.2', '$const12.1']
    raise $14call_function.2                 ['$14call_function.2']
label 18:
    $20unpack_sequence.3 = exhaust_iter(value=range, count=2) ['$20unpack_sequence.3', 'range']
    $20unpack_sequence.1 = static_getitem(value=$20unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.1', '$20unpack_sequence.3']
    $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.3, index=1, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.2', '$20unpack_sequence.3']
    bin_min = $20unpack_sequence.1           ['$20unpack_sequence.1', 'bin_min']
    bin_max = $20unpack_sequence.2           ['$20unpack_sequence.2', 'bin_max']
    $30compare_op.6 = bin_min <= bin_max     ['$30compare_op.6', 'bin_max', 'bin_min']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.6, func=bool32, args=(Var($30compare_op.6, arraymath.py:3765),), kws=(), vararg=None) ['$30compare_op.6', '$32pred', 'bool32']
    branch $32pred, 42, 34                   ['$32pred']
label 34:
    $34load_global.0 = global(ValueError: <class 'ValueError'>) ['$34load_global.0']
    $const36.1 = const(str, histogram(): max must be larger than min in range parameter) ['$const36.1']
    $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, arraymath.py:3766)], kws=(), vararg=None) ['$34load_global.0', '$38call_function.2', '$const36.1']
    raise $38call_function.2                 ['$38call_function.2']
label 42:
    $42load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$42load_global.0']
    $44load_method.1 = getattr(value=$42load_global.0, attr=zeros) ['$42load_global.0', '$44load_method.1']
    $48load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$48load_global.3']
    $50load_attr.4 = getattr(value=$48load_global.3, attr=intp) ['$48load_global.3', '$50load_attr.4']
    hist = call $44load_method.1(bins, $50load_attr.4, func=$44load_method.1, args=[Var(bins, arraymath.py:3761), Var($50load_attr.4, arraymath.py:3769)], kws=(), vararg=None) ['$44load_method.1', '$50load_attr.4', 'bins', 'hist']
    $60compare_op.8 = bin_max > bin_min      ['$60compare_op.8', 'bin_max', 'bin_min']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60compare_op.8, func=bool62, args=(Var($60compare_op.8, arraymath.py:3770),), kws=(), vararg=None) ['$60compare_op.8', '$62pred', 'bool62']
    branch $62pred, 64, 192                  ['$62pred']
label 64:
    $70binary_subtract.3 = bin_max - bin_min ['$70binary_subtract.3', 'bin_max', 'bin_min']
    bin_ratio = bins / $70binary_subtract.3  ['$70binary_subtract.3', 'bin_ratio', 'bins']
    $76load_global.5 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$76load_global.5']
    $78load_method.6 = getattr(value=$76load_global.5, attr=nditer) ['$76load_global.5', '$78load_method.6']
    $82call_method.8 = call $78load_method.6(a, func=$78load_method.6, args=[Var(a, arraymath.py:3761)], kws=(), vararg=None) ['$78load_method.6', '$82call_method.8', 'a']
    $84get_iter.9 = getiter(value=$82call_method.8) ['$82call_method.8', '$84get_iter.9']
    $phi86.0 = $84get_iter.9                 ['$84get_iter.9', '$phi86.0']
    jump 86                                  []
label 86:
    $86for_iter.1 = iternext(value=$phi86.0) ['$86for_iter.1', '$phi86.0']
    $86for_iter.2 = pair_first(value=$86for_iter.1) ['$86for_iter.1', '$86for_iter.2']
    $86for_iter.3 = pair_second(value=$86for_iter.1) ['$86for_iter.1', '$86for_iter.3']
    $phi88.1 = $86for_iter.2                 ['$86for_iter.2', '$phi88.1']
    branch $86for_iter.3, 88, 192            ['$86for_iter.3']
label 88:
    view = $phi88.1                          ['$phi88.1', 'view']
    $92load_method.3 = getattr(value=view, attr=item) ['$92load_method.3', 'view']
    v = call $92load_method.3(func=$92load_method.3, args=[], kws=(), vararg=None) ['$92load_method.3', 'v']
    $98load_global.5 = global(math: <module 'math' (built-in)>) ['$98load_global.5']
    $100load_method.6 = getattr(value=$98load_global.5, attr=floor) ['$100load_method.6', '$98load_global.5']
    $106binary_subtract.9 = v - bin_min      ['$106binary_subtract.9', 'bin_min', 'v']
    $110binary_multiply.11 = $106binary_subtract.9 * bin_ratio ['$106binary_subtract.9', '$110binary_multiply.11', 'bin_ratio']
    b = call $100load_method.6($110binary_multiply.11, func=$100load_method.6, args=[Var($110binary_multiply.11, arraymath.py:3774)], kws=(), vararg=None) ['$100load_method.6', '$110binary_multiply.11', 'b']
    $const116.13 = const(int, 0)             ['$const116.13']
    $124compare_op.16 = $const116.13 <= b    ['$124compare_op.16', '$const116.13', 'b']
    bool126 = global(bool: <class 'bool'>)   ['bool126']
    $126pred = call bool126($124compare_op.16, func=bool126, args=(Var($124compare_op.16, arraymath.py:3775),), kws=(), vararg=None) ['$124compare_op.16', '$126pred', 'bool126']
    $phi128.1 = b                            ['$phi128.1', 'b']
    branch $126pred, 128, 136                ['$126pred']
label 128:
    $130compare_op.3 = $phi128.1 < bins      ['$130compare_op.3', '$phi128.1', 'bins']
    bool132 = global(bool: <class 'bool'>)   ['bool132']
    $132pred = call bool132($130compare_op.3, func=bool132, args=(Var($130compare_op.3, arraymath.py:3775),), kws=(), vararg=None) ['$130compare_op.3', '$132pred', 'bool132']
    branch $132pred, 134, 162                ['$132pred']
label 134:
    jump 140                                 []
label 136:
    jump 162                                 []
label 140:
    $142load_global.2 = global(int: <class 'int'>) ['$142load_global.2']
    $146call_function.4 = call $142load_global.2(b, func=$142load_global.2, args=[Var(b, arraymath.py:3774)], kws=(), vararg=None) ['$142load_global.2', '$146call_function.4', 'b']
    $150binary_subscr.7 = getitem(value=hist, index=$146call_function.4, fn=<built-in function getitem>) ['$146call_function.4', '$150binary_subscr.7', 'hist']
    $const152.8 = const(int, 1)              ['$const152.8']
    $154inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.7, rhs=$const152.8, static_lhs=Undefined, static_rhs=Undefined) ['$150binary_subscr.7', '$154inplace_add.9', '$const152.8']
    hist[$146call_function.4] = $154inplace_add.9 ['$146call_function.4', '$154inplace_add.9', 'hist']
    jump 86                                  []
label 162:
    $166compare_op.3 = v == bin_max          ['$166compare_op.3', 'bin_max', 'v']
    bool168 = global(bool: <class 'bool'>)   ['bool168']
    $168pred = call bool168($166compare_op.3, func=bool168, args=(Var($166compare_op.3, arraymath.py:3777),), kws=(), vararg=None) ['$166compare_op.3', '$168pred', 'bool168']
    branch $168pred, 170, 86                 ['$168pred']
label 170:
    $const174.3 = const(int, 1)              ['$const174.3']
    $176binary_subtract.4 = bins - $const174.3 ['$176binary_subtract.4', '$const174.3', 'bins']
    $180binary_subscr.7 = getitem(value=hist, index=$176binary_subtract.4, fn=<built-in function getitem>) ['$176binary_subtract.4', '$180binary_subscr.7', 'hist']
    $const182.8 = const(int, 1)              ['$const182.8']
    $184inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$180binary_subscr.7, rhs=$const182.8, static_lhs=Undefined, static_rhs=Undefined) ['$180binary_subscr.7', '$184inplace_add.9', '$const182.8']
    hist[$176binary_subtract.4] = $184inplace_add.9 ['$176binary_subtract.4', '$184inplace_add.9', 'hist']
    jump 86                                  []
label 192:
    $192load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$192load_global.0']
    $194load_method.1 = getattr(value=$192load_global.0, attr=linspace) ['$192load_global.0', '$194load_method.1']
    $const202.5 = const(int, 1)              ['$const202.5']
    $204binary_add.6 = bins + $const202.5    ['$204binary_add.6', '$const202.5', 'bins']
    bins_array = call $194load_method.1(bin_min, bin_max, $204binary_add.6, func=$194load_method.1, args=[Var(bin_min, arraymath.py:3764), Var(bin_max, arraymath.py:3764), Var($204binary_add.6, arraymath.py:3780)], kws=(), vararg=None) ['$194load_method.1', '$204binary_add.6', 'bin_max', 'bin_min', 'bins_array']
    $214build_tuple.10 = build_tuple(items=[Var(hist, arraymath.py:3769), Var(bins_array, arraymath.py:3780)]) ['$214build_tuple.10', 'bins_array', 'hist']
    $216return_value.11 = cast(value=$214build_tuple.10) ['$214build_tuple.10', '$216return_value.11']
    return $216return_value.11               ['$216return_value.11']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
DEBUG:numba.core.ssa:on stmt: bins = arg(1, name=bins)
DEBUG:numba.core.ssa:on stmt: range = arg(2, name=range)
DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $6compare_op.2 = bins <= $const4.1
DEBUG:numba.core.ssa:on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arraymath.py:3761),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $8pred, 10, 18
DEBUG:numba.core.ssa:==== SSA block analysis pass on 10
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $10load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const12.1 = const(str, histogram(): `bins` should be a positive integer)
DEBUG:numba.core.ssa:on stmt: $14call_function.2 = call $10load_global.0($const12.1, func=$10load_global.0, args=[Var($const12.1, arraymath.py:3762)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('histogram(): `bins` should be a positive integer')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 18
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.3 = exhaust_iter(value=range, count=2)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.1 = static_getitem(value=$20unpack_sequence.3, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.3, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: bin_min = $20unpack_sequence.1
DEBUG:numba.core.ssa:on stmt: bin_max = $20unpack_sequence.2
DEBUG:numba.core.ssa:on stmt: $30compare_op.6 = bin_min <= bin_max
DEBUG:numba.core.ssa:on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $32pred = call bool32($30compare_op.6, func=bool32, args=(Var($30compare_op.6, arraymath.py:3765),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $32pred, 42, 34
DEBUG:numba.core.ssa:==== SSA block analysis pass on 34
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $34load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const36.1 = const(str, histogram(): max must be larger than min in range parameter)
DEBUG:numba.core.ssa:on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, arraymath.py:3766)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('histogram(): max must be larger than min in range parameter')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 42
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $42load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $44load_method.1 = getattr(value=$42load_global.0, attr=zeros)
DEBUG:numba.core.ssa:on stmt: $48load_global.3 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $50load_attr.4 = getattr(value=$48load_global.3, attr=intp)
DEBUG:numba.core.ssa:on stmt: hist = call $44load_method.1(bins, $50load_attr.4, func=$44load_method.1, args=[Var(bins, arraymath.py:3761), Var($50load_attr.4, arraymath.py:3769)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $60compare_op.8 = bin_max > bin_min
DEBUG:numba.core.ssa:on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $62pred = call bool62($60compare_op.8, func=bool62, args=(Var($60compare_op.8, arraymath.py:3770),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $62pred, 64, 192
DEBUG:numba.core.ssa:==== SSA block analysis pass on 64
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $70binary_subtract.3 = bin_max - bin_min
DEBUG:numba.core.ssa:on stmt: bin_ratio = bins / $70binary_subtract.3
DEBUG:numba.core.ssa:on stmt: $76load_global.5 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $78load_method.6 = getattr(value=$76load_global.5, attr=nditer)
DEBUG:numba.core.ssa:on stmt: $82call_method.8 = call $78load_method.6(a, func=$78load_method.6, args=[Var(a, arraymath.py:3761)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $84get_iter.9 = getiter(value=$82call_method.8)
DEBUG:numba.core.ssa:on stmt: $phi86.0 = $84get_iter.9
DEBUG:numba.core.ssa:on stmt: jump 86
DEBUG:numba.core.ssa:==== SSA block analysis pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $86for_iter.1 = iternext(value=$phi86.0)
DEBUG:numba.core.ssa:on stmt: $86for_iter.2 = pair_first(value=$86for_iter.1)
DEBUG:numba.core.ssa:on stmt: $86for_iter.3 = pair_second(value=$86for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi88.1 = $86for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $86for_iter.3, 88, 192
DEBUG:numba.core.ssa:==== SSA block analysis pass on 88
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: view = $phi88.1
DEBUG:numba.core.ssa:on stmt: $92load_method.3 = getattr(value=view, attr=item)
DEBUG:numba.core.ssa:on stmt: v = call $92load_method.3(func=$92load_method.3, args=[], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $98load_global.5 = global(math: <module 'math' (built-in)>)
DEBUG:numba.core.ssa:on stmt: $100load_method.6 = getattr(value=$98load_global.5, attr=floor)
DEBUG:numba.core.ssa:on stmt: $106binary_subtract.9 = v - bin_min
DEBUG:numba.core.ssa:on stmt: $110binary_multiply.11 = $106binary_subtract.9 * bin_ratio
DEBUG:numba.core.ssa:on stmt: b = call $100load_method.6($110binary_multiply.11, func=$100load_method.6, args=[Var($110binary_multiply.11, arraymath.py:3774)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $const116.13 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $124compare_op.16 = $const116.13 <= b
DEBUG:numba.core.ssa:on stmt: bool126 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $126pred = call bool126($124compare_op.16, func=bool126, args=(Var($124compare_op.16, arraymath.py:3775),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $phi128.1 = b
DEBUG:numba.core.ssa:on stmt: branch $126pred, 128, 136
DEBUG:numba.core.ssa:==== SSA block analysis pass on 128
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $130compare_op.3 = $phi128.1 < bins
DEBUG:numba.core.ssa:on stmt: bool132 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $132pred = call bool132($130compare_op.3, func=bool132, args=(Var($130compare_op.3, arraymath.py:3775),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $132pred, 134, 162
DEBUG:numba.core.ssa:==== SSA block analysis pass on 134
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: jump 140
DEBUG:numba.core.ssa:==== SSA block analysis pass on 136
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: jump 162
DEBUG:numba.core.ssa:==== SSA block analysis pass on 140
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $142load_global.2 = global(int: <class 'int'>)
DEBUG:numba.core.ssa:on stmt: $146call_function.4 = call $142load_global.2(b, func=$142load_global.2, args=[Var(b, arraymath.py:3774)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $150binary_subscr.7 = getitem(value=hist, index=$146call_function.4, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const152.8 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $154inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.7, rhs=$const152.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: hist[$146call_function.4] = $154inplace_add.9
DEBUG:numba.core.ssa:on stmt: jump 193
DEBUG:numba.core.ssa:==== SSA block analysis pass on 162
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $166compare_op.3 = v == bin_max
DEBUG:numba.core.ssa:on stmt: bool168 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $168pred = call bool168($166compare_op.3, func=bool168, args=(Var($166compare_op.3, arraymath.py:3777),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $168pred, 170, 193
DEBUG:numba.core.ssa:==== SSA block analysis pass on 170
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $const174.3 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $176binary_subtract.4 = bins - $const174.3
DEBUG:numba.core.ssa:on stmt: $180binary_subscr.7 = getitem(value=hist, index=$176binary_subtract.4, fn=<built-in function getitem>)
DEBUG:numba.core.ssa:on stmt: $const182.8 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $184inplace_add.9 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$180binary_subscr.7, rhs=$const182.8, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: hist[$176binary_subtract.4] = $184inplace_add.9
DEBUG:numba.core.ssa:on stmt: jump 193
DEBUG:numba.core.ssa:==== SSA block analysis pass on 192
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: $192load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=linspace)
DEBUG:numba.core.ssa:on stmt: $const202.5 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $204binary_add.6 = bins + $const202.5
DEBUG:numba.core.ssa:on stmt: bins_array = call $194load_method.1(bin_min, bin_max, $204binary_add.6, func=$194load_method.1, args=[Var(bin_min, arraymath.py:3764), Var(bin_max, arraymath.py:3764), Var($204binary_add.6, arraymath.py:3780)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $214build_tuple.10 = build_tuple(items=[Var(hist, arraymath.py:3769), Var(bins_array, arraymath.py:3780)])
DEBUG:numba.core.ssa:on stmt: $216return_value.11 = cast(value=$214build_tuple.10)
DEBUG:numba.core.ssa:on stmt: return $216return_value.11
DEBUG:numba.core.ssa:==== SSA block analysis pass on 193
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9c43ae910>
DEBUG:numba.core.ssa:on stmt: jump 86
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$100load_method.6': [<numba.core.ir.Assign object at 0x7faa1c636a60>],
             '$106binary_subtract.9': [<numba.core.ir.Assign object at 0x7faa1c636e20>],
             '$10load_global.0': [<numba.core.ir.Assign object at 0x7faa1c58b100>],
             '$110binary_multiply.11': [<numba.core.ir.Assign object at 0x7faa1c622100>],
             '$124compare_op.16': [<numba.core.ir.Assign object at 0x7faa1c6228e0>],
             '$126pred': [<numba.core.ir.Assign object at 0x7faa1c622b80>],
             '$130compare_op.3': [<numba.core.ir.Assign object at 0x7faa1c622d00>],
             '$132pred': [<numba.core.ir.Assign object at 0x7faa1c622fa0>],
             '$142load_global.2': [<numba.core.ir.Assign object at 0x7faa1c61c640>],
             '$146call_function.4': [<numba.core.ir.Assign object at 0x7faa1c61c910>],
             '$14call_function.2': [<numba.core.ir.Assign object at 0x7faa1c58b520>],
             '$150binary_subscr.7': [<numba.core.ir.Assign object at 0x7faa1c61cc40>],
             '$154inplace_add.9': [<numba.core.ir.Assign object at 0x7faa1c61cf40>],
             '$166compare_op.3': [<numba.core.ir.Assign object at 0x7faa1c5fdca0>],
             '$168pred': [<numba.core.ir.Assign object at 0x7faa1c5fd9a0>],
             '$176binary_subtract.4': [<numba.core.ir.Assign object at 0x7faa1c5fd400>],
             '$180binary_subscr.7': [<numba.core.ir.Assign object at 0x7faa1c5fd0d0>],
             '$184inplace_add.9': [<numba.core.ir.Assign object at 0x7faa1c624ee0>],
             '$192load_global.0': [<numba.core.ir.Assign object at 0x7faa1c624ca0>],
             '$194load_method.1': [<numba.core.ir.Assign object at 0x7faa1c624a30>],
             '$204binary_add.6': [<numba.core.ir.Assign object at 0x7faa1c624370>],
             '$20unpack_sequence.1': [<numba.core.ir.Assign object at 0x7faa1c617550>],
             '$20unpack_sequence.2': [<numba.core.ir.Assign object at 0x7faa1c617430>],
             '$20unpack_sequence.3': [<numba.core.ir.Assign object at 0x7faa1c617760>],
             '$214build_tuple.10': [<numba.core.ir.Assign object at 0x7faa1c619a30>],
             '$216return_value.11': [<numba.core.ir.Assign object at 0x7faa1c6198e0>],
             '$30compare_op.6': [<numba.core.ir.Assign object at 0x7faa1c617b80>],
             '$32pred': [<numba.core.ir.Assign object at 0x7faa1c617e20>],
             '$34load_global.0': [<numba.core.ir.Assign object at 0x7faa1c617fa0>],
             '$38call_function.2': [<numba.core.ir.Assign object at 0x7faa1c59c310>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x7faa1c59c5e0>],
             '$44load_method.1': [<numba.core.ir.Assign object at 0x7faa1c59c760>],
             '$48load_global.3': [<numba.core.ir.Assign object at 0x7faa1c59ca00>],
             '$50load_attr.4': [<numba.core.ir.Assign object at 0x7faa1c59cb80>],
             '$60compare_op.8': [<numba.core.ir.Assign object at 0x7faa1c590280>],
             '$62pred': [<numba.core.ir.Assign object at 0x7faa1c590250>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7faa1c58b670>],
             '$70binary_subtract.3': [<numba.core.ir.Assign object at 0x7faa1c61b160>],
             '$76load_global.5': [<numba.core.ir.Assign object at 0x7faa1c61b580>],
             '$78load_method.6': [<numba.core.ir.Assign object at 0x7faa1c61b700>],
             '$82call_method.8': [<numba.core.ir.Assign object at 0x7faa1c61b9d0>],
             '$84get_iter.9': [<numba.core.ir.Assign object at 0x7faa1c61bb20>],
             '$86for_iter.1': [<numba.core.ir.Assign object at 0x7faa1c61bd00>],
             '$86for_iter.2': [<numba.core.ir.Assign object at 0x7faa1c61be20>],
             '$86for_iter.3': [<numba.core.ir.Assign object at 0x7faa1c61bf40>],
             '$8pred': [<numba.core.ir.Assign object at 0x7faa1c58ba90>],
             '$92load_method.3': [<numba.core.ir.Assign object at 0x7faa1c6364c0>],
             '$98load_global.5': [<numba.core.ir.Assign object at 0x7faa1c6368e0>],
             '$const116.13': [<numba.core.ir.Assign object at 0x7faa1c622520>],
             '$const12.1': [<numba.core.ir.Assign object at 0x7faa1c58bc40>],
             '$const152.8': [<numba.core.ir.Assign object at 0x7faa1c61cdc0>],
             '$const174.3': [<numba.core.ir.Assign object at 0x7faa1c5fd5e0>],
             '$const182.8': [<numba.core.ir.Assign object at 0x7faa1c624fa0>],
             '$const202.5': [<numba.core.ir.Assign object at 0x7faa1c624460>],
             '$const36.1': [<numba.core.ir.Assign object at 0x7faa1c59c160>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7faa1c58b760>],
             '$phi128.1': [<numba.core.ir.Assign object at 0x7faa1c636760>],
             '$phi86.0': [<numba.core.ir.Assign object at 0x7faa1c59f5e0>],
             '$phi88.1': [<numba.core.ir.Assign object at 0x7faa1c61bc10>],
             'a': [<numba.core.ir.Assign object at 0x7faa244e3df0>],
             'b': [<numba.core.ir.Assign object at 0x7faa1c6222b0>],
             'bin_max': [<numba.core.ir.Assign object at 0x7faa1c617100>],
             'bin_min': [<numba.core.ir.Assign object at 0x7faa1c617190>],
             'bin_ratio': [<numba.core.ir.Assign object at 0x7faa1c61b2e0>],
             'bins': [<numba.core.ir.Assign object at 0x7faa1c58bd00>],
             'bins_array': [<numba.core.ir.Assign object at 0x7faa1c6241f0>],
             'bool126': [<numba.core.ir.Assign object at 0x7faa1c622a60>],
             'bool132': [<numba.core.ir.Assign object at 0x7faa1c622e80>],
             'bool168': [<numba.core.ir.Assign object at 0x7faa1c5fdac0>],
             'bool32': [<numba.core.ir.Assign object at 0x7faa1c617d00>],
             'bool62': [<numba.core.ir.Assign object at 0x7faa1c590400>],
             'bool8': [<numba.core.ir.Assign object at 0x7faa1c58b9a0>],
             'hist': [<numba.core.ir.Assign object at 0x7faa1c59cd30>],
             'range': [<numba.core.ir.Assign object at 0x7faa1c58b0a0>],
             'v': [<numba.core.ir.Assign object at 0x7faa1c636670>],
             'view': [<numba.core.ir.Assign object at 0x7faa1c636220>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=3933)
           2	LOAD_GLOBAL(arg=0, lineno=3933)
           4	LOAD_METHOD(arg=1, lineno=3933)
           6	LOAD_FAST(arg=2, lineno=3933)
           8	LOAD_DEREF(arg=0, lineno=3933)
          10	CALL_METHOD(arg=2, lineno=3933)
          12	STORE_FAST(arg=3, lineno=3933)
          14	LOAD_FAST(arg=2, lineno=3934)
          16	LOAD_CONST(arg=1, lineno=3934)
          18	COMPARE_OP(arg=2, lineno=3934)
          20	POP_JUMP_IF_FALSE(arg=26, lineno=3934)
          22	LOAD_FAST(arg=3, lineno=3935)
          24	RETURN_VALUE(arg=None, lineno=3935)
>         26	LOAD_FAST(arg=2, lineno=3936)
          28	LOAD_CONST(arg=2, lineno=3936)
          30	BINARY_SUBTRACT(arg=None, lineno=3936)
          32	STORE_FAST(arg=4, lineno=3936)
          34	LOAD_FAST(arg=1, lineno=3937)
          36	LOAD_FAST(arg=0, lineno=3937)
          38	BINARY_SUBTRACT(arg=None, lineno=3937)
          40	STORE_FAST(arg=5, lineno=3937)
          42	LOAD_FAST(arg=0, lineno=3938)
          44	LOAD_FAST(arg=3, lineno=3938)
          46	LOAD_CONST(arg=1, lineno=3938)
          48	STORE_SUBSCR(arg=None, lineno=3938)
          50	LOAD_GLOBAL(arg=2, lineno=3939)
          52	LOAD_CONST(arg=2, lineno=3939)
          54	LOAD_FAST(arg=2, lineno=3939)
          56	CALL_FUNCTION(arg=2, lineno=3939)
          58	GET_ITER(arg=None, lineno=3939)
>         60	FOR_ITER(arg=24, lineno=3939)
          62	STORE_FAST(arg=6, lineno=3939)
          64	LOAD_FAST(arg=0, lineno=3940)
          66	LOAD_FAST(arg=5, lineno=3940)
          68	LOAD_FAST(arg=6, lineno=3940)
          70	LOAD_FAST(arg=4, lineno=3940)
          72	BINARY_TRUE_DIVIDE(arg=None, lineno=3940)
          74	BINARY_MULTIPLY(arg=None, lineno=3940)
          76	BINARY_ADD(arg=None, lineno=3940)
          78	LOAD_FAST(arg=3, lineno=3940)
          80	LOAD_FAST(arg=6, lineno=3940)
          82	STORE_SUBSCR(arg=None, lineno=3940)
          84	JUMP_ABSOLUTE(arg=60, lineno=3940)
>         86	LOAD_FAST(arg=3, lineno=3941)
          88	RETURN_VALUE(arg=None, lineno=3941)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3933)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3933)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3933)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3933)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=3933)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$num6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3933)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$num6.2', '$8load_deref.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=STORE_FAST(arg=3, lineno=3933)
DEBUG:numba.core.byteflow:stack ['$10call_method.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=3934)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=3934)
DEBUG:numba.core.byteflow:stack ['$num14.5']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=COMPARE_OP(arg=2, lineno=3934)
DEBUG:numba.core.byteflow:stack ['$num14.5', '$const16.6']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=26, lineno=3934)
DEBUG:numba.core.byteflow:stack ['$18compare_op.7']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=3935)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=3935)
DEBUG:numba.core.byteflow:stack ['$arr22.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=3936)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=3936)
DEBUG:numba.core.byteflow:stack ['$num26.0']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=BINARY_SUBTRACT(arg=None, lineno=3936)
DEBUG:numba.core.byteflow:stack ['$num26.0', '$const28.1']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=STORE_FAST(arg=4, lineno=3936)
DEBUG:numba.core.byteflow:stack ['$30binary_subtract.2']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=3937)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=3937)
DEBUG:numba.core.byteflow:stack ['$stop34.3']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=3937)
DEBUG:numba.core.byteflow:stack ['$stop34.3', '$start36.4']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=STORE_FAST(arg=5, lineno=3937)
DEBUG:numba.core.byteflow:stack ['$38binary_subtract.5']
DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=3938)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=3938)
DEBUG:numba.core.byteflow:stack ['$start42.6']
DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=3938)
DEBUG:numba.core.byteflow:stack ['$start42.6', '$arr44.7']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=STORE_SUBSCR(arg=None, lineno=3938)
DEBUG:numba.core.byteflow:stack ['$start42.6', '$arr44.7', '$const46.8']
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=3939)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=3939)
DEBUG:numba.core.byteflow:stack ['$50load_global.9']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=3939)
DEBUG:numba.core.byteflow:stack ['$50load_global.9', '$const52.10']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=3939)
DEBUG:numba.core.byteflow:stack ['$50load_global.9', '$const52.10', '$num54.11']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=GET_ITER(arg=None, lineno=3939)
DEBUG:numba.core.byteflow:stack ['$56call_function.12']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$58get_iter.13',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi60.0']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=FOR_ITER(arg=24, lineno=3939)
DEBUG:numba.core.byteflow:stack ['$phi60.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=86, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=3941)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=88, inst=RETURN_VALUE(arg=None, lineno=3941)
DEBUG:numba.core.byteflow:stack ['$arr86.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=62 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=STORE_FAST(arg=6, lineno=3939)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$phi62.1']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$start64.2']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$start64.2', '$delta66.3']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$start64.2', '$delta66.3', '$i68.4']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$start64.2', '$delta66.3', '$i68.4', '$div70.5']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=BINARY_MULTIPLY(arg=None, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$start64.2', '$delta66.3', '$72binary_true_divide.6']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=BINARY_ADD(arg=None, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$start64.2', '$74binary_multiply.7']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_FAST(arg=3, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$76binary_add.8']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=LOAD_FAST(arg=6, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$76binary_add.8', '$arr78.9']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=STORE_SUBSCR(arg=None, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0', '$76binary_add.8', '$arr78.9', '$i80.10']
DEBUG:numba.core.byteflow:dispatch pc=84, inst=JUMP_ABSOLUTE(arg=60, lineno=3940)
DEBUG:numba.core.byteflow:stack ['$phi62.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=86 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi60.0': State(pc_initial=26 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.13',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.13',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.13',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.13',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.13',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.13',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.13',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi60.0': {('$58get_iter.13', State(pc_initial=26 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=26 nstack_initial=0): {'$phi60.0': '$58get_iter.13'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$num6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$4load_method.1', 'args': ['$num6.2', '$8load_deref.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$num14.5'}), (16, {'res': '$const16.6'}), (18, {'lhs': '$num14.5', 'rhs': '$const16.6', 'res': '$18compare_op.7'}), (20, {'pred': '$18compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$arr22.0'}), (24, {'retval': '$arr22.0', 'castval': '$24return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$num26.0'}), (28, {'res': '$const28.1'}), (30, {'lhs': '$num26.0', 'rhs': '$const28.1', 'res': '$30binary_subtract.2'}), (32, {'value': '$30binary_subtract.2'}), (34, {'res': '$stop34.3'}), (36, {'res': '$start36.4'}), (38, {'lhs': '$stop34.3', 'rhs': '$start36.4', 'res': '$38binary_subtract.5'}), (40, {'value': '$38binary_subtract.5'}), (42, {'res': '$start42.6'}), (44, {'res': '$arr44.7'}), (46, {'res': '$const46.8'}), (48, {'target': '$arr44.7', 'index': '$const46.8', 'value': '$start42.6'}), (50, {'res': '$50load_global.9'}), (52, {'res': '$const52.10'}), (54, {'res': '$num54.11'}), (56, {'func': '$50load_global.9', 'args': ['$const52.10', '$num54.11'], 'res': '$56call_function.12'}), (58, {'value': '$56call_function.12', 'res': '$58get_iter.13'})), outgoing_phis={'$phi60.0': '$58get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.13',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={86: (), 62: ('$phi60.0', '$60for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$start64.2'}), (66, {'res': '$delta66.3'}), (68, {'res': '$i68.4'}), (70, {'res': '$div70.5'}), (72, {'lhs': '$i68.4', 'rhs': '$div70.5', 'res': '$72binary_true_divide.6'}), (74, {'lhs': '$delta66.3', 'rhs': '$72binary_true_divide.6', 'res': '$74binary_multiply.7'}), (76, {'lhs': '$start64.2', 'rhs': '$74binary_multiply.7', 'res': '$76binary_add.8'}), (78, {'res': '$arr78.9'}), (80, {'res': '$i80.10'}), (82, {'target': '$arr78.9', 'index': '$i80.10', 'value': '$76binary_add.8'}), (84, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$arr86.0'}), (88, {'retval': '$arr86.0', 'castval': '$88return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    start = arg(0, name=start)               ['start']
    stop = arg(1, name=stop)                 ['stop']
    num = arg(2, name=num)                   ['num']
    $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $8load_deref.3 = freevar(dtype: float64) ['$8load_deref.3']
    arr = call $4load_method.1(num, $8load_deref.3, func=$4load_method.1, args=[Var(num, arrayobj.py:3933), Var($8load_deref.3, arrayobj.py:3933)], kws=(), vararg=None) ['$4load_method.1', '$8load_deref.3', 'arr', 'num']
    $const16.6 = const(int, 0)               ['$const16.6']
    $18compare_op.7 = num == $const16.6      ['$18compare_op.7', '$const16.6', 'num']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, arrayobj.py:3934),), kws=(), vararg=None) ['$18compare_op.7', '$20pred', 'bool20']
    branch $20pred, 22, 26                   ['$20pred']
label 22:
    $24return_value.1 = cast(value=arr)      ['$24return_value.1', 'arr']
    return $24return_value.1                 ['$24return_value.1']
label 26:
    $const28.1 = const(int, 1)               ['$const28.1']
    div = num - $const28.1                   ['$const28.1', 'div', 'num']
    delta = stop - start                     ['delta', 'start', 'stop']
    $const46.8 = const(int, 0)               ['$const46.8']
    arr[$const46.8] = start                  ['$const46.8', 'arr', 'start']
    $50load_global.9 = global(range: <class 'range'>) ['$50load_global.9']
    $const52.10 = const(int, 1)              ['$const52.10']
    $56call_function.12 = call $50load_global.9($const52.10, num, func=$50load_global.9, args=[Var($const52.10, arrayobj.py:3939), Var(num, arrayobj.py:3933)], kws=(), vararg=None) ['$50load_global.9', '$56call_function.12', '$const52.10', 'num']
    $58get_iter.13 = getiter(value=$56call_function.12) ['$56call_function.12', '$58get_iter.13']
    $phi60.0 = $58get_iter.13                ['$58get_iter.13', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 86             ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $72binary_true_divide.6 = i / div        ['$72binary_true_divide.6', 'div', 'i']
    $74binary_multiply.7 = delta * $72binary_true_divide.6 ['$72binary_true_divide.6', '$74binary_multiply.7', 'delta']
    $76binary_add.8 = start + $74binary_multiply.7 ['$74binary_multiply.7', '$76binary_add.8', 'start']
    arr[i] = $76binary_add.8                 ['$76binary_add.8', 'arr', 'i']
    jump 60                                  []
label 86:
    $88return_value.1 = cast(value=arr)      ['$88return_value.1', 'arr']
    return $88return_value.1                 ['$88return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24655100>
DEBUG:numba.core.ssa:on stmt: start = arg(0, name=start)
DEBUG:numba.core.ssa:on stmt: stop = arg(1, name=stop)
DEBUG:numba.core.ssa:on stmt: num = arg(2, name=num)
DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>)
DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
DEBUG:numba.core.ssa:on stmt: $8load_deref.3 = freevar(dtype: float64)
DEBUG:numba.core.ssa:on stmt: arr = call $4load_method.1(num, $8load_deref.3, func=$4load_method.1, args=[Var(num, arrayobj.py:3933), Var($8load_deref.3, arrayobj.py:3933)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $const16.6 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $18compare_op.7 = num == $const16.6
DEBUG:numba.core.ssa:on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, arrayobj.py:3934),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $20pred, 22, 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 22
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24655100>
DEBUG:numba.core.ssa:on stmt: $24return_value.1 = cast(value=arr)
DEBUG:numba.core.ssa:on stmt: return $24return_value.1
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24655100>
DEBUG:numba.core.ssa:on stmt: $const28.1 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: div = num - $const28.1
DEBUG:numba.core.ssa:on stmt: delta = stop - start
DEBUG:numba.core.ssa:on stmt: $const46.8 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: arr[0] = start
DEBUG:numba.core.ssa:on stmt: $50load_global.9 = global(range: <class 'range'>)
DEBUG:numba.core.ssa:on stmt: $const52.10 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $56call_function.12 = call $50load_global.9($const52.10, num, func=$50load_global.9, args=[Var($const52.10, arrayobj.py:3939), Var(num, arrayobj.py:3933)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: $58get_iter.13 = getiter(value=$56call_function.12)
DEBUG:numba.core.ssa:on stmt: $phi60.0 = $58get_iter.13
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 60
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24655100>
DEBUG:numba.core.ssa:on stmt: $60for_iter.1 = iternext(value=$phi60.0)
DEBUG:numba.core.ssa:on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi62.1 = $60for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $60for_iter.3, 62, 86
DEBUG:numba.core.ssa:==== SSA block analysis pass on 62
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24655100>
DEBUG:numba.core.ssa:on stmt: i = $phi62.1
DEBUG:numba.core.ssa:on stmt: $72binary_true_divide.6 = i / div
DEBUG:numba.core.ssa:on stmt: $74binary_multiply.7 = delta * $72binary_true_divide.6
DEBUG:numba.core.ssa:on stmt: $76binary_add.8 = start + $74binary_multiply.7
DEBUG:numba.core.ssa:on stmt: arr[i] = $76binary_add.8
DEBUG:numba.core.ssa:on stmt: jump 60
DEBUG:numba.core.ssa:==== SSA block analysis pass on 86
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7faa24655100>
DEBUG:numba.core.ssa:on stmt: $88return_value.1 = cast(value=arr)
DEBUG:numba.core.ssa:on stmt: return $88return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$18compare_op.7': [<numba.core.ir.Assign object at 0x7fa9e018fdf0>],
             '$20pred': [<numba.core.ir.Assign object at 0x7fa9e017b0d0>],
             '$24return_value.1': [<numba.core.ir.Assign object at 0x7fa9e017b370>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa9e018f310>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa9e018f490>],
             '$50load_global.9': [<numba.core.ir.Assign object at 0x7fa9e01a5c70>],
             '$56call_function.12': [<numba.core.ir.Assign object at 0x7fa9e01a5070>],
             '$58get_iter.13': [<numba.core.ir.Assign object at 0x7fa9e01a57f0>],
             '$60for_iter.1': [<numba.core.ir.Assign object at 0x7fa9e01a5460>],
             '$60for_iter.2': [<numba.core.ir.Assign object at 0x7fa9e01a53d0>],
             '$60for_iter.3': [<numba.core.ir.Assign object at 0x7fa9e01a51c0>],
             '$72binary_true_divide.6': [<numba.core.ir.Assign object at 0x7fa9e01a0610>],
             '$74binary_multiply.7': [<numba.core.ir.Assign object at 0x7fa9e01a0790>],
             '$76binary_add.8': [<numba.core.ir.Assign object at 0x7fa9e01a0910>],
             '$88return_value.1': [<numba.core.ir.Assign object at 0x7fa9e01a0df0>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x7fa9e018f730>],
             '$const16.6': [<numba.core.ir.Assign object at 0x7fa9e018fc70>],
             '$const28.1': [<numba.core.ir.Assign object at 0x7fa9e017b6d0>],
             '$const46.8': [<numba.core.ir.Assign object at 0x7fa9e01a5fa0>],
             '$const52.10': [<numba.core.ir.Assign object at 0x7fa9e01a5be0>],
             '$phi60.0': [<numba.core.ir.Assign object at 0x7fa9e017b970>],
             '$phi62.1': [<numba.core.ir.Assign object at 0x7fa9e01a5550>],
             'arr': [<numba.core.ir.Assign object at 0x7fa9e018f8e0>],
             'bool20': [<numba.core.ir.Assign object at 0x7fa9e018ff70>],
             'delta': [<numba.core.ir.Assign object at 0x7fa9e017bd30>],
             'div': [<numba.core.ir.Assign object at 0x7fa9e017b850>],
             'i': [<numba.core.ir.Assign object at 0x7fa9e01a57c0>],
             'num': [<numba.core.ir.Assign object at 0x7fa9e018f190>],
             'start': [<numba.core.ir.Assign object at 0x7faa1c5093a0>],
             'stop': [<numba.core.ir.Assign object at 0x7faa1c43ea60>]})
DEBUG:numba.core.ssa:SSA violators set()
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=759)
           2	LOAD_FAST(arg=0, lineno=759)
           4	LOAD_ATTR(arg=0, lineno=759)
           6	LOAD_CONST(arg=1, lineno=759)
           8	COMPARE_OP(arg=2, lineno=759)
          10	POP_JUMP_IF_FALSE(arg=20, lineno=759)
          12	LOAD_GLOBAL(arg=1, lineno=760)
          14	LOAD_CONST(arg=2, lineno=760)
          16	CALL_FUNCTION(arg=1, lineno=760)
          18	RAISE_VARARGS(arg=1, lineno=760)
>         20	LOAD_FAST(arg=0, lineno=761)
          22	LOAD_ATTR(arg=2, lineno=761)
          24	GET_ITER(arg=None, lineno=761)
>         26	FOR_ITER(arg=16, lineno=761)
          28	STORE_FAST(arg=1, lineno=761)
          30	LOAD_FAST(arg=1, lineno=762)
          32	STORE_FAST(arg=2, lineno=762)
          34	LOAD_CONST(arg=1, lineno=763)
          36	STORE_FAST(arg=3, lineno=763)
          38	POP_TOP(arg=None, lineno=764)
          40	JUMP_ABSOLUTE(arg=44, lineno=764)
          42	JUMP_ABSOLUTE(arg=26, lineno=764)
>         44	LOAD_CONST(arg=1, lineno=766)
          46	STORE_FAST(arg=4, lineno=766)
          48	LOAD_FAST(arg=0, lineno=767)
          50	LOAD_ATTR(arg=2, lineno=767)
          52	GET_ITER(arg=None, lineno=767)
>         54	FOR_ITER(arg=28, lineno=767)
          56	STORE_FAST(arg=1, lineno=767)
          58	LOAD_FAST(arg=1, lineno=768)
          60	LOAD_FAST(arg=2, lineno=768)
          62	COMPARE_OP(arg=4, lineno=768)
          64	POP_JUMP_IF_FALSE(arg=74, lineno=768)
          66	LOAD_FAST(arg=1, lineno=769)
          68	STORE_FAST(arg=2, lineno=769)
          70	LOAD_FAST(arg=4, lineno=770)
          72	STORE_FAST(arg=3, lineno=770)
>         74	LOAD_FAST(arg=4, lineno=771)
          76	LOAD_CONST(arg=3, lineno=771)
          78	INPLACE_ADD(arg=None, lineno=771)
          80	STORE_FAST(arg=4, lineno=771)
          82	JUMP_ABSOLUTE(arg=54, lineno=771)
>         84	LOAD_FAST(arg=3, lineno=772)
          86	RETURN_VALUE(arg=None, lineno=772)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=759)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=759)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=759)
DEBUG:numba.core.byteflow:stack ['$arry2.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=759)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=759)
DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$const6.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=20, lineno=759)
DEBUG:numba.core.byteflow:stack ['$8compare_op.3']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=760)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=760)
DEBUG:numba.core.byteflow:stack ['$12load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=760)
DEBUG:numba.core.byteflow:stack ['$12load_global.0', '$const14.1']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=760)
DEBUG:numba.core.byteflow:stack ['$16call_function.2']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=20 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=761)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=761)
DEBUG:numba.core.byteflow:stack ['$arry20.0']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=GET_ITER(arg=None, lineno=761)
DEBUG:numba.core.byteflow:stack ['$22load_attr.1']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=('$24get_iter.2',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi26.0']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=FOR_ITER(arg=16, lineno=761)
DEBUG:numba.core.byteflow:stack ['$phi26.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=('$phi26.0', '$26for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=28 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=766)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=46, inst=STORE_FAST(arg=4, lineno=766)
DEBUG:numba.core.byteflow:stack ['$const44.0']
DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_FAST(arg=0, lineno=767)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_ATTR(arg=2, lineno=767)
DEBUG:numba.core.byteflow:stack ['$arry48.1']
DEBUG:numba.core.byteflow:dispatch pc=52, inst=GET_ITER(arg=None, lineno=767)
DEBUG:numba.core.byteflow:stack ['$50load_attr.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=54, stack=('$52get_iter.3',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=28 nstack_initial=2), State(pc_initial=54 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi28.0', '$phi28.1']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=1, lineno=761)
DEBUG:numba.core.byteflow:stack ['$phi28.0', '$phi28.1']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=762)
DEBUG:numba.core.byteflow:stack ['$phi28.0']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=STORE_FAST(arg=2, lineno=762)
DEBUG:numba.core.byteflow:stack ['$phi28.0', '$v30.2']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=763)
DEBUG:numba.core.byteflow:stack ['$phi28.0']
DEBUG:numba.core.byteflow:dispatch pc=36, inst=STORE_FAST(arg=3, lineno=763)
DEBUG:numba.core.byteflow:stack ['$phi28.0', '$const34.3']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=POP_TOP(arg=None, lineno=764)
DEBUG:numba.core.byteflow:stack ['$phi28.0']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=JUMP_ABSOLUTE(arg=44, lineno=764)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=54 nstack_initial=1), State(pc_initial=44 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: ['$phi54.0']
DEBUG:numba.core.byteflow:dispatch pc=54, inst=FOR_ITER(arg=28, lineno=767)
DEBUG:numba.core.byteflow:stack ['$phi54.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=('$phi54.0', '$54for_iter.2'), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=56 nstack_initial=2)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=56 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=3, lineno=772)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=772)
DEBUG:numba.core.byteflow:stack ['$max_idx84.0']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=56 nstack_initial=2)])
DEBUG:numba.core.byteflow:stack: ['$phi56.0', '$phi56.1']
DEBUG:numba.core.byteflow:dispatch pc=56, inst=STORE_FAST(arg=1, lineno=767)
DEBUG:numba.core.byteflow:stack ['$phi56.0', '$phi56.1']
DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=768)
DEBUG:numba.core.byteflow:stack ['$phi56.0']
DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_FAST(arg=2, lineno=768)
DEBUG:numba.core.byteflow:stack ['$phi56.0', '$v58.2']
DEBUG:numba.core.byteflow:dispatch pc=62, inst=COMPARE_OP(arg=4, lineno=768)
DEBUG:numba.core.byteflow:stack ['$phi56.0', '$v58.2', '$max_value60.3']
DEBUG:numba.core.byteflow:dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=74, lineno=768)
DEBUG:numba.core.byteflow:stack ['$phi56.0', '$62compare_op.4']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=66, stack=('$phi56.0',), blockstack=(), npush=0), Edge(pc=74, stack=('$phi56.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=1), State(pc_initial=74 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi66.0']
DEBUG:numba.core.byteflow:dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=769)
DEBUG:numba.core.byteflow:stack ['$phi66.0']
DEBUG:numba.core.byteflow:dispatch pc=68, inst=STORE_FAST(arg=2, lineno=769)
DEBUG:numba.core.byteflow:stack ['$phi66.0', '$v66.1']
DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=770)
DEBUG:numba.core.byteflow:stack ['$phi66.0']
DEBUG:numba.core.byteflow:dispatch pc=72, inst=STORE_FAST(arg=3, lineno=770)
DEBUG:numba.core.byteflow:stack ['$phi66.0', '$idx70.2']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=74, stack=('$phi66.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=1), State(pc_initial=74 nstack_initial=1)])
DEBUG:numba.core.byteflow:stack: ['$phi74.0']
DEBUG:numba.core.byteflow:dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=771)
DEBUG:numba.core.byteflow:stack ['$phi74.0']
DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_CONST(arg=3, lineno=771)
DEBUG:numba.core.byteflow:stack ['$phi74.0', '$idx74.1']
DEBUG:numba.core.byteflow:dispatch pc=78, inst=INPLACE_ADD(arg=None, lineno=771)
DEBUG:numba.core.byteflow:stack ['$phi74.0', '$idx74.1', '$const76.2']
DEBUG:numba.core.byteflow:dispatch pc=80, inst=STORE_FAST(arg=4, lineno=771)
DEBUG:numba.core.byteflow:stack ['$phi74.0', '$78inplace_add.3']
DEBUG:numba.core.byteflow:dispatch pc=82, inst=JUMP_ABSOLUTE(arg=54, lineno=771)
DEBUG:numba.core.byteflow:stack ['$phi74.0']
DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=54, stack=('$phi74.0',), blockstack=(), npush=0)]
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=74 nstack_initial=1), State(pc_initial=54 nstack_initial=1)])
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=54 nstack_initial=1)])
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=1): {'$phi26.0'},
             State(pc_initial=28 nstack_initial=2): {'$phi28.1'},
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=1): {'$phi54.0'},
             State(pc_initial=56 nstack_initial=2): {'$phi56.1'},
             State(pc_initial=66 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=1): set(),
             State(pc_initial=84 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {'$phi26.0': State(pc_initial=20 nstack_initial=0),
 '$phi28.1': State(pc_initial=26 nstack_initial=1),
 '$phi54.0': State(pc_initial=44 nstack_initial=0),
 '$phi56.1': State(pc_initial=54 nstack_initial=1)}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi54.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0)),
                          ('$phi74.0', State(pc_initial=74 nstack_initial=1))},
             '$phi56.0': {('$phi54.0', State(pc_initial=54 nstack_initial=1))},
             '$phi56.1': {('$54for_iter.2',
                           State(pc_initial=54 nstack_initial=1))},
             '$phi66.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2))},
             '$phi74.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=1))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi54.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=1))},
             '$phi56.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=1))},
             '$phi56.1': {('$54for_iter.2',
                           State(pc_initial=54 nstack_initial=1))},
             '$phi66.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=1))},
             '$phi74.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi54.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0))},
             '$phi56.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0))},
             '$phi56.1': {('$54for_iter.2',
                           State(pc_initial=54 nstack_initial=1))},
             '$phi66.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0))},
             '$phi74.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0))}})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
            {'$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi54.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0))},
             '$phi56.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0))},
             '$phi56.1': {('$54for_iter.2',
                           State(pc_initial=54 nstack_initial=1))},
             '$phi66.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0))},
             '$phi74.0': {('$52get_iter.3',
                           State(pc_initial=44 nstack_initial=0))}})
DEBUG:numba.core.byteflow:keep phismap: {'$phi26.0': {('$24get_iter.2', State(pc_initial=20 nstack_initial=0))},
 '$phi28.1': {('$26for_iter.2', State(pc_initial=26 nstack_initial=1))},
 '$phi54.0': {('$52get_iter.3', State(pc_initial=44 nstack_initial=0))},
 '$phi56.1': {('$54for_iter.2', State(pc_initial=54 nstack_initial=1))}}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=20 nstack_initial=0): {'$phi26.0': '$24get_iter.2'},
             State(pc_initial=26 nstack_initial=1): {'$phi28.1': '$26for_iter.2'},
             State(pc_initial=44 nstack_initial=0): {'$phi54.0': '$52get_iter.3'},
             State(pc_initial=54 nstack_initial=1): {'$phi56.1': '$54for_iter.2'}})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arry2.0'}), (4, {'item': '$arry2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$arry20.0'}), (22, {'item': '$arry20.0', 'res': '$22load_attr.1'}), (24, {'value': '$22load_attr.1', 'res': '$24get_iter.2'})), outgoing_phis={'$phi26.0': '$24get_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$24get_iter.2',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=1):
AdaptBlockInfo(insts=((26, {'iterator': '$phi26.0', 'pair': '$26for_iter.1', 'indval': '$26for_iter.2', 'pred': '$26for_iter.3'}),), outgoing_phis={'$phi28.1': '$26for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 28: ('$phi26.0', '$26for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=28 nstack_initial=2):
AdaptBlockInfo(insts=((28, {'value': '$phi28.1'}), (30, {'res': '$v30.2'}), (32, {'value': '$v30.2'}), (34, {'res': '$const34.3'}), (36, {'value': '$const34.3'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$const44.0'}), (46, {'value': '$const44.0'}), (48, {'res': '$arry48.1'}), (50, {'item': '$arry48.1', 'res': '$50load_attr.2'}), (52, {'value': '$50load_attr.2', 'res': '$52get_iter.3'})), outgoing_phis={'$phi54.0': '$52get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ('$52get_iter.3',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=54 nstack_initial=1):
AdaptBlockInfo(insts=((54, {'iterator': '$phi54.0', 'pair': '$54for_iter.1', 'indval': '$54for_iter.2', 'pred': '$54for_iter.3'}),), outgoing_phis={'$phi56.1': '$54for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 56: ('$phi54.0', '$54for_iter.2')})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=56 nstack_initial=2):
AdaptBlockInfo(insts=((56, {'value': '$phi56.1'}), (58, {'res': '$v58.2'}), (60, {'res': '$max_value60.3'}), (62, {'lhs': '$v58.2', 'rhs': '$max_value60.3', 'res': '$62compare_op.4'}), (64, {'pred': '$62compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: ('$phi56.0',), 74: ('$phi56.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=1):
AdaptBlockInfo(insts=((66, {'res': '$v66.1'}), (68, {'value': '$v66.1'}), (70, {'res': '$idx70.2'}), (72, {'value': '$idx70.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ('$phi66.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=74 nstack_initial=1):
AdaptBlockInfo(insts=((74, {'res': '$idx74.1'}), (76, {'res': '$const76.2'}), (78, {'lhs': '$idx74.1', 'rhs': '$const76.2', 'res': '$78inplace_add.3'}), (80, {'value': '$78inplace_add.3'}), (82, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: ('$phi74.0',)})
DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$max_idx84.0'}), (86, {'retval': '$max_idx84.0', 'castval': '$86return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    arry = arg(0, name=arry)                 ['arry']
    $4load_attr.1 = getattr(value=arry, attr=size) ['$4load_attr.1', 'arry']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:759),), kws=(), vararg=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, attempt to get argmax of an empty sequence) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:760)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $22load_attr.1 = getattr(value=arry, attr=flat) ['$22load_attr.1', 'arry']
    $24get_iter.2 = getiter(value=$22load_attr.1) ['$22load_attr.1', '$24get_iter.2']
    $phi26.0 = $24get_iter.2                 ['$24get_iter.2', '$phi26.0']
    jump 26                                  []
label 26:
    $26for_iter.1 = iternext(value=$phi26.0) ['$26for_iter.1', '$phi26.0']
    $26for_iter.2 = pair_first(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.2']
    $26for_iter.3 = pair_second(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.3']
    $phi28.1 = $26for_iter.2                 ['$26for_iter.2', '$phi28.1']
    branch $26for_iter.3, 28, 44             ['$26for_iter.3']
label 28:
    v = $phi28.1                             ['$phi28.1', 'v']
    max_value = v                            ['max_value', 'v']
    max_idx = const(int, 0)                  ['max_idx']
    jump 44                                  []
label 44:
    idx = const(int, 0)                      ['idx']
    $50load_attr.2 = getattr(value=arry, attr=flat) ['$50load_attr.2', 'arry']
    $52get_iter.3 = getiter(value=$50load_attr.2) ['$50load_attr.2', '$52get_iter.3']
    $phi54.0 = $52get_iter.3                 ['$52get_iter.3', '$phi54.0']
    jump 54                                  []
label 54:
    $54for_iter.1 = iternext(value=$phi54.0) ['$54for_iter.1', '$phi54.0']
    $54for_iter.2 = pair_first(value=$54for_iter.1) ['$54for_iter.1', '$54for_iter.2']
    $54for_iter.3 = pair_second(value=$54for_iter.1) ['$54for_iter.1', '$54for_iter.3']
    $phi56.1 = $54for_iter.2                 ['$54for_iter.2', '$phi56.1']
    branch $54for_iter.3, 56, 84             ['$54for_iter.3']
label 56:
    v = $phi56.1                             ['$phi56.1', 'v']
    $62compare_op.4 = v > max_value          ['$62compare_op.4', 'max_value', 'v']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.4, func=bool64, args=(Var($62compare_op.4, arraymath.py:768),), kws=(), vararg=None) ['$62compare_op.4', '$64pred', 'bool64']
    branch $64pred, 66, 74                   ['$64pred']
label 66:
    max_value = v                            ['max_value', 'v']
    max_idx = idx                            ['idx', 'max_idx']
    jump 74                                  []
label 74:
    $const76.2 = const(int, 1)               ['$const76.2']
    $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined) ['$78inplace_add.3', '$const76.2', 'idx']
    idx = $78inplace_add.3                   ['$78inplace_add.3', 'idx']
    jump 54                                  []
label 84:
    $86return_value.1 = cast(value=max_idx)  ['$86return_value.1', 'max_idx']
    return $86return_value.1                 ['$86return_value.1']

DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:759),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block analysis pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const14.1 = const(str, attempt to get argmax of an empty sequence)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:760)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('attempt to get argmax of an empty sequence')
DEBUG:numba.core.ssa:==== SSA block analysis pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
DEBUG:numba.core.ssa:on stmt: $phi26.0 = $24get_iter.2
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG:numba.core.ssa:on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi28.1 = $26for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $26for_iter.3, 28, 44
DEBUG:numba.core.ssa:==== SSA block analysis pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: v = $phi28.1
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:on stmt: max_idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: jump 44
DEBUG:numba.core.ssa:==== SSA block analysis pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $50load_attr.2 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $52get_iter.3 = getiter(value=$50load_attr.2)
DEBUG:numba.core.ssa:on stmt: $phi54.0 = $52get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block analysis pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $54for_iter.1 = iternext(value=$phi54.0)
DEBUG:numba.core.ssa:on stmt: $54for_iter.2 = pair_first(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $54for_iter.3 = pair_second(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi56.1 = $54for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $54for_iter.3, 56, 84
DEBUG:numba.core.ssa:==== SSA block analysis pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: v = $phi56.1
DEBUG:numba.core.ssa:on stmt: $62compare_op.4 = v > max_value
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.4, func=bool64, args=(Var($62compare_op.4, arraymath.py:768),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 74
DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:on stmt: max_idx = idx
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block analysis pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $const76.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: idx = $78inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block analysis pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $86return_value.1 = cast(value=max_idx)
DEBUG:numba.core.ssa:on stmt: return $86return_value.1
DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
            {'$10pred': [<numba.core.ir.Assign object at 0x7faa2465fe20>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7faa246475b0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7faa243e0df0>],
             '$22load_attr.1': [<numba.core.ir.Assign object at 0x7faa2465f8e0>],
             '$24get_iter.2': [<numba.core.ir.Assign object at 0x7faa1c615730>],
             '$26for_iter.1': [<numba.core.ir.Assign object at 0x7faa1c615b50>],
             '$26for_iter.2': [<numba.core.ir.Assign object at 0x7faa1c38abe0>],
             '$26for_iter.3': [<numba.core.ir.Assign object at 0x7faa1c38ad00>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x7faa2465ff40>],
             '$50load_attr.2': [<numba.core.ir.Assign object at 0x7fa9e00d4ac0>],
             '$52get_iter.3': [<numba.core.ir.Assign object at 0x7fa9e00d4c40>],
             '$54for_iter.1': [<numba.core.ir.Assign object at 0x7fa9e00d4f40>],
             '$54for_iter.2': [<numba.core.ir.Assign object at 0x7fa9e00cf0a0>],
             '$54for_iter.3': [<numba.core.ir.Assign object at 0x7fa9e00cf1f0>],
             '$62compare_op.4': [<numba.core.ir.Assign object at 0x7fa9e00cf9d0>],
             '$64pred': [<numba.core.ir.Assign object at 0x7fa9e00cf6d0>],
             '$78inplace_add.3': [<numba.core.ir.Assign object at 0x7fa9e00ca460>],
             '$86return_value.1': [<numba.core.ir.Assign object at 0x7fa9e00ca7c0>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x7faa2465f850>],
             '$const14.1': [<numba.core.ir.Assign object at 0x7faa24647760>],
             '$const6.2': [<numba.core.ir.Assign object at 0x7faa2465fc10>],
             '$const76.2': [<numba.core.ir.Assign object at 0x7fa9e00ca280>],
             '$phi26.0': [<numba.core.ir.Assign object at 0x7faa243e02e0>],
             '$phi28.1': [<numba.core.ir.Assign object at 0x7faa1c615820>],
             '$phi54.0': [<numba.core.ir.Assign object at 0x7fa9e00d4850>],
             '$phi56.1': [<numba.core.ir.Assign object at 0x7fa9e00d4e50>],
             'arry': [<numba.core.ir.Assign object at 0x7faa24647040>],
             'bool10': [<numba.core.ir.Assign object at 0x7faa2465f7c0>],
             'bool64': [<numba.core.ir.Assign object at 0x7fa9e00cfbe0>],
             'idx': [<numba.core.ir.Assign object at 0x7fa9e00d4700>,
                     <numba.core.ir.Assign object at 0x7fa9e00ca400>],
             'max_idx': [<numba.core.ir.Assign object at 0x7fa9e00d43a0>,
                         <numba.core.ir.Assign object at 0x7fa9e00cf2b0>],
             'max_value': [<numba.core.ir.Assign object at 0x7fa9e00d4220>,
                           <numba.core.ir.Assign object at 0x7fa9e00cff10>],
             'v': [<numba.core.ir.Assign object at 0x7faa1c38afa0>,
                   <numba.core.ir.Assign object at 0x7fa9e00cf460>]})
DEBUG:numba.core.ssa:SSA violators {'max_value', 'max_idx', 'idx', 'v'}
DEBUG:numba.core.ssa:Fix SSA violator on var max_value
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:759),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const14.1 = const(str, attempt to get argmax of an empty sequence)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:760)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('attempt to get argmax of an empty sequence')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
DEBUG:numba.core.ssa:on stmt: $phi26.0 = $24get_iter.2
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG:numba.core.ssa:on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi28.1 = $26for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $26for_iter.3, 28, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: v = $phi28.1
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:first assign: max_value
DEBUG:numba.core.ssa:replaced with: max_value = v
DEBUG:numba.core.ssa:on stmt: max_idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: jump 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $50load_attr.2 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $52get_iter.3 = getiter(value=$50load_attr.2)
DEBUG:numba.core.ssa:on stmt: $phi54.0 = $52get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $54for_iter.1 = iternext(value=$phi54.0)
DEBUG:numba.core.ssa:on stmt: $54for_iter.2 = pair_first(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $54for_iter.3 = pair_second(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi56.1 = $54for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $54for_iter.3, 56, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: v = $phi56.1
DEBUG:numba.core.ssa:on stmt: $62compare_op.4 = v > max_value
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.4, func=bool64, args=(Var($62compare_op.4, arraymath.py:768),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:replaced with: max_value.1 = v
DEBUG:numba.core.ssa:on stmt: max_idx = idx
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $const76.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: idx = $78inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00ca970>
DEBUG:numba.core.ssa:on stmt: $86return_value.1 = cast(value=max_idx)
DEBUG:numba.core.ssa:on stmt: return $86return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {28: [<numba.core.ir.Assign object at 0x7faa243e0b20>],
             66: [<numba.core.ir.Assign object at 0x7faa243e05b0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:759),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const14.1 = const(str, attempt to get argmax of an empty sequence)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:760)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('attempt to get argmax of an empty sequence')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
DEBUG:numba.core.ssa:on stmt: $phi26.0 = $24get_iter.2
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG:numba.core.ssa:on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi28.1 = $26for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $26for_iter.3, 28, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: v = $phi28.1
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:on stmt: max_idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: jump 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $50load_attr.2 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $52get_iter.3 = getiter(value=$50load_attr.2)
DEBUG:numba.core.ssa:on stmt: $phi54.0 = $52get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: $54for_iter.1 = iternext(value=$phi54.0)
DEBUG:numba.core.ssa:on stmt: $54for_iter.2 = pair_first(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $54for_iter.3 = pair_second(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi56.1 = $54for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $54for_iter.3, 56, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: v = $phi56.1
DEBUG:numba.core.ssa:on stmt: $62compare_op.4 = v > max_value
DEBUG:numba.core.ssa:find_def var='max_value' stmt=$62compare_op.4 = v > max_value
DEBUG:numba.core.ssa:find_def_from_top label 56
DEBUG:numba.core.ssa:idom 54 from label 56
DEBUG:numba.core.ssa:find_def_from_bottom label 54
DEBUG:numba.core.ssa:find_def_from_top label 54
DEBUG:numba.core.ssa:insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 54
DEBUG:numba.core.ssa:find_def_from_bottom label 74
DEBUG:numba.core.ssa:find_def_from_top label 74
DEBUG:numba.core.ssa:insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 74
DEBUG:numba.core.ssa:find_def_from_bottom label 56
DEBUG:numba.core.ssa:find_def_from_top label 56
DEBUG:numba.core.ssa:idom 54 from label 56
DEBUG:numba.core.ssa:find_def_from_bottom label 54
DEBUG:numba.core.ssa:incoming_def max_value.2 = phi(incoming_values=[], incoming_blocks=[])
DEBUG:numba.core.ssa:find_def_from_bottom label 66
DEBUG:numba.core.ssa:incoming_def max_value.1 = v
DEBUG:numba.core.ssa:incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:767), Var(max_value.1, arraymath.py:769)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:find_def_from_bottom label 44
DEBUG:numba.core.ssa:find_def_from_top label 44
DEBUG:numba.core.ssa:insert phi node max_value.4 = phi(incoming_values=[], incoming_blocks=[]) at 44
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:find_def_from_top label 26
DEBUG:numba.core.ssa:idom 20 from label 26
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:find_def_from_top label 20
DEBUG:numba.core.ssa:idom 0 from label 20
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:find_def_from_top label 0
DEBUG:numba.core.ssa:incoming_def <class 'numba.core.ssa.UndefinedVariable'>
DEBUG:numba.core.ssa:find_def_from_bottom label 28
DEBUG:numba.core.ssa:incoming_def max_value = v
DEBUG:numba.core.ssa:incoming_def max_value.4 = phi(incoming_values=[Undefined, Var(max_value, arraymath.py:762)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:replaced with: $62compare_op.4 = v > max_value.2
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.4, func=bool64, args=(Var($62compare_op.4, arraymath.py:768),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: max_value.1 = v
DEBUG:numba.core.ssa:on stmt: max_idx = idx
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: $const76.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: idx = $78inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: $86return_value.1 = cast(value=max_idx)
DEBUG:numba.core.ssa:on stmt: return $86return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var max_idx
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:759),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const14.1 = const(str, attempt to get argmax of an empty sequence)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:760)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('attempt to get argmax of an empty sequence')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
DEBUG:numba.core.ssa:on stmt: $phi26.0 = $24get_iter.2
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG:numba.core.ssa:on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi28.1 = $26for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $26for_iter.3, 28, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: v = $phi28.1
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:on stmt: max_idx = const(int, 0)
DEBUG:numba.core.ssa:first assign: max_idx
DEBUG:numba.core.ssa:replaced with: max_idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: jump 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: max_value.4 = phi(incoming_values=[Undefined, Var(max_value, arraymath.py:762)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:on stmt: idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $50load_attr.2 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $52get_iter.3 = getiter(value=$50load_attr.2)
DEBUG:numba.core.ssa:on stmt: $phi54.0 = $52get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: max_value.2 = phi(incoming_values=[Var(max_value.3, arraymath.py:767), Var(max_value.4, arraymath.py:767)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: $54for_iter.1 = iternext(value=$phi54.0)
DEBUG:numba.core.ssa:on stmt: $54for_iter.2 = pair_first(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $54for_iter.3 = pair_second(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi56.1 = $54for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $54for_iter.3, 56, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: v = $phi56.1
DEBUG:numba.core.ssa:on stmt: $62compare_op.4 = v > max_value.2
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.4, func=bool64, args=(Var($62compare_op.4, arraymath.py:768),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: max_value.1 = v
DEBUG:numba.core.ssa:on stmt: max_idx = idx
DEBUG:numba.core.ssa:replaced with: max_idx.1 = idx
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:767), Var(max_value.1, arraymath.py:769)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:on stmt: $const76.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: idx = $78inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: $86return_value.1 = cast(value=max_idx)
DEBUG:numba.core.ssa:on stmt: return $86return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {28: [<numba.core.ir.Assign object at 0x7faa243e09d0>],
             66: [<numba.core.ir.Assign object at 0x7fa9e00cab80>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:759),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const14.1 = const(str, attempt to get argmax of an empty sequence)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:760)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('attempt to get argmax of an empty sequence')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
DEBUG:numba.core.ssa:on stmt: $phi26.0 = $24get_iter.2
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG:numba.core.ssa:on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi28.1 = $26for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $26for_iter.3, 28, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: v = $phi28.1
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:on stmt: max_idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: jump 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: max_value.4 = phi(incoming_values=[Undefined, Var(max_value, arraymath.py:762)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:on stmt: idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $50load_attr.2 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $52get_iter.3 = getiter(value=$50load_attr.2)
DEBUG:numba.core.ssa:on stmt: $phi54.0 = $52get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: max_value.2 = phi(incoming_values=[Var(max_value.3, arraymath.py:767), Var(max_value.4, arraymath.py:767)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: $54for_iter.1 = iternext(value=$phi54.0)
DEBUG:numba.core.ssa:on stmt: $54for_iter.2 = pair_first(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $54for_iter.3 = pair_second(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi56.1 = $54for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $54for_iter.3, 56, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: v = $phi56.1
DEBUG:numba.core.ssa:on stmt: $62compare_op.4 = v > max_value.2
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.4, func=bool64, args=(Var($62compare_op.4, arraymath.py:768),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: max_value.1 = v
DEBUG:numba.core.ssa:on stmt: max_idx.1 = idx
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:767), Var(max_value.1, arraymath.py:769)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:on stmt: $const76.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: idx = $78inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e01f0>
DEBUG:numba.core.ssa:on stmt: $86return_value.1 = cast(value=max_idx)
DEBUG:numba.core.ssa:find_def var='max_idx' stmt=$86return_value.1 = cast(value=max_idx)
DEBUG:numba.core.ssa:find_def_from_top label 84
DEBUG:numba.core.ssa:idom 54 from label 84
DEBUG:numba.core.ssa:find_def_from_bottom label 54
DEBUG:numba.core.ssa:find_def_from_top label 54
DEBUG:numba.core.ssa:insert phi node max_idx.2 = phi(incoming_values=[], incoming_blocks=[]) at 54
DEBUG:numba.core.ssa:find_def_from_bottom label 74
DEBUG:numba.core.ssa:find_def_from_top label 74
DEBUG:numba.core.ssa:insert phi node max_idx.3 = phi(incoming_values=[], incoming_blocks=[]) at 74
DEBUG:numba.core.ssa:find_def_from_bottom label 56
DEBUG:numba.core.ssa:find_def_from_top label 56
DEBUG:numba.core.ssa:idom 54 from label 56
DEBUG:numba.core.ssa:find_def_from_bottom label 54
DEBUG:numba.core.ssa:incoming_def max_idx.2 = phi(incoming_values=[], incoming_blocks=[])
DEBUG:numba.core.ssa:find_def_from_bottom label 66
DEBUG:numba.core.ssa:incoming_def max_idx.1 = idx
DEBUG:numba.core.ssa:incoming_def max_idx.3 = phi(incoming_values=[Var(max_idx.2, arraymath.py:772), Var(max_idx.1, arraymath.py:770)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:find_def_from_bottom label 44
DEBUG:numba.core.ssa:find_def_from_top label 44
DEBUG:numba.core.ssa:insert phi node max_idx.4 = phi(incoming_values=[], incoming_blocks=[]) at 44
DEBUG:numba.core.ssa:find_def_from_bottom label 26
DEBUG:numba.core.ssa:find_def_from_top label 26
DEBUG:numba.core.ssa:idom 20 from label 26
DEBUG:numba.core.ssa:find_def_from_bottom label 20
DEBUG:numba.core.ssa:find_def_from_top label 20
DEBUG:numba.core.ssa:idom 0 from label 20
DEBUG:numba.core.ssa:find_def_from_bottom label 0
DEBUG:numba.core.ssa:find_def_from_top label 0
DEBUG:numba.core.ssa:incoming_def <class 'numba.core.ssa.UndefinedVariable'>
DEBUG:numba.core.ssa:find_def_from_bottom label 28
DEBUG:numba.core.ssa:incoming_def max_idx = const(int, 0)
DEBUG:numba.core.ssa:incoming_def max_idx.4 = phi(incoming_values=[Undefined, Var(max_idx, arraymath.py:763)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:replaced with: $86return_value.1 = cast(value=max_idx.2)
DEBUG:numba.core.ssa:on stmt: return $86return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var idx
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:759),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const14.1 = const(str, attempt to get argmax of an empty sequence)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:760)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('attempt to get argmax of an empty sequence')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
DEBUG:numba.core.ssa:on stmt: $phi26.0 = $24get_iter.2
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG:numba.core.ssa:on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi28.1 = $26for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $26for_iter.3, 28, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: v = $phi28.1
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:on stmt: max_idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: jump 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: max_idx.4 = phi(incoming_values=[Undefined, Var(max_idx, arraymath.py:763)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:on stmt: max_value.4 = phi(incoming_values=[Undefined, Var(max_value, arraymath.py:762)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:on stmt: idx = const(int, 0)
DEBUG:numba.core.ssa:first assign: idx
DEBUG:numba.core.ssa:replaced with: idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $50load_attr.2 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $52get_iter.3 = getiter(value=$50load_attr.2)
DEBUG:numba.core.ssa:on stmt: $phi54.0 = $52get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: max_idx.2 = phi(incoming_values=[Var(max_idx.3, arraymath.py:772), Var(max_idx.4, arraymath.py:772)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: max_value.2 = phi(incoming_values=[Var(max_value.3, arraymath.py:767), Var(max_value.4, arraymath.py:767)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: $54for_iter.1 = iternext(value=$phi54.0)
DEBUG:numba.core.ssa:on stmt: $54for_iter.2 = pair_first(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $54for_iter.3 = pair_second(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi56.1 = $54for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $54for_iter.3, 56, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: v = $phi56.1
DEBUG:numba.core.ssa:on stmt: $62compare_op.4 = v > max_value.2
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.4, func=bool64, args=(Var($62compare_op.4, arraymath.py:768),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: max_value.1 = v
DEBUG:numba.core.ssa:on stmt: max_idx.1 = idx
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: max_idx.3 = phi(incoming_values=[Var(max_idx.2, arraymath.py:772), Var(max_idx.1, arraymath.py:770)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:on stmt: max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:767), Var(max_value.1, arraymath.py:769)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:on stmt: $const76.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: idx = $78inplace_add.3
DEBUG:numba.core.ssa:replaced with: idx.1 = $78inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cabb0>
DEBUG:numba.core.ssa:on stmt: $86return_value.1 = cast(value=max_idx.2)
DEBUG:numba.core.ssa:on stmt: return $86return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {44: [<numba.core.ir.Assign object at 0x7faa243e0d30>],
             74: [<numba.core.ir.Assign object at 0x7faa24656370>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:759),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const14.1 = const(str, attempt to get argmax of an empty sequence)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:760)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('attempt to get argmax of an empty sequence')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
DEBUG:numba.core.ssa:on stmt: $phi26.0 = $24get_iter.2
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG:numba.core.ssa:on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi28.1 = $26for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $26for_iter.3, 28, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: v = $phi28.1
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:on stmt: max_idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: jump 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: max_idx.4 = phi(incoming_values=[Undefined, Var(max_idx, arraymath.py:763)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:on stmt: max_value.4 = phi(incoming_values=[Undefined, Var(max_value, arraymath.py:762)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:on stmt: idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $50load_attr.2 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $52get_iter.3 = getiter(value=$50load_attr.2)
DEBUG:numba.core.ssa:on stmt: $phi54.0 = $52get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: max_idx.2 = phi(incoming_values=[Var(max_idx.3, arraymath.py:772), Var(max_idx.4, arraymath.py:772)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: max_value.2 = phi(incoming_values=[Var(max_value.3, arraymath.py:767), Var(max_value.4, arraymath.py:767)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: $54for_iter.1 = iternext(value=$phi54.0)
DEBUG:numba.core.ssa:on stmt: $54for_iter.2 = pair_first(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $54for_iter.3 = pair_second(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi56.1 = $54for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $54for_iter.3, 56, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: v = $phi56.1
DEBUG:numba.core.ssa:on stmt: $62compare_op.4 = v > max_value.2
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.4, func=bool64, args=(Var($62compare_op.4, arraymath.py:768),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: max_value.1 = v
DEBUG:numba.core.ssa:on stmt: max_idx.1 = idx
DEBUG:numba.core.ssa:find_def var='idx' stmt=max_idx.1 = idx
DEBUG:numba.core.ssa:find_def_from_top label 66
DEBUG:numba.core.ssa:idom 56 from label 66
DEBUG:numba.core.ssa:find_def_from_bottom label 56
DEBUG:numba.core.ssa:find_def_from_top label 56
DEBUG:numba.core.ssa:idom 54 from label 56
DEBUG:numba.core.ssa:find_def_from_bottom label 54
DEBUG:numba.core.ssa:find_def_from_top label 54
DEBUG:numba.core.ssa:insert phi node idx.2 = phi(incoming_values=[], incoming_blocks=[]) at 54
DEBUG:numba.core.ssa:find_def_from_bottom label 74
DEBUG:numba.core.ssa:incoming_def idx.1 = $78inplace_add.3
DEBUG:numba.core.ssa:find_def_from_bottom label 44
DEBUG:numba.core.ssa:incoming_def idx = const(int, 0)
DEBUG:numba.core.ssa:replaced with: max_idx.1 = idx.2
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: max_idx.3 = phi(incoming_values=[Var(max_idx.2, arraymath.py:772), Var(max_idx.1, arraymath.py:770)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:on stmt: max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:767), Var(max_value.1, arraymath.py:769)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:on stmt: $const76.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def var='idx' stmt=$78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:find_def_from_top label 74
DEBUG:numba.core.ssa:idom 56 from label 74
DEBUG:numba.core.ssa:find_def_from_bottom label 56
DEBUG:numba.core.ssa:find_def_from_top label 56
DEBUG:numba.core.ssa:idom 54 from label 56
DEBUG:numba.core.ssa:find_def_from_bottom label 54
DEBUG:numba.core.ssa:replaced with: $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: idx.1 = $78inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7faa243e0550>
DEBUG:numba.core.ssa:on stmt: $86return_value.1 = cast(value=max_idx.2)
DEBUG:numba.core.ssa:on stmt: return $86return_value.1
DEBUG:numba.core.ssa:Fix SSA violator on var v
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:759),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const14.1 = const(str, attempt to get argmax of an empty sequence)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:760)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('attempt to get argmax of an empty sequence')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
DEBUG:numba.core.ssa:on stmt: $phi26.0 = $24get_iter.2
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG:numba.core.ssa:on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi28.1 = $26for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $26for_iter.3, 28, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: v = $phi28.1
DEBUG:numba.core.ssa:first assign: v
DEBUG:numba.core.ssa:replaced with: v = $phi28.1
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:on stmt: max_idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: jump 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: max_idx.4 = phi(incoming_values=[Undefined, Var(max_idx, arraymath.py:763)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:on stmt: max_value.4 = phi(incoming_values=[Undefined, Var(max_value, arraymath.py:762)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:on stmt: idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $50load_attr.2 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $52get_iter.3 = getiter(value=$50load_attr.2)
DEBUG:numba.core.ssa:on stmt: $phi54.0 = $52get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: idx.2 = phi(incoming_values=[Var(idx.1, arraymath.py:771), Var(idx, arraymath.py:766)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: max_idx.2 = phi(incoming_values=[Var(max_idx.3, arraymath.py:772), Var(max_idx.4, arraymath.py:772)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: max_value.2 = phi(incoming_values=[Var(max_value.3, arraymath.py:767), Var(max_value.4, arraymath.py:767)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: $54for_iter.1 = iternext(value=$phi54.0)
DEBUG:numba.core.ssa:on stmt: $54for_iter.2 = pair_first(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $54for_iter.3 = pair_second(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi56.1 = $54for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $54for_iter.3, 56, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: v = $phi56.1
DEBUG:numba.core.ssa:replaced with: v.1 = $phi56.1
DEBUG:numba.core.ssa:on stmt: $62compare_op.4 = v > max_value.2
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.4, func=bool64, args=(Var($62compare_op.4, arraymath.py:768),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: max_value.1 = v
DEBUG:numba.core.ssa:on stmt: max_idx.1 = idx.2
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: max_idx.3 = phi(incoming_values=[Var(max_idx.2, arraymath.py:772), Var(max_idx.1, arraymath.py:770)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:on stmt: max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:767), Var(max_value.1, arraymath.py:769)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:on stmt: $const76.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: idx.1 = $78inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7fa9e00cab80>
DEBUG:numba.core.ssa:on stmt: $86return_value.1 = cast(value=max_idx.2)
DEBUG:numba.core.ssa:on stmt: return $86return_value.1
DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
            {28: [<numba.core.ir.Assign object at 0x7faa243e0700>],
             56: [<numba.core.ir.Assign object at 0x7faa243e01f0>]})
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: arry = arg(0, name=arry)
DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
DEBUG:numba.core.ssa:on stmt: bool10 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:759),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $10pred, 12, 20
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 12
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG:numba.core.ssa:on stmt: $const14.1 = const(str, attempt to get argmax of an empty sequence)
DEBUG:numba.core.ssa:on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:760)], kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: <static> raise <class 'ValueError'>('attempt to get argmax of an empty sequence')
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 20
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
DEBUG:numba.core.ssa:on stmt: $phi26.0 = $24get_iter.2
DEBUG:numba.core.ssa:on stmt: jump 26
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: $26for_iter.1 = iternext(value=$phi26.0)
DEBUG:numba.core.ssa:on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi28.1 = $26for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $26for_iter.3, 28, 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 28
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: v = $phi28.1
DEBUG:numba.core.ssa:on stmt: max_value = v
DEBUG:numba.core.ssa:find_def var='v' stmt=max_value = v
DEBUG:numba.core.ssa:on stmt: max_idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: jump 44
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: max_idx.4 = phi(incoming_values=[Undefined, Var(max_idx, arraymath.py:763)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:on stmt: max_value.4 = phi(incoming_values=[Undefined, Var(max_value, arraymath.py:762)], incoming_blocks=[26, 28])
DEBUG:numba.core.ssa:on stmt: idx = const(int, 0)
DEBUG:numba.core.ssa:on stmt: $50load_attr.2 = getattr(value=arry, attr=flat)
DEBUG:numba.core.ssa:on stmt: $52get_iter.3 = getiter(value=$50load_attr.2)
DEBUG:numba.core.ssa:on stmt: $phi54.0 = $52get_iter.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 54
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: idx.2 = phi(incoming_values=[Var(idx.1, arraymath.py:771), Var(idx, arraymath.py:766)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: max_idx.2 = phi(incoming_values=[Var(max_idx.3, arraymath.py:772), Var(max_idx.4, arraymath.py:772)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: max_value.2 = phi(incoming_values=[Var(max_value.3, arraymath.py:767), Var(max_value.4, arraymath.py:767)], incoming_blocks=[74, 44])
DEBUG:numba.core.ssa:on stmt: $54for_iter.1 = iternext(value=$phi54.0)
DEBUG:numba.core.ssa:on stmt: $54for_iter.2 = pair_first(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $54for_iter.3 = pair_second(value=$54for_iter.1)
DEBUG:numba.core.ssa:on stmt: $phi56.1 = $54for_iter.2
DEBUG:numba.core.ssa:on stmt: branch $54for_iter.3, 56, 84
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 56
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: v.1 = $phi56.1
DEBUG:numba.core.ssa:on stmt: $62compare_op.4 = v > max_value.2
DEBUG:numba.core.ssa:find_def var='v' stmt=$62compare_op.4 = v > max_value.2
DEBUG:numba.core.ssa:replaced with: $62compare_op.4 = v.1 > max_value.2
DEBUG:numba.core.ssa:on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG:numba.core.ssa:on stmt: $64pred = call bool64($62compare_op.4, func=bool64, args=(Var($62compare_op.4, arraymath.py:768),), kws=(), vararg=None)
DEBUG:numba.core.ssa:on stmt: branch $64pred, 66, 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: max_value.1 = v
DEBUG:numba.core.ssa:find_def var='v' stmt=max_value.1 = v
DEBUG:numba.core.ssa:find_def_from_top label 66
DEBUG:numba.core.ssa:idom 56 from label 66
DEBUG:numba.core.ssa:find_def_from_bottom label 56
DEBUG:numba.core.ssa:replaced with: max_value.1 = v.1
DEBUG:numba.core.ssa:on stmt: max_idx.1 = idx.2
DEBUG:numba.core.ssa:on stmt: jump 74
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 74
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: max_idx.3 = phi(incoming_values=[Var(max_idx.2, arraymath.py:772), Var(max_idx.1, arraymath.py:770)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:on stmt: max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:767), Var(max_value.1, arraymath.py:769)], incoming_blocks=[56, 66])
DEBUG:numba.core.ssa:on stmt: $const76.2 = const(int, 1)
DEBUG:numba.core.ssa:on stmt: $78inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const76.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG:numba.core.ssa:on stmt: idx.1 = $78inplace_add.3
DEBUG:numba.core.ssa:on stmt: jump 54
DEBUG:numba.core.ssa:==== SSA block rewrite pass on 84
DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7fa9e00cacd0>
DEBUG:numba.core.ssa:on stmt: $86return_value.1 = cast(value=max_idx.2)
DEBUG:numba.core.ssa:on stmt: return $86return_value.1
DEBUG:numba.core.byteflow:bytecode dump:
>          0	NOP(arg=None, lineno=1204)
           2	LOAD_GLOBAL(arg=0, lineno=1204)
           4	LOAD_METHOD(arg=1, lineno=1204)
           6	LOAD_GLOBAL(arg=2, lineno=1204)
           8	LOAD_METHOD(arg=3, lineno=1204)
          10	LOAD_GLOBAL(arg=4, lineno=1204)
          12	LOAD_FAST(arg=0, lineno=1204)
          14	CALL_FUNCTION(arg=1, lineno=1204)
          16	CALL_METHOD(arg=1, lineno=1204)
          18	LOAD_FAST(arg=0, lineno=1204)
          20	CALL_METHOD(arg=2, lineno=1204)
          22	UNPACK_SEQUENCE(arg=5, lineno=1204)
          24	STORE_FAST(arg=1, lineno=1204)
          26	STORE_FAST(arg=1, lineno=1204)
          28	STORE_FAST(arg=2, lineno=1204)
          30	STORE_FAST(arg=1, lineno=1204)
          32	STORE_FAST(arg=1, lineno=1204)
          34	LOAD_FAST(arg=2, lineno=1205)
          36	LOAD_CONST(arg=1, lineno=1205)
          38	BINARY_POWER(arg=None, lineno=1205)
          40	RETURN_VALUE(arg=None, lineno=1205)
DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG:numba.core.byteflow:stack: []
DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=1204)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1204)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$2load_global.0']
DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_GLOBAL(arg=2, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$4load_method.1']
DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_METHOD(arg=3, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$6load_global.2']
DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_GLOBAL(arg=4, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$8load_method.3']
DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$8load_method.3', '$10load_global.4']
DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$8load_method.3', '$10load_global.4', '$x12.5']
DEBUG:numba.core.byteflow:dispatch pc=16, inst=CALL_METHOD(arg=1, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$8load_method.3', '$14call_function.6']
DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$16call_method.7']
DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_METHOD(arg=2, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$16call_method.7', '$x18.8']
DEBUG:numba.core.byteflow:dispatch pc=22, inst=UNPACK_SEQUENCE(arg=5, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$20call_method.9']
DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=1, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$22unpack_sequence.14', '$22unpack_sequence.13', '$22unpack_sequence.12', '$22unpack_sequence.11', '$22unpack_sequence.10']
DEBUG:numba.core.byteflow:dispatch pc=26, inst=STORE_FAST(arg=1, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$22unpack_sequence.14', '$22unpack_sequence.13', '$22unpack_sequence.12', '$22unpack_sequence.11']
DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=2, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$22unpack_sequence.14', '$22unpack_sequence.13', '$22unpack_sequence.12']
DEBUG:numba.core.byteflow:dispatch pc=30, inst=STORE_FAST(arg=1, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$22unpack_sequence.14', '$22unpack_sequence.13']
DEBUG:numba.core.byteflow:dispatch pc=32, inst=STORE_FAST(arg=1, lineno=1204)
DEBUG:numba.core.byteflow:stack ['$22unpack_sequence.14']
DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=1205)
DEBUG:numba.core.byteflow:stack []
DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1205)
DEBUG:numba.core.byteflow:stack ['$r_value34.16']
DEBUG:numba.core.byteflow:dispatch pc=38, inst=BINARY_POWER(arg=None, lineno=1205)
DEBUG:numba.core.byteflow:stack ['$r_value34.16', '$const36.17']
DEBUG:numba.core.byteflow:dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=1205)
DEBUG:numba.core.byteflow:stack ['$38binary_power.18']
DEBUG:numba.core.byteflow:end state. edges=[]
DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG:numba.core.byteflow:defmap: {}
DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
DEBUG:numba.core.byteflow:keep phismap: {}
DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'res': '$x12.5'}), (14, {'func': '$10load_global.4', 'args': ['$x12.5'], 'res': '$14call_function.6'}), (16, {'func': '$8load_method.3', 'args': ['$14call_function.6'], 'res': '$16call_method.7'}), (18, {'res': '$x18.8'}), (20, {'func': '$4load_method.1', 'args': ['$16call_method.7', '$x18.8'], 'res': '$20call_method.9'}), (22, {'iterable': '$20call_method.9', 'stores': ['$22unpack_sequence.10', '$22unpack_sequence.11', '$22unpack_sequence.12', '$22unpack_sequence.13', '$22unpack_sequence.14'], 'tupleobj': '$22unpack_sequence.15'}), (24, {'value': '$22unpack_sequence.10'}), (26, {'value': '$22unpack_sequence.11'}), (28, {'value': '$22unpack_sequence.12'}), (30, {'value': '$22unpack_sequence.13'}), (32, {'value': '$22unpack_sequence.14'}), (34, {'res': '$r_value34.16'}), (36, {'res': '$const36.17'}), (38, {'lhs': '$r_value34.16', 'rhs': '$const36.17', 'res': '$38binary_power.18'}), (40, {'retval': '$38binary_power.18', 'castval': '$40return_value.19'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG:numba.core.interpreter:label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(stats: <module 'scipy.stats' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/scipy/stats/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=linregress) ['$2load_global.0', '$4load_method.1']
    $6load_global.2 = global(np: <module 'numpy' from '/home/amir/Desktop/smartforceps_ai_models/venv/lib/python3.8/site-packages/numpy/__init__.py'>) ['$6load_global.2']
    $8load_method.3 = getattr(value=$6load_global.2, attr=arange) ['$6load_global.2', '$8load_method.3']
    $10load_global.4 = global(len: <built-in function len>) ['$10load_global.4']
    $14call_function.6 = call $10load_global.4(x, func=$10load_global.4, args=[Var(x, tsfeatures.py:1204)], kws=(), vararg=None) ['$10load_global.4', '$14call_function.6', 'x']
    $16call_method.7 = call $8load_method.3($14call_function.6, func=$8load_method.3, args=[Var($14call_function.6, tsfeatures.py:1204)], kws=(), vararg=None) ['$14call_function.6', '$16call_method.7', '$8load_method.3']
    $20call_method.9 = call $4load_method.1($16call_method.7, x, func=$4load_method.1, args=[Var($16call_method.7, tsfeatures.py:1204), Var(x, tsfeatures.py:1204)], kws=(), vararg=None) ['$16call_method.7', '$20call_method.9', '$4load_method.1', 'x']
    $22unpack_sequence.15 = exhaust_iter(value=$20call_method.9, count=5) ['$20call_method.9', '$22unpack_sequence.15']
    $22unpack_sequence.10 = static_getitem(value=$22unpack_sequence.15, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.10', '$22unpack_sequence.15']
    $22unpack_sequence.11 = static_getitem(value=$22unpack_sequence.15, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.11', '$22unpack_sequence.15']
    $22unpack_sequence.12 = static_getitem(value=$22unpack_sequence.15, index=2, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.12', '$22unpack_sequence.15']
    $22unpack_sequence.13 = static_getitem(value=$22unpack_sequence.15, index=3, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.13', '$22unpack_sequence.15']
    $22unpack_sequence.14 = static_getitem(value=$22unpack_sequence.15, index=4, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.14', '$22unpack_sequence.15']
    _ = $22unpack_sequence.10                ['$22unpack_sequence.10', '_']
    _.1 = $22unpack_sequence.11              ['$22unpack_sequence.11', '_.1']
    r_value = $22unpack_sequence.12          ['$22unpack_sequence.12', 'r_value']
    _.2 = $22unpack_sequence.13              ['$22unpack_sequence.13', '_.2']
    _.3 = $22unpack_sequence.14              ['$22unpack_sequence.14', '_.3']
    $const36.17 = const(int, 2)              ['$const36.17']
    $38binary_power.18 = r_value ** $const36.17 ['$38binary_power.18', '$const36.17', 'r_value']
    $40return_value.19 = cast(value=$38binary_power.18) ['$38binary_power.18', '$40return_value.19']
    return $40return_value.19                ['$40return_value.19']

INFO:numba.core.transforms:finding looplift candidates
INFO:root:learning rate list:[0.001, 0.01, 0.1]
INFO:root:units size list (LSTM):[100, 200, 400, 600]
INFO:root:depth list (InceptionTime):[6, 8, 10, 12]
INFO:root:min validation loss idx: [1], [3], [45]
INFO:root:Epoch: 1 loss: 0.8159 accuracy0.6859 val_loss: 1680650.1250 val_accuracy0.4251%

INFO:root:Epoch: 2 loss: 0.5349 accuracy0.7414 val_loss: 30883.2148 val_accuracy0.4251%

INFO:root:Epoch: 3 loss: 0.5005 accuracy0.7631 val_loss: 1837.3301 val_accuracy0.4251%

INFO:root:Epoch: 4 loss: 0.4970 accuracy0.7781 val_loss: 367.1761 val_accuracy0.4251%

INFO:root:Epoch: 5 loss: 0.4778 accuracy0.7826 val_loss: 64.0725 val_accuracy0.4251%

INFO:root:Epoch: 6 loss: 0.4765 accuracy0.7826 val_loss: 10.4670 val_accuracy0.4251%

INFO:root:Epoch: 7 loss: 0.4828 accuracy0.7721 val_loss: 17.1835 val_accuracy0.4251%

INFO:root:Epoch: 8 loss: 0.4707 accuracy0.7841 val_loss: 7.5932 val_accuracy0.4251%

INFO:root:Epoch: 9 loss: 0.4682 accuracy0.7871 val_loss: 1.8067 val_accuracy0.6617%

INFO:root:Epoch: 10 loss: 0.4531 accuracy0.7924 val_loss: 0.8410 val_accuracy0.7216%

INFO:root:Epoch: 11 loss: 0.4822 accuracy0.7759 val_loss: 1.1402 val_accuracy0.7216%

INFO:root:Epoch: 12 loss: 0.4733 accuracy0.7931 val_loss: 0.6577 val_accuracy0.7066%

INFO:root:Epoch: 13 loss: 0.4478 accuracy0.7886 val_loss: 0.6164 val_accuracy0.7515%

INFO:root:Epoch: 14 loss: 0.4417 accuracy0.8096 val_loss: 0.6960 val_accuracy0.6287%

INFO:root:Epoch: 15 loss: 0.4403 accuracy0.8066 val_loss: 1.3184 val_accuracy0.5150%

INFO:root:Epoch: 16 loss: 0.4260 accuracy0.8073 val_loss: 0.6344 val_accuracy0.7754%

INFO:root:Epoch: 17 loss: 0.4231 accuracy0.8178 val_loss: 0.4897 val_accuracy0.7934%

INFO:root:Epoch: 18 loss: 0.4154 accuracy0.8253 val_loss: 0.6162 val_accuracy0.6347%

INFO:root:Epoch: 19 loss: 0.4150 accuracy0.8073 val_loss: 0.8523 val_accuracy0.7844%

INFO:root:Epoch: 20 loss: 0.4236 accuracy0.8088 val_loss: 0.5033 val_accuracy0.7754%

INFO:root:Epoch: 21 loss: 0.4180 accuracy0.8051 val_loss: 0.7563 val_accuracy0.7994%

INFO:root:Epoch: 22 loss: 0.3943 accuracy0.8291 val_loss: 0.8228 val_accuracy0.7665%

INFO:root:Epoch: 23 loss: 0.3999 accuracy0.8208 val_loss: 0.8208 val_accuracy0.7246%

INFO:root:Epoch: 24 loss: 0.4231 accuracy0.8148 val_loss: 0.6896 val_accuracy0.7695%

INFO:root:Epoch: 25 loss: 0.3956 accuracy0.8276 val_loss: 0.6588 val_accuracy0.7784%

INFO:root:Epoch: 26 loss: 0.3903 accuracy0.8373 val_loss: 1.0574 val_accuracy0.7844%

INFO:root:Epoch: 27 loss: 0.3708 accuracy0.8351 val_loss: 0.8517 val_accuracy0.7904%

INFO:root:Epoch: 28 loss: 0.3644 accuracy0.8351 val_loss: 0.7395 val_accuracy0.8174%

INFO:root:Epoch: 29 loss: 0.3813 accuracy0.8291 val_loss: 0.6210 val_accuracy0.8024%

INFO:root:Epoch: 30 loss: 0.3496 accuracy0.8478 val_loss: 0.6206 val_accuracy0.7695%

INFO:root:Epoch: 31 loss: 0.3377 accuracy0.8598 val_loss: 0.5061 val_accuracy0.8263%

INFO:root:Epoch: 32 loss: 0.3248 accuracy0.8546 val_loss: 0.8404 val_accuracy0.7904%

INFO:root:Epoch: 33 loss: 0.3114 accuracy0.8636 val_loss: 0.5322 val_accuracy0.7994%

INFO:root:Epoch: 34 loss: 0.3139 accuracy0.8651 val_loss: 0.5021 val_accuracy0.8383%

INFO:root:Epoch: 35 loss: 0.3258 accuracy0.8621 val_loss: 0.7320 val_accuracy0.7994%

INFO:root:Epoch: 36 loss: 0.3089 accuracy0.8696 val_loss: 0.6562 val_accuracy0.8114%

INFO:root:Epoch: 37 loss: 0.3267 accuracy0.8726 val_loss: 0.4141 val_accuracy0.8293%

INFO:root:Epoch: 38 loss: 0.3172 accuracy0.8688 val_loss: 0.5018 val_accuracy0.8054%

INFO:root:Epoch: 39 loss: 0.3320 accuracy0.8666 val_loss: 0.5413 val_accuracy0.8204%

INFO:root:Epoch: 40 loss: 0.3784 accuracy0.8336 val_loss: 0.4956 val_accuracy0.8443%

INFO:root:Epoch: 41 loss: 0.3196 accuracy0.8711 val_loss: 0.6249 val_accuracy0.7934%

INFO:root:Epoch: 42 loss: 0.2945 accuracy0.8718 val_loss: 0.5881 val_accuracy0.8234%

INFO:root:Epoch: 43 loss: 0.2891 accuracy0.8748 val_loss: 0.4647 val_accuracy0.8054%

INFO:root:Epoch: 44 loss: 0.2732 accuracy0.8846 val_loss: 0.5131 val_accuracy0.8204%

INFO:root:Epoch: 45 loss: 0.2902 accuracy0.8801 val_loss: 0.4862 val_accuracy0.8293%

INFO:root:Epoch: 46 loss: 0.3025 accuracy0.8801 val_loss: 0.4002 val_accuracy0.8533%

INFO:root:Epoch: 47 loss: 0.2859 accuracy0.8703 val_loss: 0.4997 val_accuracy0.8234%

INFO:root:Epoch: 48 loss: 0.2868 accuracy0.8748 val_loss: 0.5538 val_accuracy0.7994%

INFO:root:Epoch: 49 loss: 0.2647 accuracy0.8906 val_loss: 0.4795 val_accuracy0.8114%

INFO:root:Epoch: 50 loss: 0.2672 accuracy0.8876 val_loss: 0.4511 val_accuracy0.8234%

INFO:root:Epoch: 51 loss: 0.2531 accuracy0.8973 val_loss: 0.4509 val_accuracy0.8413%

INFO:root:Epoch: 52 loss: 0.2521 accuracy0.8928 val_loss: 0.5170 val_accuracy0.8293%

INFO:root:Epoch: 53 loss: 0.2815 accuracy0.8793 val_loss: 0.4357 val_accuracy0.8234%

INFO:root:Epoch: 54 loss: 0.2874 accuracy0.8808 val_loss: 0.4395 val_accuracy0.7934%

INFO:root:Epoch: 55 loss: 0.2466 accuracy0.9048 val_loss: 0.4057 val_accuracy0.8323%

INFO:root:Epoch: 56 loss: 0.2182 accuracy0.9168 val_loss: 0.4818 val_accuracy0.8503%

INFO:root:Epoch: 57 loss: 0.2474 accuracy0.9003 val_loss: 0.6144 val_accuracy0.8084%

INFO:root:Epoch: 58 loss: 0.2667 accuracy0.8928 val_loss: 0.6174 val_accuracy0.8144%

INFO:root:Epoch: 59 loss: 0.2413 accuracy0.8996 val_loss: 0.5461 val_accuracy0.8174%

INFO:root:Epoch: 60 loss: 0.2440 accuracy0.9010 val_loss: 0.5104 val_accuracy0.8114%

INFO:root:Epoch: 61 loss: 0.2253 accuracy0.9003 val_loss: 0.6538 val_accuracy0.8114%

INFO:root:Epoch: 62 loss: 0.2345 accuracy0.9063 val_loss: 0.7681 val_accuracy0.8024%

INFO:root:Epoch: 63 loss: 0.2346 accuracy0.9055 val_loss: 0.5258 val_accuracy0.8204%

INFO:root:Epoch: 64 loss: 0.2322 accuracy0.9018 val_loss: 0.6747 val_accuracy0.8413%

INFO:root:Epoch: 65 loss: 0.2042 accuracy0.9228 val_loss: 0.7048 val_accuracy0.8024%

INFO:root:Epoch: 66 loss: 0.2018 accuracy0.9250 val_loss: 0.6745 val_accuracy0.8263%

INFO:root:Epoch: 67 loss: 0.2053 accuracy0.9078 val_loss: 0.6047 val_accuracy0.8204%

INFO:root:Epoch: 68 loss: 0.2183 accuracy0.9138 val_loss: 0.5859 val_accuracy0.7994%

INFO:root:Epoch: 69 loss: 0.2095 accuracy0.9160 val_loss: 0.5551 val_accuracy0.7904%

INFO:root:Epoch: 70 loss: 0.2552 accuracy0.8906 val_loss: 0.4893 val_accuracy0.8353%

INFO:root:Epoch: 71 loss: 0.2372 accuracy0.8966 val_loss: 0.5240 val_accuracy0.7784%

INFO:root:Epoch: 72 loss: 0.2261 accuracy0.9048 val_loss: 0.5426 val_accuracy0.7695%

INFO:root:Epoch: 73 loss: 0.2120 accuracy0.9123 val_loss: 0.5482 val_accuracy0.8263%

INFO:root:Epoch: 74 loss: 0.1943 accuracy0.9175 val_loss: 0.5788 val_accuracy0.7904%

INFO:root:Epoch: 75 loss: 0.1849 accuracy0.9273 val_loss: 0.6679 val_accuracy0.7575%

INFO:root:Epoch: 76 loss: 0.1756 accuracy0.9198 val_loss: 0.7351 val_accuracy0.7515%

INFO:root:Epoch: 77 loss: 0.1573 accuracy0.9340 val_loss: 0.5830 val_accuracy0.8174%

INFO:root:Epoch: 78 loss: 0.1695 accuracy0.9318 val_loss: 0.6612 val_accuracy0.7844%

INFO:root:Epoch: 79 loss: 0.1875 accuracy0.9115 val_loss: 0.8358 val_accuracy0.7485%

INFO:root:Epoch: 80 loss: 0.1854 accuracy0.9280 val_loss: 0.7121 val_accuracy0.7754%

INFO:root:Epoch: 81 loss: 0.1755 accuracy0.9325 val_loss: 0.8407 val_accuracy0.7275%

INFO:root:Epoch: 82 loss: 0.2045 accuracy0.9160 val_loss: 0.7168 val_accuracy0.7455%

INFO:root:Epoch: 83 loss: 0.1727 accuracy0.9280 val_loss: 0.8565 val_accuracy0.6946%

INFO:root:Epoch: 84 loss: 0.1466 accuracy0.9370 val_loss: 0.8692 val_accuracy0.7156%

INFO:root:Epoch: 85 loss: 0.1345 accuracy0.9468 val_loss: 0.7225 val_accuracy0.7545%

INFO:root:Epoch: 86 loss: 0.1478 accuracy0.9348 val_loss: 0.7397 val_accuracy0.7784%

INFO:root:Epoch: 87 loss: 0.1508 accuracy0.9348 val_loss: 0.6800 val_accuracy0.8084%

INFO:root:Epoch: 88 loss: 0.1507 accuracy0.9370 val_loss: 0.5825 val_accuracy0.8084%

INFO:root:Epoch: 89 loss: 0.1522 accuracy0.9333 val_loss: 0.6396 val_accuracy0.8084%

INFO:root:Epoch: 90 loss: 0.1508 accuracy0.9348 val_loss: 0.6972 val_accuracy0.8323%

INFO:root:Epoch: 91 loss: 0.1478 accuracy0.9340 val_loss: 0.6857 val_accuracy0.8383%

INFO:root:Epoch: 92 loss: 0.1709 accuracy0.9243 val_loss: 0.6250 val_accuracy0.8263%

INFO:root:Epoch: 93 loss: 0.1445 accuracy0.9430 val_loss: 0.7540 val_accuracy0.8114%

INFO:root:Epoch: 94 loss: 0.1370 accuracy0.9453 val_loss: 0.7522 val_accuracy0.8144%

INFO:root:Epoch: 95 loss: 0.1186 accuracy0.9475 val_loss: 0.9426 val_accuracy0.7964%

INFO:root:Epoch: 96 loss: 0.1101 accuracy0.9535 val_loss: 0.8910 val_accuracy0.8383%

INFO:root:Epoch: 97 loss: 0.1048 accuracy0.9550 val_loss: 0.7521 val_accuracy0.7844%

INFO:root:Epoch: 98 loss: 0.0969 accuracy0.9595 val_loss: 0.9006 val_accuracy0.8054%

INFO:root:Epoch: 99 loss: 0.1165 accuracy0.9513 val_loss: 0.9982 val_accuracy0.8293%

INFO:root:Epoch: 100 loss: 0.1258 accuracy0.9453 val_loss: 0.7670 val_accuracy0.8114%

INFO:root:Epoch: 101 loss: 0.1226 accuracy0.9528 val_loss: 0.8636 val_accuracy0.7844%

INFO:root:Epoch: 102 loss: 0.1234 accuracy0.9475 val_loss: 1.1939 val_accuracy0.7934%

INFO:root:Epoch: 103 loss: 0.1353 accuracy0.9460 val_loss: 0.9472 val_accuracy0.8323%

INFO:root:Epoch: 104 loss: 0.1678 accuracy0.9280 val_loss: 1.0213 val_accuracy0.7365%

INFO:root:Epoch: 105 loss: 0.1434 accuracy0.9363 val_loss: 0.7056 val_accuracy0.8084%

INFO:root:Epoch: 106 loss: 0.1279 accuracy0.9460 val_loss: 0.9116 val_accuracy0.8144%

INFO:root:Epoch: 107 loss: 0.1060 accuracy0.9550 val_loss: 0.8609 val_accuracy0.8114%

INFO:root:Epoch: 108 loss: 0.0916 accuracy0.9610 val_loss: 0.6932 val_accuracy0.8413%

INFO:root:Epoch: 109 loss: 0.0913 accuracy0.9633 val_loss: 0.6870 val_accuracy0.8204%

INFO:root:Epoch: 110 loss: 0.0823 accuracy0.9663 val_loss: 1.1941 val_accuracy0.8114%

INFO:root:Epoch: 111 loss: 0.0839 accuracy0.9655 val_loss: 1.1077 val_accuracy0.8234%

INFO:root:Epoch: 112 loss: 0.1164 accuracy0.9573 val_loss: 0.7877 val_accuracy0.8234%

INFO:root:Epoch: 113 loss: 0.1314 accuracy0.9490 val_loss: 0.9095 val_accuracy0.8293%

INFO:root:Epoch: 114 loss: 0.1273 accuracy0.9490 val_loss: 0.9199 val_accuracy0.7874%

INFO:root:Epoch: 115 loss: 0.1301 accuracy0.9423 val_loss: 0.8670 val_accuracy0.8293%

INFO:root:Epoch: 116 loss: 0.0978 accuracy0.9580 val_loss: 0.9542 val_accuracy0.7994%

INFO:root:Epoch: 117 loss: 0.0819 accuracy0.9640 val_loss: 0.8315 val_accuracy0.8293%

INFO:root:Epoch: 118 loss: 0.1160 accuracy0.9520 val_loss: 1.0876 val_accuracy0.7964%

INFO:root:Epoch: 119 loss: 0.1007 accuracy0.9580 val_loss: 1.0691 val_accuracy0.8263%

INFO:root:Epoch: 120 loss: 0.0936 accuracy0.9640 val_loss: 0.8618 val_accuracy0.7994%

INFO:root:Epoch: 121 loss: 0.0736 accuracy0.9730 val_loss: 0.8484 val_accuracy0.8174%

INFO:root:Epoch: 122 loss: 0.0739 accuracy0.9685 val_loss: 0.9271 val_accuracy0.8293%

INFO:root:Epoch: 123 loss: 0.0672 accuracy0.9715 val_loss: 0.8864 val_accuracy0.8114%

INFO:root:Epoch: 124 loss: 0.0726 accuracy0.9715 val_loss: 0.8841 val_accuracy0.8234%

INFO:root:Epoch: 125 loss: 0.0794 accuracy0.9685 val_loss: 1.0696 val_accuracy0.7814%

INFO:root:Epoch: 126 loss: 0.1074 accuracy0.9550 val_loss: 0.7894 val_accuracy0.8263%

INFO:root:Epoch: 127 loss: 0.1151 accuracy0.9558 val_loss: 0.7148 val_accuracy0.7545%

INFO:root:Epoch: 128 loss: 0.1053 accuracy0.9595 val_loss: 0.9018 val_accuracy0.7994%

INFO:root:Epoch: 129 loss: 0.1066 accuracy0.9490 val_loss: 1.2855 val_accuracy0.7934%

INFO:root:Epoch: 130 loss: 0.0835 accuracy0.9663 val_loss: 1.1921 val_accuracy0.8114%

INFO:root:Epoch: 131 loss: 0.0637 accuracy0.9790 val_loss: 0.8184 val_accuracy0.8024%

INFO:root:Epoch: 132 loss: 0.0806 accuracy0.9700 val_loss: 0.7413 val_accuracy0.8204%

INFO:root:Epoch: 133 loss: 0.0766 accuracy0.9678 val_loss: 0.9829 val_accuracy0.8293%

INFO:root:Epoch: 134 loss: 0.1044 accuracy0.9625 val_loss: 0.9079 val_accuracy0.8353%

INFO:root:Epoch: 135 loss: 0.1032 accuracy0.9505 val_loss: 1.0389 val_accuracy0.8383%

INFO:root:Epoch: 136 loss: 0.0932 accuracy0.9663 val_loss: 1.3194 val_accuracy0.7874%

INFO:root:Epoch: 137 loss: 0.0785 accuracy0.9633 val_loss: 1.3138 val_accuracy0.8323%

INFO:root:Epoch: 138 loss: 0.0733 accuracy0.9708 val_loss: 1.3838 val_accuracy0.8383%

INFO:root:Epoch: 139 loss: 0.0575 accuracy0.9813 val_loss: 1.1305 val_accuracy0.8114%

INFO:root:Epoch: 140 loss: 0.0546 accuracy0.9768 val_loss: 1.2610 val_accuracy0.7934%

INFO:root:Epoch: 141 loss: 0.0480 accuracy0.9835 val_loss: 1.1137 val_accuracy0.7904%

INFO:root:Epoch: 142 loss: 0.0712 accuracy0.9700 val_loss: 1.0789 val_accuracy0.7964%

INFO:root:Epoch: 143 loss: 0.0652 accuracy0.9730 val_loss: 1.0310 val_accuracy0.8144%

INFO:root:Epoch: 144 loss: 0.0658 accuracy0.9738 val_loss: 1.3163 val_accuracy0.8054%

INFO:root:Epoch: 145 loss: 0.0594 accuracy0.9790 val_loss: 1.3655 val_accuracy0.7784%

INFO:root:Epoch: 146 loss: 0.0761 accuracy0.9655 val_loss: 1.2982 val_accuracy0.7695%

INFO:root:Epoch: 147 loss: 0.0511 accuracy0.9798 val_loss: 1.1468 val_accuracy0.8174%

INFO:root:Epoch: 148 loss: 0.0483 accuracy0.9813 val_loss: 1.0190 val_accuracy0.8114%

INFO:root:Epoch: 149 loss: 0.0375 accuracy0.9865 val_loss: 1.0135 val_accuracy0.8204%

INFO:root:Epoch: 150 loss: 0.0361 accuracy0.9850 val_loss: 1.0848 val_accuracy0.7964%

INFO:root:model summary:
INFO:root:Model: "model_7"
INFO:root:__________________________________________________________________________________________________
INFO:root:Layer (type)                    Output Shape         Param #     Connected to                     
INFO:root:==================================================================================================
INFO:root:input_8 (InputLayer)            [(None, 200, 3)]     0                                            
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_60 (MaxPooling1D) (None, 200, 3)       0           input_8[0][0]                    
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_258 (Conv1D)             (None, 200, 32)      3936        input_8[0][0]                    
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_259 (Conv1D)             (None, 200, 32)      1920        input_8[0][0]                    
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_260 (Conv1D)             (None, 200, 32)      960         input_8[0][0]                    
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_261 (Conv1D)             (None, 200, 32)      96          max_pooling1d_60[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_60 (Concatenate)    (None, 200, 128)     0           conv1d_258[0][0]                 
INFO:root:                                                                 conv1d_259[0][0]                 
INFO:root:                                                                 conv1d_260[0][0]                 
INFO:root:                                                                 conv1d_261[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_78 (BatchNo (None, 200, 128)     512         concatenate_60[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_78 (Activation)      (None, 200, 128)     0           batch_normalization_78[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_61 (MaxPooling1D) (None, 200, 128)     0           activation_78[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_262 (Conv1D)             (None, 200, 32)      167936      activation_78[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_263 (Conv1D)             (None, 200, 32)      81920       activation_78[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_264 (Conv1D)             (None, 200, 32)      40960       activation_78[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_265 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_61[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_61 (Concatenate)    (None, 200, 128)     0           conv1d_262[0][0]                 
INFO:root:                                                                 conv1d_263[0][0]                 
INFO:root:                                                                 conv1d_264[0][0]                 
INFO:root:                                                                 conv1d_265[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_79 (BatchNo (None, 200, 128)     512         concatenate_61[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_79 (Activation)      (None, 200, 128)     0           batch_normalization_79[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_62 (MaxPooling1D) (None, 200, 128)     0           activation_79[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_266 (Conv1D)             (None, 200, 32)      167936      activation_79[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_267 (Conv1D)             (None, 200, 32)      81920       activation_79[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_268 (Conv1D)             (None, 200, 32)      40960       activation_79[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_269 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_62[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_62 (Concatenate)    (None, 200, 128)     0           conv1d_266[0][0]                 
INFO:root:                                                                 conv1d_267[0][0]                 
INFO:root:                                                                 conv1d_268[0][0]                 
INFO:root:                                                                 conv1d_269[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_270 (Conv1D)             (None, 200, 128)     384         input_8[0][0]                    
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_80 (BatchNo (None, 200, 128)     512         concatenate_62[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_81 (BatchNo (None, 200, 128)     512         conv1d_270[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_80 (Activation)      (None, 200, 128)     0           batch_normalization_80[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:add_18 (Add)                    (None, 200, 128)     0           batch_normalization_81[0][0]     
INFO:root:                                                                 activation_80[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_81 (Activation)      (None, 200, 128)     0           add_18[0][0]                     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_63 (MaxPooling1D) (None, 200, 128)     0           activation_81[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_271 (Conv1D)             (None, 200, 32)      167936      activation_81[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_272 (Conv1D)             (None, 200, 32)      81920       activation_81[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_273 (Conv1D)             (None, 200, 32)      40960       activation_81[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_274 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_63[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_63 (Concatenate)    (None, 200, 128)     0           conv1d_271[0][0]                 
INFO:root:                                                                 conv1d_272[0][0]                 
INFO:root:                                                                 conv1d_273[0][0]                 
INFO:root:                                                                 conv1d_274[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_82 (BatchNo (None, 200, 128)     512         concatenate_63[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_82 (Activation)      (None, 200, 128)     0           batch_normalization_82[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_64 (MaxPooling1D) (None, 200, 128)     0           activation_82[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_275 (Conv1D)             (None, 200, 32)      167936      activation_82[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_276 (Conv1D)             (None, 200, 32)      81920       activation_82[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_277 (Conv1D)             (None, 200, 32)      40960       activation_82[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_278 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_64[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_64 (Concatenate)    (None, 200, 128)     0           conv1d_275[0][0]                 
INFO:root:                                                                 conv1d_276[0][0]                 
INFO:root:                                                                 conv1d_277[0][0]                 
INFO:root:                                                                 conv1d_278[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_83 (BatchNo (None, 200, 128)     512         concatenate_64[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_83 (Activation)      (None, 200, 128)     0           batch_normalization_83[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_65 (MaxPooling1D) (None, 200, 128)     0           activation_83[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_279 (Conv1D)             (None, 200, 32)      167936      activation_83[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_280 (Conv1D)             (None, 200, 32)      81920       activation_83[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_281 (Conv1D)             (None, 200, 32)      40960       activation_83[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_282 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_65[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_65 (Concatenate)    (None, 200, 128)     0           conv1d_279[0][0]                 
INFO:root:                                                                 conv1d_280[0][0]                 
INFO:root:                                                                 conv1d_281[0][0]                 
INFO:root:                                                                 conv1d_282[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_283 (Conv1D)             (None, 200, 128)     16384       activation_81[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_84 (BatchNo (None, 200, 128)     512         concatenate_65[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_85 (BatchNo (None, 200, 128)     512         conv1d_283[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_84 (Activation)      (None, 200, 128)     0           batch_normalization_84[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:add_19 (Add)                    (None, 200, 128)     0           batch_normalization_85[0][0]     
INFO:root:                                                                 activation_84[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_85 (Activation)      (None, 200, 128)     0           add_19[0][0]                     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_66 (MaxPooling1D) (None, 200, 128)     0           activation_85[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_284 (Conv1D)             (None, 200, 32)      167936      activation_85[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_285 (Conv1D)             (None, 200, 32)      81920       activation_85[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_286 (Conv1D)             (None, 200, 32)      40960       activation_85[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_287 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_66[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_66 (Concatenate)    (None, 200, 128)     0           conv1d_284[0][0]                 
INFO:root:                                                                 conv1d_285[0][0]                 
INFO:root:                                                                 conv1d_286[0][0]                 
INFO:root:                                                                 conv1d_287[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_86 (BatchNo (None, 200, 128)     512         concatenate_66[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_86 (Activation)      (None, 200, 128)     0           batch_normalization_86[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_67 (MaxPooling1D) (None, 200, 128)     0           activation_86[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_288 (Conv1D)             (None, 200, 32)      167936      activation_86[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_289 (Conv1D)             (None, 200, 32)      81920       activation_86[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_290 (Conv1D)             (None, 200, 32)      40960       activation_86[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_291 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_67[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_67 (Concatenate)    (None, 200, 128)     0           conv1d_288[0][0]                 
INFO:root:                                                                 conv1d_289[0][0]                 
INFO:root:                                                                 conv1d_290[0][0]                 
INFO:root:                                                                 conv1d_291[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_87 (BatchNo (None, 200, 128)     512         concatenate_67[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_87 (Activation)      (None, 200, 128)     0           batch_normalization_87[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_68 (MaxPooling1D) (None, 200, 128)     0           activation_87[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_292 (Conv1D)             (None, 200, 32)      167936      activation_87[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_293 (Conv1D)             (None, 200, 32)      81920       activation_87[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_294 (Conv1D)             (None, 200, 32)      40960       activation_87[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_295 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_68[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_68 (Concatenate)    (None, 200, 128)     0           conv1d_292[0][0]                 
INFO:root:                                                                 conv1d_293[0][0]                 
INFO:root:                                                                 conv1d_294[0][0]                 
INFO:root:                                                                 conv1d_295[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_296 (Conv1D)             (None, 200, 128)     16384       activation_85[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_88 (BatchNo (None, 200, 128)     512         concatenate_68[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_89 (BatchNo (None, 200, 128)     512         conv1d_296[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_88 (Activation)      (None, 200, 128)     0           batch_normalization_88[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:add_20 (Add)                    (None, 200, 128)     0           batch_normalization_89[0][0]     
INFO:root:                                                                 activation_88[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_89 (Activation)      (None, 200, 128)     0           add_20[0][0]                     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_69 (MaxPooling1D) (None, 200, 128)     0           activation_89[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_297 (Conv1D)             (None, 200, 32)      167936      activation_89[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_298 (Conv1D)             (None, 200, 32)      81920       activation_89[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_299 (Conv1D)             (None, 200, 32)      40960       activation_89[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_300 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_69[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_69 (Concatenate)    (None, 200, 128)     0           conv1d_297[0][0]                 
INFO:root:                                                                 conv1d_298[0][0]                 
INFO:root:                                                                 conv1d_299[0][0]                 
INFO:root:                                                                 conv1d_300[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_90 (BatchNo (None, 200, 128)     512         concatenate_69[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_90 (Activation)      (None, 200, 128)     0           batch_normalization_90[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_70 (MaxPooling1D) (None, 200, 128)     0           activation_90[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_301 (Conv1D)             (None, 200, 32)      167936      activation_90[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_302 (Conv1D)             (None, 200, 32)      81920       activation_90[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_303 (Conv1D)             (None, 200, 32)      40960       activation_90[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_304 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_70[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_70 (Concatenate)    (None, 200, 128)     0           conv1d_301[0][0]                 
INFO:root:                                                                 conv1d_302[0][0]                 
INFO:root:                                                                 conv1d_303[0][0]                 
INFO:root:                                                                 conv1d_304[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_91 (BatchNo (None, 200, 128)     512         concatenate_70[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_91 (Activation)      (None, 200, 128)     0           batch_normalization_91[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:max_pooling1d_71 (MaxPooling1D) (None, 200, 128)     0           activation_91[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_305 (Conv1D)             (None, 200, 32)      167936      activation_91[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_306 (Conv1D)             (None, 200, 32)      81920       activation_91[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_307 (Conv1D)             (None, 200, 32)      40960       activation_91[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_308 (Conv1D)             (None, 200, 32)      4096        max_pooling1d_71[0][0]           
INFO:root:__________________________________________________________________________________________________
INFO:root:concatenate_71 (Concatenate)    (None, 200, 128)     0           conv1d_305[0][0]                 
INFO:root:                                                                 conv1d_306[0][0]                 
INFO:root:                                                                 conv1d_307[0][0]                 
INFO:root:                                                                 conv1d_308[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:conv1d_309 (Conv1D)             (None, 200, 128)     16384       activation_89[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_92 (BatchNo (None, 200, 128)     512         concatenate_71[0][0]             
INFO:root:__________________________________________________________________________________________________
INFO:root:batch_normalization_93 (BatchNo (None, 200, 128)     512         conv1d_309[0][0]                 
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_92 (Activation)      (None, 200, 128)     0           batch_normalization_92[0][0]     
INFO:root:__________________________________________________________________________________________________
INFO:root:add_21 (Add)                    (None, 200, 128)     0           batch_normalization_93[0][0]     
INFO:root:                                                                 activation_92[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:activation_93 (Activation)      (None, 200, 128)     0           add_21[0][0]                     
INFO:root:__________________________________________________________________________________________________
INFO:root:global_average_pooling1d_7 (Glo (None, 128)          0           activation_93[0][0]              
INFO:root:__________________________________________________________________________________________________
INFO:root:dense_7 (Dense)                 (None, 2)            258         global_average_pooling1d_7[0][0] 
INFO:root:==================================================================================================
INFO:root:Total params: 3,308,930
INFO:root:Trainable params: 3,304,834
INFO:root:Non-trainable params: 4,096
INFO:root:__________________________________________________________________________________________________
INFO:root:classification report:              precision    recall  f1-score   support

           0       0.81      0.96      0.88       192
           1       0.93      0.70      0.80       142

    accuracy                           0.85       334
   macro avg       0.87      0.83      0.84       334
weighted avg       0.87      0.85      0.85       334


INFO:root:mean_time=0.20263348892331123
INFO:root:One-vs-One ROC AUC scores:
INFO:root:0.891792 (macro)
INFO:root:0.891792 (weighted by prevalence)
INFO:root:One-vs-Rest ROC AUC scores:
INFO:root:0.891792 (macro)
INFO:root:0.891792 (weighted by prevalence)
INFO:root:Average precision score:
INFO:root:0.886860 (micro-averaged over all classes)
INFO:root:testing confusionmatrix:
INFO:root:[[213.  61.]
 [ 14. 129.]]
INFO:root:testing acc:0.8201438848920863
INFO:root:testing fscore:[0.8502994011976048, 0.7747747747747747]
INFO:root:testing weighted fscore:0.8158877009090251
DEBUG:matplotlib.colorbar:locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fa8b80fe8b0>
DEBUG:matplotlib.colorbar:Using auto colorbar locator on colorbar
DEBUG:matplotlib.colorbar:locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fa8b80fe8b0>
DEBUG:matplotlib.colorbar:Setting pcolormesh
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=20.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 1.2440909090909091
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msbm10' (msbm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'eufm10' (eufm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'esint10' (esint10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'wasy10' (wasy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msam10' (msam10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 2.244090909090909
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'rsfs10' (rsfs10.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'stmary10' (stmary10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=20.0 to DejaVu Sans ('/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 1.2440909090909091
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinIE6' (MathJax_WinIE6-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msbm10' (msbm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_SansSerif' (MathJax_SansSerif-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'eufm10' (eufm10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Fraktur' (MathJax_Fraktur-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Script' (MathJax_Script-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Caligraphic' (MathJax_Caligraphic-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size1' (MathJax_Size1-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Typewriter' (MathJax_Typewriter-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_AMS' (MathJax_AMS-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size3' (MathJax_Size3-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size2' (MathJax_Size2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector' (MathJax_Vector-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'esint10' (esint10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Vector-Bold' (MathJax_Vector-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'wasy10' (wasy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_WinChrome' (MathJax_WinChrome-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-BoldItalic.otf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'msam10' (msam10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 2.244090909090909
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'rsfs10' (rsfs10.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Main' (MathJax_Main-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Math' (MathJax_Math-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'MathJax_Size4' (MathJax_Size4-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'stmary10' (stmary10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans ('/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
INFO:root:mean_time_total=1397.1381914587691
